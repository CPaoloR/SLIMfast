classdef ClassRaw < SuperclassData
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties(Hidden, Transient)
        hTestLocFig = nan;
        
        %% Tooltips
        ToolTips = struct(...
            'Toolbar', struct(...
            'SaveImage', sprintf('Save Image as TIFF'),...
            'SaveMovie', sprintf('Save Image Sequence as AVI'),...
            'DisplayManager', sprintf('Adjust Image Display Settings'),...
            'CloneData', sprintf('Duplicate Data'),...
            'PxIntDist', sprintf('Show Pixel Intensity Distribution'),...
            'UnitConvManager', sprintf('Define Unit Conversion Factors'),...
            'LocManager', sprintf('Localize Single Emitter'),...
            'RoiManager', sprintf('Create/Load Region of Interest')))
    end %properties
    
    methods
        %constructor
        function this = ClassRaw
            %initialize parental class
            this = this@SuperclassData;
        end %fun
        
        %%
        function display_frame(this)
            %image post processing
            imageData = this.RawImagedata;
            
            %check if image filter is selected
            if this.objDisplaySettings.UseFilter
                switch this.objDisplaySettings.FilterModel
                    case 'Hypothesis Map'
                        T = this.objDisplaySettings.FilterSettings(1)*...
                            this.objDisplaySettings.FilterSettings(1) ;
                        
                        %% Hypothese H0
                        %% pas de particule dans la fenetre
                        m = ones(this.objDisplaySettings.FilterSettings(1),...
                            this.objDisplaySettings.FilterSettings(1)) ;
                        
                        hm = zeros(this.objImageFile.ChannelHeight,this.objImageFile.ChannelWidth) ;
                        nc = floor(this.objImageFile.ChannelHeight/2 - this.objDisplaySettings.FilterSettings(1)/2) ;
                        mc = floor(this.objImageFile.ChannelWidth/2 - this.objDisplaySettings.FilterSettings(1)/2) ;
                        hm((nc+1):(nc+this.objDisplaySettings.FilterSettings(1)) ,...
                            (mc+1):(mc+this.objDisplaySettings.FilterSettings(1))) = m ;
                        
                        tfhm = fft2(hm) ;
                        tfim = fft2(imageData) ;
                        m0 = real(fftshift(ifft2(tfhm .* tfim))) /T ;
                        
                        im2 = imageData .* imageData ;
                        tfim2 = fft2(im2) ;
                        Sim2 = real(fftshift(ifft2(tfhm .* tfim2)));
                        
                        %% H0 = T/2*log(2*pi*sig0^2)-T/2 ;
                        T_sig0_2 = Sim2 - T*m0.^2 ;
                        
                        %% Hypothèse H1
                        %% une particule est au centre de la fenetre
                        %% amplitude inconnue, rayon fixe
                        
                        i = 0.5 + (0:(this.objDisplaySettings.FilterSettings(1)-1)) - ...
                            this.objDisplaySettings.FilterSettings(1)/2 ;
                        j = 0.5 + (0:(this.objDisplaySettings.FilterSettings(1)-1)) - ...
                            this.objDisplaySettings.FilterSettings(1)/2 ;
                        ii = i' * ones(1,this.objDisplaySettings.FilterSettings(1)) ;
                        jj = ones(this.objDisplaySettings.FilterSettings(1),1) * j ;
                        
                        %%% puissance unitaire
                        g = (1/(sqrt(pi)*this.objDisplaySettings.FilterSettings(2)))*...
                            exp(-(1/(2*this.objDisplaySettings.FilterSettings(2)^2))*(ii.*ii + jj.*jj)) ;
                        gc = g - sum(g(:))/T ;
                        Sgc2 = sum(gc(:).^2) ;
                        
                        hm((nc+1):(nc+this.objDisplaySettings.FilterSettings(1)) ,...
                            (mc+1):(mc+this.objDisplaySettings.FilterSettings(1))) = gc ;
                        
                        tfhgc = fft2(hm) ;
                        
                        alpha = real(fftshift(ifft2(tfhgc .* tfim))) / Sgc2 ;
                        
                        test = 1 - (Sgc2 * alpha.^2) ./ T_sig0_2 ;
                        test = (test > 0) .* test + (test <= 0) ;
                        loglikeMap = - T * log(test) ;
                        loglikeMap(isnan(loglikeMap)) = 0;
                        imageData = circshift(loglikeMap,[1 1]);
                    case 'Difference of Gaussian'
                        %apply DoG-Filter
                        imageData = imfilter(imageData,...
                            fspecial('gaussian', this.objDisplaySettings.FilterSettings(1), ...
                            this.objDisplaySettings.FilterSettings(2))-...
                            fspecial('gaussian', this.objDisplaySettings.FilterSettings(1), ...
                            this.objDisplaySettings.FilterSettings(3)));
                    case 'Wiener Adaptive Noise'
                        imageData = wiener2(imageData, ...
                            [this.objDisplaySettings.FilterSettings(1) ...
                            this.objDisplaySettings.FilterSettings(1)]);
                    case 'Blind Deconvolution'
                        imageData = deconvblind(imageData, ...
                            fspecial('gaussian',(this.objDisplaySettings.FilterSettings(1)), ...
                            this.objDisplaySettings.FilterSettings(2)),...
                            this.objDisplaySettings.FilterSettings(3));
                end %switch
            end %if
            
            %check if calibrated raw image mode is selected
            if this.objDisplaySettings.UseCalRawImage
                imageData = imtransform(imageData,...
                    this.objImageFile.objChannelConfig.CalMatrix(this.Channel),...
                    'bilinear',...
                    'YData',[1 this.objImageFile.ChannelHeight],...
                    'XData', [1 this.objImageFile.ChannelWidth],...
                    'Fill', 0);
            end %if
            
            %check if localization manager is open & intensity threshold
            %selected
            if ishandle(this.objLocSettings.hFig) && ...
                    this.objLocSettings.MinInt > 0
                imageData = imageData .*...
                    double(this.RawImagedata > this.objLocSettings.MinInt);
            end %if
            
            %crop image to match field of view
            imageData = crop_image(imageData,this.FieldOfView(1:4),[]);
                                   
            %check for roi
            if this.objRoi.HasRoi
                if this.objRoi.FocusRoi
                    maskData = crop_image(this.Maskdata,this.FieldOfView(1:4),this.ActExp);
                    imageData = imageData.*maskData;
                end %if
            end %if
            
            update_intensity_data(this.objContrastSettings,imageData);
            if ishandle(this.objContrastSettings.hFig)               
                plot_intensity_data(this.objContrastSettings)
            end %if

            %save postprocessed image
            this.Imagedata = imageData;
            
            display_frame@SuperclassData(this)
            
            if ishandle(this.objLineProfile.hFig)
               update_profile_plot(this.objLineProfile)
            end %if
        end %fun
        function initialize_image_visualization(this)
            initialize_image_visualization@SuperclassData(this)
            set(this.hImageFig,'Visible','on')
        end %fun
        function construct_image_toolbar(this)
            hToolbar = uitoolbar(...
                'Parent',this.hImageFig);
            icon = getappdata(0,'icon');
            hFileInfo = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('File_Information'));
            hCloneData = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Generate_Subset'),...
                'TooltipString', this.ToolTips.Toolbar.CloneData,...
                'ClickedCallback', @(src,evnt)generate_filtered_data_set(this));
            hDispMan = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Visualization_2D'),...
                'TooltipString', this.ToolTips.Toolbar.DisplayManager,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objDisplaySettings));
            hSaveImage = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Save_Image'),...
                'Separator','on',...
                'TooltipString', this.ToolTips.Toolbar.SaveImage,...
                'ClickedCallback', @(src,evnt)save_image(this));
            hSaveMovie = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Save_Movie'),...
                'TooltipString', this.ToolTips.Toolbar.SaveMovie,...
                'ClickedCallback', @(src,evnt)save_movie(this));
            hPxIntDist = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Signal_Intensity_Distribution'),...
                'TooltipString', this.ToolTips.Toolbar.PxIntDist,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)ClassHistogram(this,...
                'Pixel Intensity Distribution',this));
            hUnitConvMan = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Unit_Conversion'),...
                'TooltipString', this.ToolTips.Toolbar.UnitConvManager,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objUnitConvFac));
            hLocMan = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Localize'),...
                'TooltipString', this.ToolTips.Toolbar.LocManager,...
                'ClickedCallback', @(src,evnt)set_parameter(this.objLocSettings));
            hRoiMan = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('ROI'),...
                'TooltipString', this.ToolTips.Toolbar.RoiManager,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objRoi));
            hLineProf = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('LineProfile'),...
                'ClickedCallback', @(src,evnt)set_parameter(this.objLineProfile));
            
            this.hImageToolbar = struct(...
                'Toolbar', hToolbar,...
                'FileInfo', hFileInfo,...
                'SaveImage', hSaveImage,...
                'SaveMovie', hSaveMovie,...
                'DisplayManager', hDispMan,...
                'CloneData', hCloneData,...
                'PxIntDist', hPxIntDist,...
                'UnitConvManager', hUnitConvMan,...
                'LocManager', hLocMan,...
                'RoiManager', hRoiMan,...
                'LineProfile', hLineProf);
        end %fun
        
        function isOK = get_frame(this,imgFrameWin,mode)
            isOK = goto_image_frame(this.objImageFile,imgFrameWin(1));
            if ~isOK
                return
            end %if            
            finalFrameImg = read_raw_image(this.objImageFile);
            
            numImgFrames = numel(imgFrameWin);
            if numImgFrames > 1
                for idxImgFrameWin = 2:numImgFrames
                    isOK = goto_image_frame(...
                        this.objImageFile,imgFrameWin(idxImgFrameWin));
                    if ~isOK
                        return
                    end %if
                    frameImg = read_raw_image(this.objImageFile);
                    
                    switch mode
                        case 'Cumulative'
                            finalFrameImg = finalFrameImg + frameImg;
                        case 'Minimum'
                            finalFrameImg = min(...
                                finalFrameImg, frameImg);
                        case 'Maximum'
                            finalFrameImg = max(...
                                finalFrameImg, frameImg);
                        case 'Average'
                            delta = frameImg - finalFrameImg;
                            finalFrameImg = finalFrameImg + delta/idxImgFrameWin;
                        case 'Variance'
                            if idxImgFrameWin == 2
                                sumSquaredDiff = zeros(size(finalFrameImg));
                                
                                delta = frameImg - finalFrameImg;
                                average = finalFrameImg + delta/idxImgFrameWin;
                            else
                                delta = frameImg - average;
                                average = average + delta/idxImgFrameWin;
                            end %if
                            
                            sumSquaredDiff = sumSquaredDiff +...
                                delta.*(frameImg - average);
                            finalFrameImg = sumSquaredDiff/(idxImgFrameWin-1);
                    end %switch
                end %for
            end %if
            
            this.RawImagedata = finalFrameImg;
        end %fun
        
        %%
        function generate_filtered_data_set(this)
            generate_new_data_set(this,[])
        end %fun
        function objClone = generate_new_data_set(this,~)
            %initialize cloned localization object
            objClone = clone_object(this,this.Parent);
            %reset roi list
            objClone.objRoi.SrcContainer.RoiList = [];
            
            if this.objRoi.CropRoi
                objClone.FieldOfView = this.MaskRect;
            else
                objClone.FieldOfView = [0.5 0.5 ...
                    this.objImageFile.ChannelWidth+0.5 ...
                    this.objImageFile.ChannelHeight+0.5 ...
                    this.objImageFile.ChannelWidth ...
                    this.objImageFile.ChannelHeight];
            end %if
            
            %update image data
            show_frame(objClone,objClone.Frame);
            
            %check if actual data object is visualized
            if ishandle(this.hImageFig)
                initialize_visualization(objClone)
            end %if
            
            %update project explorer
            add_data_to_project(...
                get_parental_object(this,'ClassProject'),objClone)
        end %fun
        
        %%
        function estimate_experimental_psf(this)
            %start particle detection
            hProgressbar = ClassProgressbar({'PSF Radii Estimation...'});
            
            settings = struct(...
                'mask', circshift(this.Maskdata & ...
                this.RawImagedata >= this.objLocSettings.MinInt,[-1 -1]),...
                'height',this.objImageFile.ChannelHeight,...
                'width',this.objImageFile.ChannelWidth,...
                'winY',this.objLocSettings.WinY,...
                'winX',this.objLocSettings.WinX,...
                'nDeflate',min(this.objLocSettings.NumDeflat,10),...
                'radiusPSF',this.objLocSettings.RadiusPSF,...
                'lowerBoundPSF',this.objLocSettings.LowerBoundPSF/100,...
                'upperBoundPSF',this.objLocSettings.UpperBoundPSF/100,...
                'errRate',this.objLocSettings.ErrRate,...
                'locModel','Fitted',...
                'maxIter',this.objLocSettings.MaxIter,...
                'termTol',this.objLocSettings.TermTol,...
                'maxPosRef',this.objLocSettings.MaxPosRef);
            
            particleCnt = 0;
            critParticleCnt = 500;
            frameIdx = this.LocStart;
            while frameIdx <= this.LocEnd && particleCnt < critParticleCnt
                isOK = goto_image_frame(this.objImageFile,frameIdx);
                if ~isOK
                    break
                end %if
                
                [estimates, numLocParticles, ~, ~, ~] =...
                    image_signal_detection(...
                    read_raw_image(this.objImageFile),settings);
                
                if numLocParticles > 0
                    if particleCnt == 0
                        %preallocate by size estimate
                        %1.2*numLocParticles*#frames
                        allocate = 1.2*numLocParticles*...
                            this.objLocSettings.LocEnd-frameIdx+1;
                        
                        listRadii = zeros(round(allocate),1);
                    end %if
                    
                    particleCnt = particleCnt + numLocParticles;
                    if particleCnt > allocate
                        %dynamically expand preallocated matrix
                        avDetectionRate = particleCnt/frameIdx;
                        
                        expansion = 1.2*avDetectionRate*...
                            this.objLocSettings.LocEnd-frameIdx+1;
                        listRadii = [listRadii;
                            zeros(round(expansion),1)];
                        allocate = allocate+expansion;
                    end %if
                    
                    listRadii(particleCnt-numLocParticles+1:particleCnt) = ...
                        estimates(:,8);
                    listRadii(particleCnt+1:end) = [];
                    
                    numTargets = numel(this.objLocSettings.TargetContainer);
                    for idx = 1:numTargets
                        this.objLocSettings.TargetContainer(idx).EstRadii = listRadii;
                    end %for
                    this.objLocSettings.SrcContainer.EstRadii = listRadii;
                    
                    update_progressbar(hProgressbar,{particleCnt/critParticleCnt})
                end %if
                
                frameIdx = frameIdx+1;
            end %for
            close_progressbar(hProgressbar)
            
            plot_psf_radii(this.objLocSettings)
        end %fun
        function test_localization_settings(this)
            %check display settings & and correct in case not
            if this.objDisplaySettings.DisplayWin > 1
                waitfor(errordlg(sprintf(...
                    'Image binning not supported.\nPlease set to 1.'),'','modal'))
                return
            end %if
            if this.objDisplaySettings.IsCumulative
                waitfor(errordlg(sprintf(...
                    'Accumulative Mode not supported.\nPlease deactivate.'),'','modal'))
                return
            end %if
            
            settings = struct(...
                'mask', circshift(this.Maskdata & ...
                this.RawImagedata >= this.objLocSettings.MinInt,[-1 -1]),...
                'height',this.objImageFile.ChannelHeight,....
                'width',this.objImageFile.ChannelWidth,...
                'winY',this.objLocSettings.WinY,...
                'winX',this.objLocSettings.WinX,...
                'nDeflate',min(this.objLocSettings.NumDeflat,10),...
                'radiusPSF',this.objLocSettings.RadiusPSF,...
                'lowerBoundPSF',this.objLocSettings.LowerBoundPSF/100,...
                'upperBoundPSF',this.objLocSettings.UpperBoundPSF/100,...
                'errRate',this.objLocSettings.ErrRate,...
                'locModel',this.objLocSettings.LocModel,...
                'maxIter',this.objLocSettings.MaxIter,...
                'termTol',this.objLocSettings.TermTol,...
                'maxPosRef',this.objLocSettings.MaxPosRef);
            
            [estimates, numLocParticles, ...
                deflationMap, binaryMap, loglikeMap] =...
                image_signal_detection(this.RawImagedata,settings);
            
            if numLocParticles == 0
                waitfor(errordlg('No particles detected','','modal'))
                return
            end
            
            this.hTestLocFig = ...
                figure(...
                'Units','pixels',...
                'Position', set_figure_position(...
                this.FieldOfView(5)/this.FieldOfView(6),0.7,'center'),...
                'Color', this.FamilyColor,...
                'Name', sprintf(...
                'Localization Test: %.0f particles detected', numLocParticles),...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'IntegerHandle','off',...
                'DockControls', 'off',...
                'Resize', 'off');
            
            hToolbar = uitoolbar(...
                'Parent',this.hTestLocFig);
            icon = getappdata(0,'icon');
            uitoggletool(...
                'Parent',hToolbar,...
                'Separator','on',...
                'CData', icon.('Zoom'),...
                'Tag','Zoom',...
                'ClickedCallback', @(src,evnt)set_zoom(src))
            uitoggletool(...
                'Parent',hToolbar,...
                'CData', icon.('Pan'),...
                'Tag','Pan',...
                'ClickedCallback', @(src,evnt)set_pan(src))
            
            %% ax1 -> raw + detections
            hTestLocAx(1) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0 0.5 0.5 0.5]);
            
            imshow(this.RawImagedata(...
                this.FieldOfView(2)+0.5:this.FieldOfView(4)-0.5,...
                this.FieldOfView(1)+0.5:this.FieldOfView(3)-0.5), ...
                this.objContrastSettings.IntLimits, ...
                'Parent', hTestLocAx(1));
            
            %find coordinates within field of view
            good = estimates(:,2) >= this.FieldOfView(2) &...
                estimates(:,2) <= this.FieldOfView(4) &...
                estimates(:,3) >= this.FieldOfView(1) &...
                estimates(:,3) <= this.FieldOfView(3);
            
            t = linspace(0, 2*pi, 20);
            u = [cos(t(:))'; sin(t(:))'];
            for pointIdx = 1:numLocParticles
                if good(pointIdx)
                    switch this.objLocSettings.LocModel
                        case {'Fixed','Fitted'}
                            w = estimates(pointIdx,8) * flipud(u);
                        case 'Astigmatic'
                            eigVal = [estimates(pointIdx,8)^2 0;...
                                0 estimates(pointIdx,9)^2];
                            phi = 0;
                            w = ((eigVal * flipud(u)).' *...
                                [cosd(phi) sind(phi);-sind(phi) cosd(phi)]).';
                    end %switch
                    z = repmat([...
                        estimates(pointIdx,2)+1-(this.FieldOfView(2)-0.5);...
                        estimates(pointIdx,3)+1-(this.FieldOfView(1)-0.5)], ...
                        [1 20]) + w;
                    
                    patch(z(2,:),z(1,:),[1 0 0],...
                        'Parent', hTestLocAx(1),...
                        'FaceAlpha', 0.4)
                end %if
            end %for
            
            %% ax2 -> deflated image
            hTestLocAx(2) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0.5 0.5 0.5 0.5]);
            
            imshow(deflationMap(...
                this.FieldOfView(2)+0.5:this.FieldOfView(4)-0.5,...
                this.FieldOfView(1)+0.5:this.FieldOfView(3)-0.5), ...
                this.objContrastSettings.IntLimits, ...
                'Parent', hTestLocAx(2));
            
            %% ax3 -> glrt map
            hTestLocAx(3) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0 0 0.5 0.5]);
            
            %compute colormap
            criticalErrRate = settings.errRate;
            criticalGLR = chi2inv(1-10^criticalErrRate,1);
            nearCriticalGLR =  chi2inv(1-10^(criticalErrRate+1),1);
            
            minGLR = min(loglikeMap(:));
            maxGLR = max(loglikeMap(:));
            criticalGLR = floor((criticalGLR-minGLR)/...
                (maxGLR-minGLR)*255);
            nearCriticalGLR = floor((nearCriticalGLR-minGLR)/...
                (maxGLR-minGLR)*255);
            cmap = [[linspace(0,1,nearCriticalGLR-1);...
                zeros(2,nearCriticalGLR-1)] ...
                repmat([1;1;0],1,criticalGLR-nearCriticalGLR) ...
                repmat([0;1;0],1,256-criticalGLR)]';
            
            loglikeMap = circshift(fix((loglikeMap-minGLR)/...
                (maxGLR-minGLR)*255),[1 1]);
            
            imshow(ind2rgb(loglikeMap(...
                this.FieldOfView(2)+0.5:this.FieldOfView(4)-0.5,...
                this.FieldOfView(1)+0.5:this.FieldOfView(3)-0.5),cmap), [0 255],...
                'Parent', hTestLocAx(3));
            
            %% ax4 roi mask + binary detections
            hTestLocAx(4) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0.5 0 0.5 0.5]);
            
            cmap = [1 1 1; 0 0 0; 1 0 0];
            
            binaryMap = circshift(...
                settings.mask+binaryMap+1,[1 1]);
            
            imshow(ind2rgb(binaryMap(...
                this.FieldOfView(2)+0.5:this.FieldOfView(4)-0.5,...
                this.FieldOfView(1)+0.5:this.FieldOfView(3)-0.5),cmap), [0 2],...
                'Parent', hTestLocAx(4));
            
            linkaxes(hTestLocAx,'xy')
        end %fun
        function objLoc = single_localization(this)
            %close localization manager
            if ishandle(this.objLocSettings.hFig)
                delete(this.objLocSettings.hFig)
            end %if
            
            %get specified roi mask
            maskdata = this.Maskdata;
            
            %start particle detection
            if this.objLocSettings.LocPar
                 hProgressbar = ClassProgressbar(...
                {'Emitter Localization...'},...
                'IsInterruptable',false);
                start_loop(hProgressbar,0.05)
                
                %get local parallel profile
                parProfile = parcluster('local');
                if strcmp(this.objLocSettings.nCores,'all')
                    matlabpool(get(parProfile,'NumWorkers'))
                else
                    nCores = str2double(this.objLocSettings.nCores);
                    
                    %check if desired # of cores are available
                    if nCores > get(parProfile,'NumWorkers')
                        waitfor(errordlg(sprintf(...
                            'The # of desired cores (%.0f)\n exceeds # of available cores (%.0f).',...
                            nCores,get(parProfile,'NumWorkers')),'','modal'))
                        return
                    else
                        %use specefied # of cores
                        matlabpool(nCores)
                    end %if
                end %if
                
                %slice variables for parallel processing
                objImageFile = this.objImageFile;
                minInt = this.objLocSettings.MinInt;
                height = this.objImageFile.ChannelHeight;
                width = this.objImageFile.ChannelWidth;
                winY = this.objLocSettings.WinY;
                winX = this.objLocSettings.WinX;
                nDeflate = min(this.objLocSettings.NumDeflat,10);
                radiusPSF = this.objLocSettings.RadiusPSF;
                lowerBoundPSF = this.objLocSettings.LowerBoundPSF/100;
                upperBoundPSF = this.objLocSettings.UpperBoundPSF/100;
                errRate = this.objLocSettings.ErrRate;
                locModel = this.objLocSettings.LocModel;
                maxIter = this.objLocSettings.MaxIter;
                termTol = this.objLocSettings.TermTol;
                maxPosRef = this.objLocSettings.MaxPosRef;
                
                numFrames = this.LocEnd-this.LocStart+1;
                estimates = cell(numFrames,1);
                numLocParticles = zeros(numFrames,1);
                parfor frameIdx = this.LocStart:this.LocEnd
                    goto_image_frame(objImageFile,frameIdx);
                    rawImagedata = read_raw_image(objImageFile);
                    
                    settings = struct(...
                        'mask', circshift(maskdata & ...
                        rawImagedata >= minInt,[-1 -1]),...
                        'height',height,....
                        'width',width,...
                        'winY',winY,...
                        'winX',winX,...
                        'nDeflate',nDeflate,...
                        'radiusPSF',radiusPSF,...
                        'lowerBoundPSF',lowerBoundPSF,...
                        'upperBoundPSF',upperBoundPSF,...
                        'errRate',errRate,...
                        'locModel',locModel,...
                        'maxIter',maxIter,...
                        'termTol',termTol,...
                        'maxPosRef',maxPosRef);
                    
                    [estimates{frameIdx}, numLocParticles(frameIdx), ~, ~, ~] =...
                        image_signal_detection(rawImagedata,settings);
                    estimates{frameIdx}(:,1) = ones(numLocParticles(frameIdx),1)*frameIdx;
                end %parfor
                matlabpool close
                
                particleCnt = sum(numLocParticles);
                listLocalized = vertcat(estimates{:});
                
                stopp_loop(hProgressbar)
            else
                 hProgressbar = ClassProgressbar(...
                {'Emitter Localization...'},...
                'IsInterruptable',true);
            
                settings = struct(...
                    'height',this.objImageFile.ChannelHeight,....
                    'width',this.objImageFile.ChannelWidth,...
                    'winY',this.objLocSettings.WinY,...
                    'winX',this.objLocSettings.WinX,...
                    'nDeflate',min(this.objLocSettings.NumDeflat,10),...
                    'radiusPSF',this.objLocSettings.RadiusPSF,...
                    'lowerBoundPSF',this.objLocSettings.LowerBoundPSF/100,...
                    'upperBoundPSF',this.objLocSettings.UpperBoundPSF/100,...
                    'errRate',this.objLocSettings.ErrRate,...
                    'locModel',this.objLocSettings.LocModel,...
                    'maxIter',this.objLocSettings.MaxIter,...
                    'termTol',this.objLocSettings.TermTol,...
                    'maxPosRef',this.objLocSettings.MaxPosRef);
                
                particleCnt = 0;
                locStart = this.LocStart;
                locEnd = this.LocEnd;
                numFrames = locEnd-locStart+1;
                for frameIdx = locStart:locEnd
                    goto_image_frame(this.objImageFile,frameIdx);
                    rawImagedata = read_raw_image(this.objImageFile);
                    
                    settings.mask = circshift(maskdata & ...
                        rawImagedata >= this.objLocSettings.MinInt,[-1 -1]);
                    
                    [estimates, numLocParticles, ~, ~, ~] =...
                        image_signal_detection(rawImagedata,settings);
                    
                    if particleCnt == 0
                        %preallocate by size estimate
                        %1.2*numLocParticles*#frames
                        allocate = 1.2*numLocParticles*...
                            locEnd-frameIdx+1;
                        
                        switch this.objLocSettings.LocModel
                            case {'Fixed','Fitted'}
                                numEstParam = 8;
                            case 'Astigmatic'
                                numEstParam = 9;
                        end %switch
                        listLocalized = zeros(round(allocate),numEstParam);
                    end %if
                    
                    particleCnt = particleCnt + numLocParticles;
                    if particleCnt > allocate
                        %dynamically expand preallocated matrix
                        avDetectionRate = particleCnt/...
                            frameIdx-locStart+1;
                        
                        expansion = 1.2*avDetectionRate*...
                            locEnd-frameIdx+1;
                        listLocalized = [listLocalized;
                            zeros(round(expansion),numEstParam)];
                        allocate = allocate+expansion;
                    end %if
                    
                    listLocalized(particleCnt-numLocParticles+1:particleCnt,:) = ...
                        [ones(numLocParticles,1)*frameIdx estimates(:,2:end)];
                    
                    if this.objLocSettings.LocLive
                        if frameIdx == locStart
                            %initialize live visualization window
                            hLiveFig = ...
                                figure(...
                                'Units','pixels',...
                                'Position', set_figure_position(...
                                this.objImageFile.ChannelWidth/...
                                this.objImageFile.ChannelHeight,0.7,'center'),...
                                'Name', 'LIVE LOCALIZATION',...
                                'NumberTitle', 'off',...
                                'MenuBar', 'none',...
                                'ToolBar', 'none',...
                                'IntegerHandle','off',...
                                'Resize', 'off');
                            
                            hLiveAx = ...
                                axes(...
                                'Units','normalized',...
                                'Position', [0 0 1 1]);
                            
                            hLiveImage = imshow(rawImagedata, [], ...
                                'Parent', hLiveAx);
                            
                            t = linspace(0, 2*pi, 20);
                            u = [cos(t(:))'; sin(t(:))'];
                            hLivePatch = zeros(numLocParticles,1);
                            for pointIdx = 1:numLocParticles
                                switch this.objLocSettings.LocModel
                                    case {'Fixed','Fitted'}
                                        w = estimates(pointIdx,8) * flipud(u);
                                    case 'Astigmatic'
                                        eigVal = [estimates(pointIdx,8)^2 0;...
                                0 estimates(pointIdx,9)^2];
                            phi = 0;
                            w = ((eigVal * flipud(u)).' *...
                                [cosd(phi) sind(phi);-sind(phi) cosd(phi)]).';
                                end %switch
                                z = repmat([1+estimates(pointIdx,2);...
                                    1+estimates(pointIdx,3)], [1 20]) + w;
                                
                                hLivePatch(pointIdx) = patch(...
                                    z(2,:),z(1,:),[1 0 0],...
                                    'Parent', hLiveAx,...
                                    'FaceAlpha', 0.4);
                            end %for
                        elseif frameIdx == locEnd
                            if ishandle(hLiveFig)
                                delete(hLiveFig)
                            end %if
                        else
                            if ishandle(hLiveFig)
                                delete(hLivePatch)
                                
                                set(hLiveImage,'CData',rawImagedata)
                                
                                hLivePatch = zeros(numLocParticles,1);
                                for pointIdx = 1:numLocParticles
                                    switch this.objLocSettings.LocModel
                                        case {'Fixed','Fitted'}
                                            w = estimates(pointIdx,8) * flipud(u);
                                        case 'Astigmatic'
                                           eigVal = [estimates(pointIdx,8)^2 0;...
                                0 estimates(pointIdx,9)^2];
                            phi = 0;
                            w = ((eigVal * flipud(u)).' *...
                                [cosd(phi) sind(phi);-sind(phi) cosd(phi)]).';
                                    end %switch
                                    z = repmat([1+estimates(pointIdx,2);...
                                        1+estimates(pointIdx,3)], [1 20]) + w;
                                    
                                    hLivePatch(pointIdx) = patch(...
                                        z(2,:),z(1,:),[1 0 0],...
                                        'Parent', hLiveAx,...
                                        'FaceAlpha', 0.4);
                                end %for
                            end %if
                        end %if
                        drawnow expose
                    end %if
                    
                    %check if process is to be interrupted
                    if check_for_process_interruption(hProgressbar)
                        close_progressbar(hProgressbar)
                        return
                    else
                        update_progressbar(hProgressbar,...
                            {0.99*(frameIdx-locStart+1)/numFrames})
                    end %if
                end %for
                
                %remove zero rows
                listLocalized(particleCnt+1:end,:) = [];
            end %if
            
            %apply spatial correction
            if this.objImageFile.objChannelConfig.HasCalMatrix(this.Channel)
                    listLocalized(:,[3 2]) = ...
                    tformfwd(this.objImageFile.objChannelConfig.CalMatrix(this.Channel),...
                    listLocalized(:,3),listLocalized(:,2));
                
                %remove points which were move beyond image limits
                bad = listLocalized(:,2)+1 < this.FieldOfView(2) | ...
                    listLocalized(:,2)+1 > this.FieldOfView(4) | ...
                    listLocalized(:,3)+1 < this.FieldOfView(1) | ...
                    listLocalized(:,3)+1 > this.FieldOfView(3);
                listLocalized(bad,:) = [];
                %correct particle count for removed localizations due to
                %roi mask
                particleCnt = particleCnt - sum(bad);
            end %if
            
            % arrange new format
            data = struct(...
                'Particle_ID', transpose(1:particleCnt)*datenum(clock),...
                'Particle_ID_Hex', num2hex(transpose(1:particleCnt)*datenum(clock)),...
                'Time', listLocalized(:,1),...
                'Position_X', listLocalized(:,3)+1,...
                'Position_Y', listLocalized(:,2)+1,...
                'Signalpower', listLocalized(:,5).^2,...
                'Background', listLocalized(:,6),...
                'Noisepower', listLocalized(:,7));
            
            switch this.objLocSettings.LocModel
                case {'Fixed','Fitted'}
                    dim = 2;
                    
                    data.PSFradius = listLocalized(:,8);
                    
                    data.Photons = sqrt(data.Signalpower).*...
                        data.PSFradius*2*sqrt(pi)*this.Count2photon;
                    data.Precision = model_localization_precision(data.PSFradius, this.Px2nm, ...
                        data.Photons, max(0,sqrt(data.Noisepower*this.Count2photon^2-...
                        data.Photons/this.objLocSettings.WinY/this.objLocSettings.WinX))); %(RMSE in Position Estimate)
                    
                    %                     [~,dNN] = knnsearch([data.Position_X data.Position_Y],...
                    %                         [data.Position_X data.Position_Y],'K',2);
                    %                     data.NN = dNN(:,2)*this.Px2nm/1000;
                case 'Astigmatic'
                    dim = 3;
                    
                    data.PSFradius_Y = listLocalized(:,8);
                    data.PSFradius_X = listLocalized(:,9);
%                     data.PSFcov = listLocalized(:,10);
                    
%                     for idx = 1:particleCnt
%                         [eigVec, eigVal] = ...
%                             eig([data.PSFradius_Y(idx)^2 data.PSFcov(idx);...
%                             data.PSFcov(idx) data.PSFradius_X(idx)^2]);
%                         direction = sign(eigVec([1 4]));
%                         data.Position_Z(idx,1) = ...
%                             eigVal(1,1)^-direction(1)/eigVal(2,2)^direction(2);
%                     end %for
            end %switch
            data.SNR = 10*log10(data.Signalpower./data.Noisepower);
            
            % initialize localization class
            objProject = this.Parent;
            objLoc = ClassLocalization;
            set_parent(objLoc,objProject)
            objLoc.Name = this.Name;
            objLoc.Dim = dim;
            
            objLoc.objImageFile = copy(this.objImageFile);
            set_parent(objLoc.objImageFile,objLoc)
            objLoc.objUnitConvFac = copy(this.objUnitConvFac);
            set_parent(objLoc.objUnitConvFac,objLoc)
            objLoc.objLocSettings = copy(this.objLocSettings);
            set_parent(objLoc.objLocSettings,objLoc)
            
            objLoc.objContrastSettings = ManagerContrastSettings(objLoc);
            objLoc.objDisplaySettings = ManagerDisplaySettings(objLoc);
            objLoc.objTrackSettings = ManagerTrackSettings(objLoc);
            objLoc.objClusterSettings = ManagerClusterSettings(objLoc);
            
            objLoc.objColormap = ManagerColormap(objLoc);
            objLoc.objGrid = ManagerGrid(objLoc);
            objLoc.objRoi = ManagerRoi(objLoc);
            objLoc.objScalebar = ManagerScalebar(objLoc);
            objLoc.objTimestamp = ManagerTimestamp(objLoc);
            objLoc.objTextstamp = ManagerTextstamp(objLoc);
            objLoc.objLineProfile = ManagerLineProfile(objLoc);
            
            if this.objRoi.CropRoi
                objLoc.FieldOfView = this.MaskRect;
            else
                objLoc.FieldOfView = this.FieldOfView;
            end %if
            
            objLoc.NumParticles = particleCnt;
            objLoc.DetectionMap = maskdata;
            
            objLoc.Data = data;
            show_frame(objLoc,1);
            
            close_progressbar(hProgressbar)
            
            %check if actual data object is visualized
            if ishandle(this.hImageFig)
                initialize_visualization(objLoc)
            end %if
            
            %update project explorer
            add_data_to_project(objProject,objLoc)
        end %fun
        
        %%
        function saveObj = saveobj(this)
            saveObj = saveobj@SuperclassData(this);
        end %fun
        function close_object(this)
            close_object@SuperclassData(this)
            
            if ishandle(this.hImageFig)
                delete(this.hImageFig)
            end %if
            if ishandle(this.hTestLocFig)
                delete(this.hTestLocFig)
            end %if
        end %fun
        function delete_object(this)
            delete_object@SuperclassData(this)
            
            if ishandle(this.hImageFig)
                delete(this.hImageFig)
            end %if
            if ishandle(this.hTestLocFig)
                delete(this.hTestLocFig)
            end %if
            
            delete(this)
        end %fun
    end %methods
    
    methods (Static)
        function this = loadobj(S)
            this = ClassRaw;
            this = loadobj@SuperclassData(this,S);
        end %fun
    end %methods
end %classdef