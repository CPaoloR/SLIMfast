classdef ClassCalibration < SuperclassData
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties(Hidden)
        NumParticles
        Data
        
        CalModel = 'Affine';
        CalImagedata
    end %properties
    properties(Hidden, Transient)
        hMulticolorFig = nan;
        hMulticolorAx
        hNumAlternatingChannelsEdit
        hSlider
        hPanel
        
        hTestLocFig = nan;
        
        hCalPnt
        IsInitPnt = 1;
        hCalPair
        hCalPairList
        
        IsUserCalibration
        hUserCalFig = nan;
        hCalPreviewButton
        hCalAcceptButton
        
        InitialPanelPos = [0.5, -1.5, -2.5, -3];
        
        CalModels = {...
            'Affine',...
            'Projective'};
        %         CalModels = {...
        %             'Affine',...
        %             'Projective',...
        %             '2nd Order Polynomial',...
        %             '3rd Order Polynomial',...
        %             '4th Order Polynomial',...
        %             'Piecewise Linear',...
        %             'Local Weighted Mean'};
    end %fun
    
    methods
        %constructors
        function this = ClassCalibration
            %initialize parental class
            this = this@SuperclassData;
        end %fun
        
        function set_multicolor_configuration(this)
            scrSize = get(0, 'ScreenSize');
            this.hMulticolorFig =...
                figure(...
                'Units','pixels',...
                'Position', [0.5*(scrSize(3)-500) ...
                0.5*(scrSize(4)-500) 500 500],...
                'Name', 'MULTICOLOR MANAGER',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'Resize', 'off',...
                'WindowScrollWheelFcn', @(src,evnt)scroll_wheel_actions(this,evnt),...
                'IntegerHandle','off');
            
            this.hSlider = ...
                uicontrol(...
                'Style', 'slider',...
                'Units','normalized',...
                'Position', [0.95 0 0.05 1],...
                'Min', -3,...
                'Max', 0,...
                'SliderStep', [0.01 0.1],...
                'Value',0);
            addlistener(this.hSlider, 'ContinuousValueChange',...
                @(src,evnt)scroll_multicolor_configuration(this));
            
            this.hPanel(1) =...
                uipanel(...
                'Parent', this.hMulticolorFig,...
                'Units','normalized',...
                'Position', [0 0.5 0.95 0.5],...
                'Title','MONO VIEW',...
                'Fontsize',18);
            
            this.hMulticolorAx(1) =...
                axes(...
                'Parent', this.hPanel(1),...
                'Tag', 'mono',...
                'Units','pixels',...
                'Position', [20 10 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            uicontrol(...
                'Style', 'text',...
                'Parent', this.hPanel(1),...
                'Units','pixels',...
                'Position', [220 70 250 100],...
                'String', sprintf('Alternating\n Aquisition Mode'),...
                'FontSize',20,...
                'HorizontalAlignment','center');
            
            uicontrol(...
                'Style', 'text',...
                'Parent', this.hPanel(1),...
                'Units','pixels',...
                'Position', [265 50 125 40],...
                'String', '# Colors:',...
                'FontSize',20,...
                'HorizontalAlignment','left');
            
            this.hNumAlternatingChannelsEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Parent', this.hPanel(1),...
                'Units','pixels',...
                'Position', [390 50 40 40],...
                'String', 2,...
                'FontSize',20,...
                'BackgroundColor', [1 1 1],...
                'HorizontalAlignment','center');
            
            this.hPanel(2) =...
                uipanel(...
                'Parent', this.hMulticolorFig,...
                'Units','normalized',...
                'Position', [0 -1.5 0.95 2],...
                'Title','DUAL VIEW',...
                'Fontsize',18);
            
            this.hMulticolorAx(2) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_1',...
                'Units','pixels',...
                'Position', [20 722.5 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(3) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_2',...
                'Units','pixels',...
                'Position', [255 722.5 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(4) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_3',...
                'Units','pixels',...
                'Position', [20 485 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(5) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_4',...
                'Units','pixels',...
                'Position', [255 485 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(6) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_5',...
                'Units','pixels',...
                'Position', [20 247.5 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(7) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_6',...
                'Units','pixels',...
                'Position', [255 247.5 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(8) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_7',...
                'Units','pixels',...
                'Position', [20 10 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(9) =...
                axes(...
                'Parent', this.hPanel(2),...
                'Tag', 'dual_8',...
                'Units','pixels',...
                'Position', [255 10 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hPanel(3) =...
                uipanel(...
                'Parent', this.hMulticolorFig,...
                'Units','normalized',...
                'Position', [0 -2.5 0.95 1],...
                'Title','TRIPLE VIEW',...
                'Fontsize',18);
            
            this.hMulticolorAx(10) =...
                axes(...
                'Parent', this.hPanel(3),...
                'Tag', 'triple_1',...
                'Units','pixels',...
                'Position', [20 247.5 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(11) =...
                axes(...
                'Parent', this.hPanel(3),...
                'Tag', 'triple_2',...
                'Units','pixels',...
                'Position', [255 247.5 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(12) =...
                axes(...
                'Parent', this.hPanel(3),...
                'Tag', 'triple_3',...
                'Units','pixels',...
                'Position', [20 10 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hMulticolorAx(13) =...
                axes(...
                'Parent', this.hPanel(3),...
                'Tag', 'triple_4',...
                'Units','pixels',...
                'Position', [255 10 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            this.hPanel(4) =...
                uipanel(...
                'Parent', this.hMulticolorFig,...
                'Units','normalized',...
                'Position', [0 -3 0.95 0.5],...
                'Title','QUAD VIEW',...
                'Fontsize',18);
            
            this.hMulticolorAx(14) =...
                axes(...
                'Parent', this.hPanel(4),...
                'Tag', 'quad',...
                'Units','pixels',...
                'Position', [20 10 200 200],...
                'CreateFcn',@(src,evnt)build_configuration_image(this,src),...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            
            axis(this.hMulticolorAx, 'off')
        end
        function build_configuration_image(this,src)
            vertices = ...
                [0.1 0.1; 0.5 0.1; 0.9 0.1;...
                0.1 0.5; 0.5 0.5; 0.9 0.5;...
                0.1 0.9; 0.5 0.9; 0.9 0.9];
            faces = ...
                [4 7 8 5;...
                1 4 5 2;...
                2 5 6 3;...
                5 8 9 6];
            
            switch get(src,'Tag')
                case 'mono'
                    faceColor = ...
                        [1 0 0;...
                        1 0 0;...
                        1 0 0;...
                        1 0 0];
                    text(0.5,0.5,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_1'
                    faceColor = ...
                        [1 0 0;...
                        1 0 0;...
                        0 1 0;...
                        0 1 0];
                    text(0.3,0.5,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.5,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_2'
                    faceColor = ...
                        [1 0 0;...
                        0 1 0;...
                        0 1 0;...
                        1 0 0];
                    text(0.5,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.5,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_3'
                    faceColor = ...
                        [1 0 0;...
                        0 0 0;...
                        0 0 0;...
                        0 1 0];
                    text(0.3,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.7,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_4'
                    faceColor = ...
                        [1 0 0;...
                        0 1 0;...
                        0 0 0;...
                        0 0 0];
                    text(0.3,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.3,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_5'
                    faceColor = ...
                        [0 0 0;...
                        1 0 0;...
                        0 1 0;...
                        0 0 0];
                    text(0.3,0.3,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_6'
                    faceColor = ...
                        [0 0 0;...
                        0 0 0;...
                        0 1 0;...
                        1 0 0];
                    text(0.7,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_7'
                    faceColor = ...
                        [1 0 0;...
                        0 0 0;...
                        0 1 0;...
                        0 0 0];
                    text(0.3,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'dual_8'
                    faceColor = ...
                        [0 0 0;...
                        0 1 0;...
                        0 0 0;...
                        1 0 0];
                    text(0.7,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.3,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'triple_1'
                    faceColor = ...
                        [1 0 0;...
                        0 1 0;...
                        0 0 1;...
                        0 0 0];
                    text(0.3,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.3,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.3,'3',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'triple_2'
                    faceColor = ...
                        [1 0 0;...
                        0 1 0;...
                        0 0 0;...
                        0 0 1];
                    text(0.3,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.3,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.7,'3',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'triple_3'
                    faceColor = ...
                        [1 0 0;...
                        0 0 0;...
                        0 1 0;...
                        0 0 1];
                    text(0.3,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.7,'3',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'triple_4'
                    faceColor = ...
                        [0 0 0;...
                        1 0 0;...
                        0 1 0;...
                        0 0 1];
                    text(0.3,0.3,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.7,'3',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                case 'quad'
                    faceColor = ...
                        [1 0 0;...
                        0 1 0;...
                        0 0 1;...
                        0.5 0.5 0.5];
                    text(0.3,0.7,'1',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.3,0.3,'2',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.3,'3',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
                    text(0.7,0.7,'4',...
                        'Parent', src,...
                        'HorizontalAlignment','center',...
                        'FontSize', 30,...
                        'FontWeight', 'bold')
            end %switch
            
            hPatch = patch(...
                'Tag',get(src,'Tag'),...
                'Faces',faces,...
                'Vertices',vertices,...
                'FaceVertexCData', faceColor,...
                'FaceColor','flat',...
                'EdgeAlpha', 0,...
                'ButtonDownFcn',@(src,evnt)select_configuration(this,src));
            uistack(hPatch,'bottom')
        end
        function select_configuration(this,src)
            mode = get(src,'Tag');
            numAlternatingChannels = str2double(...
                get(this.hNumAlternatingChannelsEdit,'String'));
            if ishandle(this.hMulticolorFig)
                delete(this.hMulticolorFig)
            end %if
            
            if strcmp(mode,'mono')
                this.Parent.objChannelConfig.NumParallelChannels = 1;
                this.Parent.objChannelConfig.NumAlternatingChannels = ...
                    numAlternatingChannels;
                this.Parent.objChannelConfig.HasCalMatrix = ...
                    zeros(numAlternatingChannels,1);
                
                initialize_project(this.Parent)
            else
                this.Parent.objChannelConfig.NumAlternatingChannels = 1;
                switch mode
                    case 'dual_1'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 1 0.5 1; 0.5 0 1 1 0.5 1];
                    case 'dual_2'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 1 0.5 1 0.5; 0 0.5 1 1 1 0.5];
                    case 'dual_3'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 0.5 0.5 0.5; 0.5 0 1 0.5 0.5 0.5];
                    case 'dual_4'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 0.5 0.5 0.5; 0 0.5 0.5 1 0.5 0.5];
                    case 'dual_5'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0.5 0.5 1 0.5 0.5; 0.5 0.5 1 1 0.5 0.5];
                    case 'dual_6'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0.5 0 1 0.5 0.5 0.5; 0.5 0.5 1 1 0.5 0.5];
                    case 'dual_7'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 0.5 0.5 0.5; 0.5 0.5 1 1 0.5 0.5];
                    case 'dual_8'
                        this.Parent.objChannelConfig.NumParallelChannels = 2;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0.5 0 1 0.5 0.5 0.5; 0 0.5 0.5 1 0.5 0.5];
                    case 'triple_1'
                        this.Parent.objChannelConfig.NumParallelChannels = 3;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 0.5 0.5 0.5; 0 0.5 0.5 1 0.5 0.5; 0.5 0.5 1 1 0.5 0.5];
                    case 'triple_2'
                        this.Parent.objChannelConfig.NumParallelChannels = 3;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 0.5 0.5 0.5; 0 0.5 0.5 1 0.5 0.5; 0.5 0 1 0.5 0.5 0.5];
                    case 'triple_3'
                        this.Parent.objChannelConfig.NumParallelChannels = 3;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 0.5 0.5 0.5; 0.5 0.5 1 1 0.5 0.5; 0.5 0 1 0.5 0.5 0.5];
                    case 'triple_4'
                        this.Parent.objChannelConfig.NumParallelChannels = 3;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0.5 0.5 1 0.5 0.5; 0.5 0.5 1 1 0.5 0.5; 0.5 0 1 0.5 0.5 0.5];
                    case 'quad'
                        this.Parent.objChannelConfig.NumParallelChannels = 4;
                        this.Parent.objChannelConfig.ChannelRegionNorm = ...
                            [0 0 0.5 0.5 0.5 0.5; 0 0.5 0.5 1 0.5 0.5; ...
                            0.5 0.5 1 1 0.5 0.5; 0.5 0 1 0.5 0.5 0.5];
                end %switch
                
                this.Parent.objChannelConfig.HasCalMatrix = ...
                    zeros(this.Parent.objChannelConfig.NumParallelChannels,1);
                
                answer = questdlg('Calibrate Images?','','Yes','No','Load','Yes');
                switch answer
                    case 'Yes'
                        [filename, filepath,isOK] = uigetfile({...
                            '*.tif;*.btf', 'Supported Imageformats TIFF or BigTIFF (.tif, .btf)'},...
                            'Select Calibrationbeads', getappdata(0,'searchPath'));
                        if isOK
                            this.objImageFile = ManagerImageFile(this,{[filepath filename]},...
                                this.Parent.objChannelConfig,[]);
                            
                            this.objContrastSettings = ManagerContrastSettings(this);
                            this.objUnitConvFac = ManagerUnitConvFac(this);
                            this.objLocSettings = ManagerLocSettings(this);
                            
                            this.objColormap = ManagerColormap(this);
                            this.objGrid = ManagerGrid(this);
                            this.objRoi = ManagerRoi(this);
                            this.objScalebar = ManagerScalebar(this);
                            this.objTimestamp = ManagerTimestamp(this);
                            this.objTextstamp = ManagerTextstamp(this);
                            
                            this.objDisplaySettings = ManagerDisplaySettings(this);
                            
                            %                         goto_image_frame(this.objImageFile,1)
                            %                         this.RawImagedata = read_raw_image(this.objImageFile);
                            %                         this.Imagedata = construct_rgb(this,this.RawImagedata);
                            
                            this.FieldOfView = ...
                                [0.5 0.5 ...
                                this.objImageFile.ChannelWidth+0.5 ...
                                this.objImageFile.ChannelHeight+0.5 ...
                                this.objImageFile.ChannelWidth ...
                                this.objImageFile.ChannelHeight];
                            
                            isOK = show_frame(this,1);
                            
                            initialize_image_visualization(this)
                            
                            delete([this.hImageContextmenu.Grid.GridMenu,...
                                this.hImageContextmenu.Contrast.ContrastMenu,...
                                this.hImageContextmenu.Colormap.ColormapMenu])
                            
                            set(this.hImageFig,...
                                'Renderer','OpenGL',...
                                'Visible','on')
                        else
                        end %if
                    case 'Load'
                        [filename, filepath,isOK] = uigetfile(...
                            {'*.mat', 'Matlab File (.mat)'},...
                            'Select Calibration Matrix', getappdata(0,'searchPath'));
                        if isOK
                            loaded = load([filepath filename]);
                            
                            this.Parent.objChannelConfig.CalMatrix = ...
                                struct(...
                                'ndims_in',[],...
                                'ndims_out',[],...
                                'forward_fcn',[],...
                                'inverse_fcn',[],...
                                'tdata',[]);
                            
                            if isfield(loaded,'tMat')
                                this.Parent.objChannelConfig.HasCalMatrix(2) = 1;
                                this.Parent.objChannelConfig.CalMatrix(1) = ...
                                    struct(...
                                    'ndims_in',[],...
                                    'ndims_out',[],...
                                    'forward_fcn',[],...
                                    'inverse_fcn',[],...
                                    'tdata',[]);
                                this.Parent.objChannelConfig.CalMatrix(2) = loaded.tMat;
                            else
                                for channelIdx = 2:numel(loaded.Tform)
                                    this.Parent.objChannelConfig.HasCalMatrix(channelIdx) = 1;
                                    this.Parent.objChannelConfig.CalMatrix(channelIdx) = ...
                                        struct(...
                                        'ndims_in',[],...
                                        'ndims_out',[],...
                                        'forward_fcn',[],...
                                        'inverse_fcn',[],...
                                        'tdata',[]);
                                    this.Parent.objChannelConfig.CalMatrix(channelIdx) = loaded.Tform(channelIdx);
                                end %for
                            end %if
                            initialize_project(this.Parent)
                        end %if
                    otherwise
                        initialize_project(this.Parent)
                end %switch
            end %if
        end %fun
        
        function display_frame(this)
            this.Imagedata = construct_rgb(this,this.RawImagedata);
            
            display_frame@SuperclassData(this)
        end %fun
        function construct_image_toolbar(this)
            this.hImageToolbar = uitoolbar(...
                'Parent',this.hImageFig);
            icon = getappdata(0,'icon');
            uipushtool(...
                'Parent', this.hImageToolbar,...
                'CData', icon.('Unit_Conversion'),...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objUnitConvFac))
            uipushtool(...
                'Parent', this.hImageToolbar,...
                'CData', icon.('Localize'),...
                'ClickedCallback', @(src,evnt)set_parameter(this.objLocSettings))
            
            uipushtool(...
                'Parent', this.hImageToolbar,...
                'CData', icon.('Manual_Calibration'),...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter_user_calibration(this))
            uipushtool(...
                'Parent', this.hImageToolbar,...
                'CData', icon.('Auto_Calibration'),...
                'Enable','off')
            
            uipushtool(...
                'Parent', this.hImageToolbar,...
                'CData', icon.('ROI'),...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objRoi),...
                'Enable','off')
        end %fun
        
        function isOK = get_frame(this,~,~)
            isOK = goto_image_frame(this.objImageFile,1);
            this.RawImagedata = read_raw_image(this.objImageFile);
        end %fun
        
        function set_numAlternatingChannels(this,src)
            this.NumAlternatingChannels = ...
                max(2,str2double(get(src,'String')));
            
            set(src,'String',this.NumAlternatingChannels)
        end %fun
        
        function multichanneldata = ...
                decompose_image_channels(this,imageData)
            multichanneldata = zeros(...
                this.objImageFile.ChannelHeight,...
                this.objImageFile.ChannelWidth,...
                this.objImageFile.objChannelConfig.NumParallelChannels);
            for channelIdx = 1:this.objImageFile.objChannelConfig.NumParallelChannels
                channelRegionPx = ...
                    this.objImageFile.ChannelRegionPx(channelIdx,:);
                multichanneldata(:,:,channelIdx) = imageData(...
                    channelRegionPx(2)+1:channelRegionPx(4),...
                    channelRegionPx(1)+1:channelRegionPx(3));
            end %for
        end %fun
        function rgb = construct_rgb(this,imageData)
            %preallocate
            rgb = zeros(...
                this.objImageFile.ChannelHeight,...
                this.objImageFile.ChannelWidth,3);
            for channelIdx = 1:this.objImageFile.objChannelConfig.NumParallelChannels
                channelRegionPx = ...
                    this.objImageFile.ChannelRegionPx(channelIdx,:);
                if channelIdx < 4
                    rgb(:,:,channelIdx) = ...
                        normalize_image_range(imageData(...
                        channelRegionPx(2)+1:channelRegionPx(4),...
                        channelRegionPx(1)+1:channelRegionPx(3)),...
                        prctile(reshape(imageData(...
                        channelRegionPx(2)+1:channelRegionPx(4),...
                        channelRegionPx(1)+1:channelRegionPx(3)),[],1),[50 99.9]));
                else
                    %add to all channels
                    rgb = 0.5*rgb + repmat(0.5*normalize_image_range(imageData(...
                        channelRegionPx(2)+1:channelRegionPx(4),...
                        channelRegionPx(1)+1:channelRegionPx(3)),...
                        prctile(reshape(imageData(...
                        channelRegionPx(2)+1:channelRegionPx(4),...
                        channelRegionPx(1)+1:channelRegionPx(3)),[],1),[50 99.9])),[1 1 3]);
                end %if
            end %for
        end %fun
        
        %%
        function estimate_rough_image_calibration(this)
            %preallocate
            this.RoughCorrImage = zeros(this.ChannelHeight,this.ChannelWidth,3);
            
            %copy reference image
            this.RoughCorrImage(:,:,1) = this.CroppedImage(:,:,1);
            for imageIdx = 2:this.objImageFile.objChannelConfig.NumParallelChannels
                %do an initial phase correlation to determine x-y-translation
                [dx , dy] = ExtPhaseCorrelation(...
                    this.CroppedImage(:,:,1), this.CroppedImage(:,:,imageIdx));
                %construct translation matrix
                this.TransMat(:,:,imageIdx) =  maketform('affine',[1 0 0; 0 1 0; dx dy 1]);
                this.RoughCorrImage(:,:,imageIdx) = imtransform(...
                    this.CroppedImage(:,:,imageIdx),this.TransMat(:,:,imageIdx),...
                    'XData', [1 this.ChannelWidth],'YData',[1 this.ChannelHeight]);
            end %fun
        end %fun
        
        function scroll_wheel_actions(this,evnt)
            maxSlider = get(this.hSlider,'Max');
            actValue = get(this.hSlider,'Value');
            newValue = max(-3,min(maxSlider,actValue-...
                evnt.VerticalScrollCount*0.1));
            if newValue ~= actValue
                set(this.hSlider,'Value',newValue)
                scroll_multicolor_configuration(this)
            end %if
        end %fun
        function scroll_multicolor_configuration(this)
            for panelIdx = 1:4
                panelPos = get(this.hPanel(panelIdx),'Position');
                panelPos(2) = this.InitialPanelPos(panelIdx)-get(this.hSlider,'Value');
                set(this.hPanel(panelIdx),'Position',panelPos)
            end %for
        end %fun
        
        function estimate_experimental_psf(this)
            %start particle detection
            settings = struct(...
                'mask', circshift(this.RawImagedata >= ...
                this.objLocSettings.MinInt,[-1 -1]),...
                'height',this.objImageFile.ImageHeight,....
                'width',this.objImageFile.ImageWidth,...
                'winY',this.objLocSettings.WinY,...
                'winX',this.objLocSettings.WinX,...
                'nDeflate',0,...
                'radiusPSF',this.objLocSettings.RadiusPSF,...
                'lowerBoundPSF',this.objLocSettings.LowerBoundPSF/100,...
                'upperBoundPSF',this.objLocSettings.UpperBoundPSF/100,...
                'errRate',this.objLocSettings.ErrRate,...
                'locModel','Fitted',...
                'maxIter',this.objLocSettings.MaxIter,...
                'termTol',this.objLocSettings.TermTol,...
                'maxPosRef',this.objLocSettings.MaxPosRef);
            
            [estimates, ~, ~, ~, ~] =...
                image_signal_detection(...
                this.RawImagedata,settings);
            
            this.objLocSettings.SrcContainer.EstRadii = estimates(:,8);
            plot_psf_radii(this.objLocSettings)
        end %fun
        function test_localization_settings(this)
            settings = struct(...
                'mask', circshift(this.RawImagedata >= ...
                this.objLocSettings.MinInt,[-1 -1]),...
                'height',this.objImageFile.ImageHeight,....
                'width',this.objImageFile.ImageWidth,...
                'winY',this.objLocSettings.WinY,...
                'winX',this.objLocSettings.WinX,...
                'nDeflate',min(this.objLocSettings.NumDeflat,10),...
                'radiusPSF',this.objLocSettings.RadiusPSF,...
                'lowerBoundPSF',this.objLocSettings.LowerBoundPSF/100,...
                'upperBoundPSF',this.objLocSettings.UpperBoundPSF/100,...
                'errRate',this.objLocSettings.ErrRate,...
                'locModel',this.objLocSettings.LocModel,...
                'maxIter',this.objLocSettings.MaxIter,...
                'termTol',this.objLocSettings.TermTol,...
                'maxPosRef',this.objLocSettings.MaxPosRef);
            
            [estimates, numLocParticles, ...
                deflationMap, binaryMap, loglikeMap] =...
                image_signal_detection(this.RawImagedata,settings);
            
            this.hTestLocFig = ...
                figure(...
                'Units','pixels',...
                'Position', set_figure_position(...
                this.objImageFile.ImageWidth/...
                this.objImageFile.ImageHeight,0.7,'center'),...
                'Color', this.FamilyColor,...
                'Name', sprintf(...
                'Localization Test: %.0f particles detected', numLocParticles),...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'IntegerHandle','off',...
                'Resize', 'off');
            
            hToolbar = uitoolbar(...
                'Parent',this.hTestLocFig);
            icon = getappdata(0,'icon');
            uitoggletool(...
                'Parent',hToolbar,...
                'Separator','on',...
                'CData', icon.('Zoom'),...
                'Tag','Zoom',...
                'ClickedCallback', @(src,evnt)set_zoom(src,'hFig',this.hTestLocFig))
            uitoggletool(...
                'Parent',hToolbar,...
                'CData', icon.('Pan'),...
                'Tag','Pan',...
                'ClickedCallback', @(src,evnt)set_pan(src,'hFig',this.hTestLocFig))
            
            %% ax1 -> raw + detections
            hTestLocAx(1) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0 0.5 0.5 0.5]);
            
            imshow(this.RawImagedata, ...
                this.objContrastSettings.IntLimits, ...
                'Parent', hTestLocAx(1));
            
            t = linspace(0, 2*pi, 20);
            u = [cos(t(:))'; sin(t(:))'];
            for pointIdx = 1:numLocParticles
                switch this.objLocSettings.LocModel
                    case {'Fixed','Fitted'}
                        w = estimates(pointIdx,8) * flipud(u);
                    case 'Astigmatic'
                        [eigVec, eigVal] = ...
                            eig([estimates(pointIdx,8)^2 estimates(pointIdx,10);...
                            estimates(pointIdx,10) estimates(pointIdx,9)^2]);
                        w = (eigVec * eigVal) * flipud(u);
                end %switch
                z = repmat([estimates(pointIdx,2)+1;...
                    estimates(pointIdx,3)+1], [1 20]) + w;
                
                patch(z(2,:),z(1,:),[1 0 0],...
                    'Parent', hTestLocAx(1),...
                    'FaceAlpha', 0.4)
            end %for
            
            %% ax2 -> deflated image
            hTestLocAx(2) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0.5 0.5 0.5 0.5]);
            
            imshow(deflationMap, ...
                this.objContrastSettings.IntLimits, ...
                'Parent', hTestLocAx(2));
            
            %% ax3 -> glrt map
            hTestLocAx(3) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0 0 0.5 0.5]);
            
            %compute colormap
            criticalErrRate = settings.errRate;
            criticalGLR = chi2inv(1-10^criticalErrRate,1);
            nearCriticalGLR =  chi2inv(1-10^(criticalErrRate+1),1);
            
            minGLR = min(loglikeMap(:));
            maxGLR = max(loglikeMap(:));
            criticalGLR = floor((criticalGLR-minGLR)/...
                (maxGLR-minGLR)*255);
            nearCriticalGLR = floor((nearCriticalGLR-minGLR)/...
                (maxGLR-minGLR)*255);
            cmap = [[linspace(0,1,nearCriticalGLR-1);...
                zeros(2,nearCriticalGLR-1)] ...
                repmat([1;1;0],1,criticalGLR-nearCriticalGLR) ...
                repmat([0;1;0],1,256-criticalGLR)]';
            
            loglikeMap = circshift(fix((loglikeMap-minGLR)/...
                (maxGLR-minGLR)*255),[1 1]);
            
            imshow(ind2rgb(loglikeMap,cmap), [0 255],...
                'Parent', hTestLocAx(3));
            
            %% ax4 roi mask + binary detections
            hTestLocAx(4) = ...
                axes(...
                'Parent', this.hTestLocFig,...
                'Units','normalized',...
                'Position', [0.5 0 0.5 0.5]);
            
            %normalize images
            binaryMap = circshift(settings.mask+binaryMap+1,[1 1]);
            cmap = [1 1 1; 0 0 0; 1 0 0];
            
            imshow(ind2rgb(binaryMap,cmap), [0 2],...
                'Parent', hTestLocAx(4));
            
            linkaxes(hTestLocAx,'xy')
        end %fun
        function single_localization(this)
            %close localization manager
            if ishandle(this.objLocSettings.hFig)
                delete(this.objLocSettings.hFig)
            end %if
            
            settings = struct(...
                'height',this.objImageFile.ChannelHeight,....
                'width',this.objImageFile.ChannelWidth,...
                'winY',this.objLocSettings.WinY,...
                'winX',this.objLocSettings.WinX,...
                'nDeflate',min(this.objLocSettings.NumDeflat,10),...
                'minInt',this.objLocSettings.MinInt,...
                'radiusPSF',this.objLocSettings.RadiusPSF,...
                'lowerBoundPSF',this.objLocSettings.LowerBoundPSF/100,...
                'upperBoundPSF',this.objLocSettings.UpperBoundPSF/100,...
                'errRate',this.objLocSettings.ErrRate,...
                'locModel',this.objLocSettings.LocModel,...
                'maxIter',this.objLocSettings.MaxIter,...
                'termTol',this.objLocSettings.TermTol,...
                'maxPosRef',this.objLocSettings.MaxPosRef);
            
            multiChanneldata = decompose_image_channels(...
                this,this.RawImagedata);
            
            %localize particles within each channel
            for channelIdx = 1:this.objImageFile.objChannelConfig.NumParallelChannels
                settings.mask = circshift(multiChanneldata(:,:,channelIdx) >= ...
                    this.objLocSettings.MinInt,[-1 -1]);
                
                [listLocalized, numLocParticles(channelIdx), ~, ~, ~] =...
                    image_signal_detection(multiChanneldata(:,:,channelIdx),settings);
                
                data(channelIdx) = struct(...
                    'Position_X', listLocalized(:,3)+1,...
                    'Position_Y', listLocalized(:,2)+1,...
                    'PSFradius', listLocalized(:,8));
            end %for
            this.NumParticles = numLocParticles;
            this.Data = data;
            initialize_calibration_points(this)
            
            waitfor(msgbox('Localization Done','modal'))
        end %fun
        
        function set_parameter_user_calibration(this)
            %check if there are localized points
            if ~isempty(this.Data)
                %check that there are at least 3 points per channel
                if all(this.NumParticles > 2)
                    if ~ishandle(this.hUserCalFig)
                        y0 = 70;
                        
                        scrSize = get(0, 'ScreenSize');
                        this.hUserCalFig = ...
                            figure(...
                            'Units','pixels',...
                            'Position', ...
                            [0.5*(scrSize(3)-225) 0.5*(scrSize(4)-y0) 225 y0],...
                            'Name', 'CALIBRATION MANAGER',...
                            'NumberTitle', 'off',...
                            'MenuBar', 'none',...
                            'ToolBar', 'none',...
                            'DockControls', 'off',...
                            'Color', this.FamilyColor,...
                            'IntegerHandle','off',...
                            'Resize','off',...
                            'DeleteFcn', @(src,evnt)close_manager(this));
                        
                        y = y0 -20;
                        
                        uicontrol(...
                            'Style', 'Text',...
                            'Units','pixels',...
                            'Position', [5 y+2 80 15],...
                            'FontSize', 8,...
                            'String', 'Mode:',...
                            'BackgroundColor', this.FamilyColor,...
                            'HorizontalAlignment', 'left');
                        
                        
                        uicontrol(...
                            'Style', 'popupmenu',...
                            'Units','pixels',...
                            'Position', [90 y+2 130 15],...
                            'FontSize', 7,...
                            'String', this.CalModels,...
                            'Value', find(strcmp(this.CalModel,this.CalModels)),...
                            'Callback', @(src,evnt)set_CalModel(this,src));
                        
                        y = y -35;
                        
                        this.hCalPreviewButton = ...
                            uicontrol(...
                            'Style', 'pushbutton',...
                            'Units','pixels',...
                            'Position', [25 y 75 25],...
                            'FontSize', 8,...
                            'String', 'Preview',...
                            'BackgroundColor', this.FamilyColor,...
                            'HorizontalAlignment', 'left',...
                            'Callback', @(src,evnt)preview_calibration(this));
                        
                        this.hCalAcceptButton = ...
                            uicontrol(...
                            'Style', 'pushbutton',...
                            'Units','pixels',...
                            'Position', [125 y 75 25],...
                            'FontSize', 8,...
                            'String', 'Accept',...
                            'BackgroundColor', this.FamilyColor,...
                            'HorizontalAlignment', 'left',...
                            'Callback', @(src,evnt)accept_calibration(this));
                        
                        set(get(this.hUserCalFig,'Children'),...
                            'Units', 'normalized',...
                            'FontUnits', 'normalized',...
                            'FontWeight','bold')
                        set(this.hUserCalFig,'Units','pixels',...
                            'Position', set_figure_position(225/y0, 0.2, 'center'))
                        
                        this.IsUserCalibration = 1;
                        if all(ishandle([this.hCalPnt{:}]))
                            set([this.hCalPnt{:}],'Visible','on')
                        end %if
                        if all(ishandle(this.hCalPairList))
                            set(this.hCalPairList,'Visible','on')
                        end %if
                    end %if
                else
                    waitfor(errordlg('Calibration requiers at least 3 Points per Channel','','modal'))
                end %if
            else
                waitfor(errordlg('No Localization Data found','','modal'))
            end %if
        end %fun
        function set_CalModel(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            this.CalModel = content{value};
        end %fun
        
        function initialize_calibration_points(this)
            %check if there are point patch & pairlines
            if ~isempty(this.hCalPnt)
                if all(ishandle([this.hCalPnt{:}]))
                    delete([this.hCalPnt{:}])
                end %if
                this.hCalPnt = {};
            end %if
            if ~isempty(this.hCalPairList)
                if all(ishandle(this.hCalPairList))
                    delete(this.hCalPairList)
                end %if
                this.hCalPairList = [];
            end %if
            
            cmap = [1 0 0; 0 1 0; 0 0 1; 0.7 0.7 0.7];
            t = linspace(0, 2*pi, 20);
            u = [cos(t(:)) sin(t(:))];
            this.hCalPnt = cell(1,this.objImageFile.objChannelConfig.NumParallelChannels);
            for channelIdx = 1:this.objImageFile.objChannelConfig.NumParallelChannels
                for pointIdx = 1:this.NumParticles(channelIdx)
                    switch this.objLocSettings.LocModel
                        case {'Fixed','Fitted'}
                            w = this.Data(channelIdx).PSFradius(pointIdx) * flipud(u);
                        case 'Astigmatic'
                            [eigVec, eigVal] = ...
                                eig([this.Data(channelIdx).PSFradius_X(pointIdx) ...
                                this.Data(channelIdx).PSFcov(pointIdx);...
                                this.Data(channelIdx).PSFcov(pointIdx) ...
                                this.Data(channelIdx).PSFradius_Y(pointIdx)].^2);
                            w = (eigVec * sqrt(eigVal)) * flipud(u);
                    end %switch
                    z = repmat([this.Data(channelIdx).Position_X(pointIdx) ...
                        this.Data(channelIdx).Position_Y(pointIdx)], [20 1]) + w;
                    
                    this.hCalPnt{channelIdx,1}(pointIdx) = ...
                        patch(z(:,1),z(:,2),cmap(channelIdx,:),...
                        'Parent', this.hImageAx,...
                        'FaceAlpha',0.4,...
                        'UserData',[channelIdx pointIdx],...
                        'ButtonDownFcn', @(src,evnt)select_point(this,src),...
                        'Visible','off');
                end %for
            end %for
            %silence reference points initialy
            set(this.hCalPnt{1},'Hittest','off')
        end %fun
        function select_point(this,src)
            %silence selected point
            set(src,'Hittest','off')
            
            pntIdx = get(src,'Userdata');
            
            %ckeck whether to initialize or finalize calibration pair
            if this.IsInitPnt
                this.IsInitPnt = 0;
                
                cmap = [1 0 0; 0 1 0; 0 0 1; 1 1 1];
                
                %initialize line that connect calibration points
                this.hCalPair = line(...
                    'Parent', this.hImageAx,...
                    'Tag', 'CalibrationPair',...
                    'XData',[1 1]*this.Data(pntIdx(1)).Position_X(pntIdx(2)),...
                    'YData',[1 1]*this.Data(pntIdx(1)).Position_Y(pntIdx(2)),...
                    'LineWidth', 2,...
                    'Color', [1 1 1],...
                    'Marker', '.',...
                    'MarkerSize', 10,...
                    'MarkerEdgeColor',[1 1 1],...
                    'MarkerFaceColor',cmap(pntIdx(1),:),...
                    'UserData',src,...
                    'Hittest','off');
                
                %start mouse motion listener
                set(this.hImageFig,...
                    'WindowButtonMotionFcn',@(src,evnt)update_pairline(this))
                
                %activate reference points
                set(this.hCalPnt{1},'Hittest','on')
                %silence the rest
                set([this.hCalPnt{2:end}],'Hittest','off')
            else
                this.IsInitPnt = 1;
                
                %stop mouse motion listener
                set(this.hImageFig,...
                    'WindowButtonMotionFcn','')
                
                xPos = get(this.hCalPair,'XData');
                yPos = get(this.hCalPair,'YData');
                hInitPnt = get(this.hCalPair,'UserData');
                set(this.hCalPair,...
                    'XData',[xPos(1) this.Data(pntIdx(1)).Position_X(pntIdx(2))],...
                    'YData',[yPos(1) this.Data(pntIdx(1)).Position_Y(pntIdx(2))],...
                    'UserData', [hInitPnt src],...
                    'ButtonDownFcn', @(src,evnt)select_pairline(this,src),...
                    'Hittest','on')
                
                %add to list
                this.hCalPairList = [this.hCalPairList; this.hCalPair];
                
                %silence reference points
                set(this.hCalPnt{1},'Hittest','off')
                %activate the rest
                set([this.hCalPnt{2:end}],'Hittest','on')
            end %if
        end %fun
        function update_pairline(this)
            mousePos = get(this.hImageAx,'CurrentPoint');
            
            xPos = get(this.hCalPair,'XData');
            yPos = get(this.hCalPair,'YData');
            set(this.hCalPair,...
                'XData',[xPos(1) mousePos(1,1)],...
                'YData',[yPos(1) mousePos(1,2)])
        end %fun
        function select_pairline(this,src)
        end %fun
        
        function preview_calibration(this)
            if this.IsUserCalibration && isempty(this.hCalPairList)
                waitfor(errordlg('No Point Pairs for Calibration found','','modal'))
                return
            else
                switch this.CalModel
                    case 'Affine'
                        minNumPnts = 3;
                    case 'Projective'
                        minNumPnts = 4;
                    case '2nd Order Polynomial'
                        minNumPnts = 6;
                    case '3rd Order Polynomial'
                        minNumPnts = 10;
                    case '4th Order Polynomial'
                        minNumPnts = 15;
                    case 'Piecewise Linear'
                        minNumPnts = 4;
                    case 'Local Weighted Mean'
                        minNumPnts = 6;
                end %switch
                %check if enough point pairs were selected
                hCalPairs = cell2mat(get(this.hCalPairList,'UserData'));
                calPntIdx = cell2mat(get(hCalPairs(:,1),'UserData'));
                numCalPnts = accumarray(calPntIdx(:,1),1);
                if any(numCalPnts(2:end) < minNumPnts)
                    waitfor(errordlg(sprintf(...
                        'You need at least %.0f Point Pairs for %s Calibration',...
                        minNumPnts,this.CalModel),'','modal'))
                    return
                end %if
            end %if
            
            generate_transformation_matrix(this)
            calibrate_image(this)
            
            %initialize live visualization window
            hPreviewFig = ...
                figure(...
                'Units','pixels',...
                'Position', set_figure_position(...
                this.objImageFile.ChannelWidth/...
                this.objImageFile.ChannelHeight,0.7,'center'),...
                'Name', 'CALIBRATION PREVIEW',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'IntegerHandle','off',...
                'Resize', 'off');
            
            hToolbar = uitoolbar(...
                'Parent',hPreviewFig);
            icon = getappdata(0,'icon');
            uitoggletool(...
                'Parent',hToolbar,...
                'Separator','on',...
                'CData', icon.('Zoom'),...
                'Tag','Zoom',...
                'ClickedCallback', @(src,evnt)set_zoom(src))
            uitoggletool(...
                'Parent',hToolbar,...
                'CData', icon.('Pan'),...
                'Tag','Pan',...
                'ClickedCallback', @(src,evnt)set_pan(src))
            
            hPreviewAx = ...
                axes(...
                'Units','normalized',...
                'Position', [0 0 1 1]);
            
            hPreviewImage = imshow(this.CalImagedata, [], ...
                'Parent', hPreviewAx);
            
            hold on
            
            cmap = [1 0 0; 0 1 0; 0 0 1; 1 1 1];
            for channelIdx = 2:this.objImageFile.objChannelConfig.NumParallelChannels
                [X Y] = ndgrid(1:10:this.objImageFile.ChannelWidth,1:10:this.objImageFile.ChannelHeight);
                [calX calY] = tforminv(this.objImageFile.objChannelConfig.CalMatrix(channelIdx),X(:),Y(:));
                
                hCalField(channelIdx) = quiver(...
                    X(:),Y(:),(X(:)-calX),(Y(:)-calY),...
                    'AutoScale','off',...
                    'AutoScaleFactor',0.3,...
                    'Marker','.',...
                    'ShowArrowHead','off',...
                    'Color', cmap(channelIdx,:),...
                    'LineWidth', 2);
            end %for
        end %fun
        function accept_calibration(this)
            generate_transformation_matrix(this)
            
            answer = questdlg('Save Calibration?','','Yes','No','Yes');
            switch answer
                case 'Yes'
                    [filename, filepath,isOK] = uiputfile(...
                        {'*.mat', 'Matlab File'},...
                        'Select Calibration Matrix', getappdata(0,'searchPath'));
                    if isOK
                        for channelIdx = 2:this.objImageFile.objChannelConfig.NumParallelChannels
                            Tform(channelIdx) = ...
                                this.objImageFile.objChannelConfig.CalMatrix(channelIdx);
                        end %for
                        save(fullfile(filepath,filename),'Tform')
                    end %if
                otherwise
            end %switch
            
            delete(this.hImageFig)
            delete(this.hUserCalFig)
            
            this.Parent.objChannelConfig.HasCalMatrix = ...
                this.objImageFile.objChannelConfig.HasCalMatrix;
            this.Parent.objChannelConfig.CalMatrix = ...
                this.objImageFile.objChannelConfig.CalMatrix;
            initialize_project(this.Parent)
        end %fun
        
        function generate_transformation_matrix(this)
            this.objImageFile.objChannelConfig.HasCalMatrix = ...
                zeros(this.objImageFile.objChannelConfig.NumParallelChannels,1);
            this.objImageFile.objChannelConfig.CalMatrix = struct(...
                'ndims_in',[],...
                'ndims_out',[],...
                'forward_fcn',[],...
                'inverse_fcn',[],...
                'tdata',[]);
            
            %check mode of calibration
            if this.IsUserCalibration
                %check if calibration pairs exist
                hCalPairs = cell2mat(get(this.hCalPairList,'UserData'));
                refPntIdx = cell2mat(get(hCalPairs(:,2),'UserData'));
                calPntIdx = cell2mat(get(hCalPairs(:,1),'UserData'));
                
                for channelIdx = 2:this.objImageFile.objChannelConfig.NumParallelChannels
                    this.objImageFile.objChannelConfig.HasCalMatrix(channelIdx) = 1;
                    
                    good = calPntIdx(:,1) == channelIdx;
                    refCoords = ...
                        [this.Data(1).Position_X(refPntIdx(good,2))+1 ...
                        this.Data(1).Position_Y(refPntIdx(good,2))+1];
                    calCoords = ...
                        [this.Data(channelIdx).Position_X(calPntIdx(good,2))+1 ...
                        this.Data(channelIdx).Position_Y(calPntIdx(good,2))+1];
                    
                    switch this.CalModel
                        case 'Affine'
                            this.objImageFile.objChannelConfig.CalMatrix(channelIdx) = ...
                                cp2tform(calCoords, refCoords, 'affine');
                        case 'Projective'
                            this.objImageFile.objChannelConfig.CalMatrix(channelIdx) = ...
                                cp2tform(calCoords, refCoords, 'projective');
                        case '2nd Order Polynomial'
                            this.objImageFile.objChannelConfig.CalMatrix(channelIdx) = ...
                                cp2tform(calCoords, refCoords, 'polynomial', 2);
                        case '3rd Order Polynomial'
                            this.objImageFile.objChannelConfig.CalMatrix(channelIdx) = ...
                                cp2tform(calCoords, refCoords, 'polynomial', 3);
                        case '4th Order Polynomial'
                            this.objImageFile.objChannelConfig.CalMatrix(channelIdx) = ...
                                cp2tform(calCoords, refCoords, 'polynomial', 4);
                        case 'Piecewise Linear'
                            this.objImageFile.objChannelConfig.CalMatrix(channelIdx) = ...
                                cp2tform(calCoords, refCoords, 'piecewise linear');
                        case 'Local Weighted Mean'
                            this.objImageFile.objChannelConfig.CalMatrix(channelIdx) = ...
                                cp2tform(calCoords, refCoords, 'lwm');
                    end %switch
                end %for
            end %if
        end %fun
        function calibrate_image(this)
            this.CalImagedata = zeros(...
                this.objImageFile.ChannelHeight,...
                this.objImageFile.ChannelWidth,3);
            
            multiChanneldata = decompose_image_channels(this,this.RawImagedata);
            
            %ref channel
            this.CalImagedata(:,:,1) = normalize_image_range(...
                multiChanneldata(:,:,1),prctile(reshape(multiChanneldata(:,:,1),[],1),[50 99.9]));
            
            for channelIdx = 2:this.objImageFile.objChannelConfig.NumParallelChannels
                if channelIdx < 4
                    this.CalImagedata(:,:,channelIdx) = ...
                        imtransform(normalize_image_range(...
                        multiChanneldata(:,:,channelIdx),prctile(reshape(multiChanneldata(:,:,1),[],1),[50 99.9])),...
                        this.objImageFile.objChannelConfig.CalMatrix(channelIdx),'bilinear',...
                        'YData',[1 this.objImageFile.ChannelHeight],...
                        'XData', [1 this.objImageFile.ChannelWidth],...
                        'Fill', 0);
                else
                    this.CalImagedata = ...
                        0.5*this.CalImagedata + ...
                        repmat(imtransform(0.5*normalize_image_range(...
                        multiChanneldata(:,:,channelIdx),prctile(reshape(multiChanneldata(:,:,1),[],1),[50 99.9])),...
                        this.objImageFile.objChannelConfig.CalMatrix(channelIdx),'bilinear',...
                        'YData',[1 this.objImageFile.ChannelHeight],...
                        'XData', [1 this.objImageFile.ChannelWidth],...
                        'Fill', 0),[1 1 3]);
                end %if
            end %for
        end %fun
        
        function close_manager(this)
            this.IsUserCalibration = 0;
            
            if all(ishandle([this.hCalPnt{:}]))
                set([this.hCalPnt{:}],'Visible','off')
            end %if
            if all(ishandle(this.hCalPairList))
                set(this.hCalPairList,'Visible','off')
            end %if
        end %fun
        
        %%
        function close_object(this)
            close_object@SuperclassData(this)
            
            if ishandle(this.hImageFig)
                delete(this.hImageFig)
            end %if
            if ishandle(this.hMulticolorFig)
                delete(this.hMulticolorFig)
            end %if
            if ishandle(this.hTestLocFig)
                delete(this.hTestLocFig)
            end %if
            if ishandle(this.hUserCalFig)
                delete(this.hUserCalFig)
            end %if
        end %fun
        function delete_object(this)
            delete_object@SuperclassData(this)
            
            if ishandle(this.hMulticolorFig)
                delete(this.hMulticolorFig)
            end %if
            if ishandle(this.hTestLocFig)
                delete(this.hTestLocFig)
            end %if
            if ishandle(this.hUserCalFig)
                delete(this.hUserCalFig)
            end %if
            
            delete(this)
        end %fun
    end %methods
    
%     methods (Static)
%         function loadObj = loadobj(this)
%             loadObj = loadobj@SuperclassData(this);
%         end %fun
%     end %methods
end %classdef