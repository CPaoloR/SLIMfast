classdef ClassTrajectory < SuperclassData
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties
        DetectionMap
        
        IsVisible
        
        VisMode = 'List';
        SubsetType = 'Complete Set';
        
        NumIndividual
        objIndividual = ClassSingleTrajectory.empty %objIndividualList
        
        MapColor
        MapColorValue
        DrawSingleTrajColor = true;
    end %properties
    properties (Hidden, Dependent)
        NumActive
        ActiveIdx
    end %properties
    properties (Hidden, Transient)
        hInfoFig
        
        hListFig = nan;
        hListAx
        hListToolbar
        hListContextmenu
        hListTitle
        hListLine
        hListSlider
        
        hDetailFig = nan;
        hDetailAx
        hDetailToolbar
        hDetailContextmenu
        IndividualSelectIdx
        
        hLine
        LineTime
        
        Header = struct(...
            'Particle_ID', 'Unique Emitter Identifier',...
            'Particle_ID_Hex', 'Unique Emitter Identifier Hexadecimal',...
            'Time', 'Time of Emitter Localization [frame]',...
            'Position_X', 'X-Coordinate of Emitter Center [px]',...
            'Position_Y', 'Y-Coordinate of Emitter Center [px]',...
            'Signalpower', 'Emitters'' Signalpower [counts^2]',...
            'Background', 'Average Backgroundlevel around Emitter [counts]',...
            'Noisepower', 'Emitters'' Noisepower [counts^2]',...
            'Photons', 'Emitters'' Signal [photons]',...
            'PSFradius', 'Std of Emitters'' PSF [px]',...
            'Precision', 'Emitter Localization Precision [nm]',...
            'SNR', 'Emitters'' Signal to Noise Ratio [db]',...
            'NN', 'Emitter Distance to next nearest Emitter [µm]',...
            'PSFradius_Y', 'X-Std of Emitters'' PSF [px]',...
            'PSFradius_X', 'Y-Std of Emitters'' PSF [px]',...
            'PSFcov', 'Cov of Emitters'' PSF [px^2]',...
            'Traj_ID', 'Unique Trajectory Identifier',...
            'Traj_ID_Hex', 'Unique Trajectory Identifier Hexadecimal');
        
        %% Tooltips
        ToolTips = struct(...
            'Toolbar', struct(...
            'SaveImage', sprintf('Save Image as TIFF'),...
            'SaveMovie', sprintf('Save Image Sequence as AVI'),...
            'SaveFigure', sprintf('Save Image to various Formats'),...
            'SaveData', sprintf('Save Data as ASCII'),...
            'SwitchListMap', sprintf('Switch to Map View'),...
            'SwitchMapList', sprintf('Switch to List View'),...
            'DisplayManager', sprintf('Adjust Trajectory Display Settings'),...
            'CloneData', sprintf('Duplicate actual Data'),...
            'Trans2Image', sprintf('Generate Image from Data'),...
            'TrajLifeDist', sprintf('Show Trajectory Lifetime Distribution'),...
            'JumpDist', sprintf('Show Stepsize Distribution'),...
            'DiffCoeffDist', sprintf('Show Diffusion Coefficient Distribution'),...
            'ConfManager', sprintf('Find Confinement Zones within Data'),...
            'TrajSelect', sprintf('Select Trajectory within Map'),...
            'GotoPrev', sprintf('Show previous Trajectory'),...
            'GotoNext', sprintf('Show next Trajectory'),...
            'MsdCurveEst', sprintf('Adjust Diffusion Coefficient Fit Settings'),...
            'RoiManager', sprintf('Create/Load Region of Interest')))
    end %properties
    properties (Hidden, SetObservable)
        MapColorType = 'Random'; % -> TrajColorCode
    end
    
    methods
        %constructor
        function this = ClassTrajectory
            this = this@SuperclassData;
        end %fun
        
        function show_data_information(this)
            %check if info already open
            if ishandle(this.hInfoFig)
                waitfor(msgbox('INFORMATION TABLE already open','INFO','help','modal'))
                figure(this.hInfoFig)
                return
            end %if
            
            y0 = 100;
            
            scrSize = get(0, 'ScreenSize');
            this.hInfoFig = ...
                figure(...
                'Units','pixels',...
                'Position', ...
                [0.5*(scrSize(3)-100) 0.5*(scrSize(4)-y0) 100 y0],...
                'Name', 'INFORMATION TABLE',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'DockControls', 'off',...
                'Color', this.FamilyColor,...
                'IntegerHandle','off',...
                'Resize','off',...
                'Visible','off');
            
            hTable = ...
                uitable(...
                'Units','normalized',...
                'Position',[0 0 1 1],...
                'ColumnName', {'Parameter','Value'},...
                'ColumnFormat', {'char','char'},...
                'ColumnEditable', [false false],...
                'ColumnWidth',{400 150},...
                'RowName',[],...
                'RowStriping','on',...
                'FontSize', 18);
            
            paramName = [...
                {'Total # Trajectories'},...
                {'Tracking Range'},...
                {'Local Density Window [frames]'},...
                {'Use Initial Local Density'},...
                {'Initial Search Limit [px]'},...
                {'Min. Compound Length [frames]'},...
                {'Use Assemby Local Density'},...
                {'Assemby Search Limit [px]'},...
                {'Max. Gap Closure [frames]'},...
                {'Gap Length Penalty'},...
                {'Fast/Slow Phase Scaling'},...
                {'Phase Transition Point [frames]'},...
                {'Use Merge and Split'},...
                {'Intensity Ratio'}];
            paramValue = [...
                cellstr(num2str(this.NumIndividual)),...
                cellstr([num2str(this.objTrackSettings.TrackStart) ...
                '-' num2str(this.objTrackSettings.TrackEnd)]),...
                cellstr(num2str(this.objTrackSettings.LocDensWin)),...
                cellstr(num2str(this.objTrackSettings.InitUseLocDens)),...
                cellstr([num2str(this.objTrackSettings.InitMinSearchRad) ...
                '/' num2str(this.objTrackSettings.InitMaxSearchRad)]),...
                cellstr(num2str(this.objTrackSettings.MinCompoundLength)),...
                cellstr(num2str(this.objTrackSettings.UseLocDens)),...
                cellstr([num2str(this.objTrackSettings.MinSearchRad) ...
                '/' num2str(this.objTrackSettings.MaxSearchRad)]),...
                cellstr(num2str(this.objTrackSettings.MaxGap)),...
                cellstr(num2str(this.objTrackSettings.GapPenalty)),...
                cellstr([num2str(this.objTrackSettings.FreeScaleFast) ...
                '/' num2str(this.objTrackSettings.FreeScaleSlow)]),...
                cellstr(num2str(this.objTrackSettings.FreeScaleTrans)),...
                cellstr(num2str(this.objTrackSettings.UseMergeSplit)),...
                cellstr([num2str(this.objTrackSettings.MinAmpRatio) ...
                '/' num2str(this.objTrackSettings.MaxAmpRatio)])];
            data = [paramName; paramValue];
            set(hTable,'Data',data')
            
            set(hTable,'Units','pixels')
            tablePos = get(hTable,'Extent')+[0 0 0 20];
            figPos = [0.5*(scrSize(3)-tablePos(3)) ...
                0.5*(scrSize(4)-tablePos(4)) ...
                tablePos(3) tablePos(4)];
            tablePos = [0 0 figPos(3:4)];
            if tablePos(3) > scrSize(3)
                figPos(1) = 50;
                figPos(3) = scrSize(3)-100;
                tablePos(3) = figPos(3);
            end %if
            if tablePos(4) > scrSize(4)
                figPos(2) = 50;
                tablePos(3) = figPos(3)+10;
                
                figPos(4) = scrSize(4)-100;
                tablePos(4) = figPos(4);
            end %if
            setpixelposition(this.hInfoFig,figPos)
            setpixelposition(hTable,tablePos,1)
            set(hTable,'Units','normalized')
            set(this.hInfoFig,'Visible','on')
        end %fun
        
        %% LIST
        function initialize_list_visualization(this)
            if ishandle(this.hImageFig)
                delete(this.hImageFig)
            end %if
            this.VisMode = 'List';
            
            scrSize = get(0, 'ScreenSize');
            
            this.hListFig =...
                figure(...
                'Units', 'pixels',...
                'Position', [0.5*(scrSize(3)-650) ...
                0.5*(scrSize(4)-500) 650 500],...
                'MenuBar', 'none',...
                'Toolbar', 'none',...
                'DockControls', 'off',...
                'Resize', 'off',...
                'NumberTitle', 'off',...
                'NextPlot', 'add',...
                'Color', this.FamilyColor,...
                'Name', this.Name,...
                'WindowScrollWheelFcn', @(src,evnt)scroll_wheel_actions(this,evnt),...
                'IntegerHandle','off',...
                'CloseRequestFcn',@(src,evnt)close_object(this));
            
            %construct associated toolbar
            construct_list_toolbar(this)
            
            %construct associated context menu
            this.hListContextmenu = uicontextmenu(...
                'Parent',this.hListFig);
            uimenu(this.hListContextmenu,...
                'Label', 'Activate All',...
                'Callback',@(src,evnt)change_ensemble_state(this,src))
            uimenu(this.hListContextmenu,...
                'Label', 'Deactivate All',...
                'Callback',@(src,evnt)change_ensemble_state(this,src))
            set(this.hListFig, ...
                'UIContextmenu', this.hListContextmenu)
            
            numActive = this.NumActive;
            good = 1:20 <= numActive;
            
            this.hListAx = [];
            pos = [repmat((0:0.2:0.8)-0.01,1,4);...
                reshape(repmat((0.8:-0.25:0)-0.02,5,1),1,[])];
            
            activeIdx = find(this.ActiveIdx);
            for idx = 1:20
                this.hListAx(idx) =...
                    axes(...
                    'Parent', this.hListFig,...
                    'Units', 'normalized',...
                    'Position', [0 0 1 1],...
                    'OuterPosition', [pos(1,idx) pos(2,idx) 0.2 0.2],...
                    'Color', this.FamilyColor,...
                    'XColor',this.FamilyColor,...
                    'YColor',this.FamilyColor,...
                    'DataAspectRatio', [1 1 1],...
                    'XTickLabel', '',...
                    'YTickLabel', '');
                
                if good(idx)
                    trajIdx = activeIdx(idx);
                    
                    set(this.hListAx(idx),...
                        'ButtonDownFcn', @(src,evnt)initialize_individual_details(...
                        this,this.objIndividual(trajIdx)))
                    
                    this.hListTitle(idx) = ...
                        title(this.hListAx(idx),...
                        ['ID: ' sprintf('%bx',this.objIndividual(trajIdx).Identifier)],...
                        'Fontsize', 8,...
                        'ButtonDownFcn', @(src,evnt)change_state(...
                        this,src,this.objIndividual(trajIdx)));
                    switch this.objIndividual(trajIdx).IsActive
                        case 1
                            set(this.hListTitle(idx),...
                                'BackgroundColor',[0.5 1 0.5])
                        case 0
                            set(this.hListTitle(idx),...
                                'BackgroundColor',[1 0.5 0.5])
                    end %switch
                    
                    this.hListLine(idx,1) =...
                        line('Parent', this.hListAx(idx),...
                        'XData',this.objIndividual(trajIdx).Data.Position_X,...
                        'YData',this.objIndividual(trajIdx).Data.Position_Y,...
                        'Color', [0 0 0],...
                        'ButtonDownFcn', ...
                        @(src,evnt)initialize_individual_details(...
                        this,this.objIndividual(trajIdx)));
                    
                    minx = this.objIndividual(trajIdx).MinData.Position_X;
                    maxx = this.objIndividual(trajIdx).MaxData.Position_X;
                    miny = this.objIndividual(trajIdx).MinData.Position_Y;
                    maxy = this.objIndividual(trajIdx).MaxData.Position_Y;
                    
                    this.hListLine(idx,2) =...
                        line('Parent', this.hListAx(idx),...
                        'XData',[minx,minx+1],...
                        'YData',[miny,miny]-(maxy-miny)/10,...
                        'Color', [1 0 0],...
                        'LineWidth', 4,...
                        'Hittest', 'off');
                    axis(this.hListAx(idx),...
                        [minx maxx ...
                        miny-(maxy-miny)/5 maxy], 'ij')
                else
                    this.hListTitle(idx) = ...
                        title(this.hListAx(idx),...
                        '','Fontsize', 8);
                    
                    this.hListLine(idx,1) =...
                        line(...
                        'Parent',this.hListAx(idx),...
                        'XData',[0 1],...
                        'YData',[0 1],...
                        'Marker', '.',...
                        'Color', [0 0 0],...
                        'LineStyle', 'none',...
                        'Hittest', 'off',...
                        'Visible','off');
                    
                    this.hListLine(idx,2) =...
                        line(...
                        'Parent',this.hListAx(idx),...
                        'XData',[0 1],...
                        'YData',[0 1],...
                        'Color', [1 0 0],...
                        'LineWidth', 4,...
                        'Visible','off');
                end %if
            end %for
            
            this.hListSlider = ...
                uicontrol(...
                'Parent', this.hListFig,...
                'Style', 'slider',...
                'Tag', 'trajectoryListSlider',...
                'Units', 'normalized',...
                'Position', [0.98 0 0.02 1],...
                'Min', 1,...
                'Max', 2,...
                'Callback', @(src,evnt)update_list_visualization(this));
            if numActive > 20
                set(this.hListSlider,...
                    'Min', 1,...
                    'Max', ceil(numActive/20),...
                    'Value', ceil(numActive/20),....
                    'SliderStep', [min(1/(ceil(numActive/20)-1),1)...
                    min(5/(ceil(numActive/20)-1),1)],...
                    'Visible','on',...
                    'Enable','on')
            else
                set(this.hListSlider,...
                    'Value', 1,...
                    'Visible','off',...
                    'Enable','off')
            end %if
            
            if isempty(this.ExportBin)
                fields = fieldnames(this.objIndividual(1).Data);
                dataIndividual = [this.objIndividual.Data];
                data = this.objIndividual(1).Data;
                for fieldIdx = 1:numel(fields)
                    data.(fields{fieldIdx}) = vertcat(dataIndividual.(fields{fieldIdx}));
                end %for
                this.ExportBin = struct(...
                    'Header', this.Header,...
                    'Data', data);
            end %if
        end %fun
        function construct_list_toolbar(this)
            hToolbar = uitoolbar('Parent',this.hListFig);
            icon = getappdata(0,'icon');
            hFileInfo = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('File_Information'),...
                'ClickedCallback', @(src,evnt)show_data_information(this));
            setMode = {'Complete Set','Active Subset','Inactive Subset'};
            hCloneData = ...
                uisplittool(...
                'Parent', hToolbar,...
                'Tag', setMode{1},...
                'CData', icon.('Generate_Subset'),...
                'TooltipString', this.ToolTips.Toolbar.CloneData,...
                'ClickedCallback', @(src,evnt)generate_filtered_data_set(this));
            pause(0.05)
            jBin = get(hCloneData,'JavaContainer');
            pause(0.05)
            jMenu = get(jBin,'MenuComponent');
            for mode = 1:numel(setMode)
                jOption = jMenu.add(setMode{mode});
                set(jOption, 'ActionPerformedCallback', ...
                    @(src,evnt)set_individual_subset(this));
            end %for
            hTrans2Image = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Generate_Image'),...
                'TooltipString', this.ToolTips.Toolbar.Trans2Image,...
                'ClickedCallback', @(src,evnt)transform_to_image(this));
            hSaveData = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Save_Data'),...
                'Separator','on',...
                'TooltipString', this.ToolTips.Toolbar.SaveData,...
                'ClickedCallback', @(src,evnt)write_variable_to_ascii(this));
            hSwitchListMap = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Trajectory_Map'),...
                'TooltipString', this.ToolTips.Toolbar.SwitchListMap,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)initialize_image_visualization(this));
            hTrajLifeDist = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Trajectory_Lifetime_Distribution'),...
                'TooltipString', this.ToolTips.Toolbar.TrajLifeDist,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)ClassHistogram(this,...
                'Trajectory Lifetime Distribution',this));
            hJumpDist = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Jumpsize_Distribution'),...
                'TooltipString', this.ToolTips.Toolbar.JumpDist,...
                'ClickedCallback', @(src,evnt)initialize_jumpsize_series(this.objJumpSeries,this));
            hDiffCoeffDist = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Diffusion_Coefficient_Distribution'),...
                'TooltipString', this.ToolTips.Toolbar.DiffCoeffDist,...
                'ClickedCallback', @(src,evnt)set_parameter(this.objDiffCoeffFit,[]));
            hConfMan = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Trajectory_Confinement_Analysis'),...
                'TooltipString', this.ToolTips.Toolbar.ConfManager,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objConfManager));
            
            this.hListToolbar = struct(...
                'Toolbar', hToolbar,...
                'FileInfo', hFileInfo,...
                'SaveData', hSaveData,...
                'SwitchListMap', hSwitchListMap,...
                'Trans2Image', hTrans2Image,...
                'CloneData', hCloneData,...
                'TrajLifeDist', hTrajLifeDist,...
                'JumpDist', hJumpDist,...
                'DiffCoeffDist', hDiffCoeffDist,...
                'ConfManager', hConfMan);
        end %fun
        function update_list_visualization(this)
            %check that set has at least one element
            numActive = this.NumActive;
            if numActive == 0
                set(cell2mat(allchild(this.hListAx)),...
                    'Visible', 'off')
                set(this.hListAx,'HitTest','off')
            else
                page = (ceil(numActive/20)-...
                    round(get(this.hListSlider,'Value')))*20;
                idxs = 1:20;
                good = idxs+page <= numActive;
                set(cell2mat(allchild(this.hListAx)),...
                    'Visible', 'off')
                set(this.hListAx(~good),'HitTest','off')
                
                if sum(good) == 1
                    set(allchild(this.hListAx(good)),...
                        'Visible', 'on',...
                        'HitTest','on')
                else
                    set(cell2mat(allchild(this.hListAx(good))),...
                        'Visible', 'on',...
                        'HitTest','on')
                end %if
                
                activeIdx = find(this.ActiveIdx);
                for idx = idxs(good)
                    trajIdx = activeIdx(idx+page);
                    
                    set(this.hListAx(idx), 'ButtonDownFcn', ...
                        @(src,evnt)initialize_individual_details(this,...
                        this.objIndividual(trajIdx)));
                    
                    set(this.hListTitle(idx), 'String',...
                        ['ID: ' sprintf('%bx',this.objIndividual(trajIdx).Identifier)],...
                        'ButtonDownFcn', @(src,evnt)change_state(...
                        this,src,this.objIndividual(trajIdx)))
                    switch this.objIndividual(trajIdx).IsActive
                        case 1
                            set(this.hListTitle(idx),...
                                'BackgroundColor',[0.5 1 0.5])
                        case 0
                            set(this.hListTitle(idx),...
                                'BackgroundColor',[1 0.5 0.5])
                    end %switch
                    
                    set(this.hListLine(idx,1),...
                        'XData', this.objIndividual(trajIdx).Data.Position_X,...
                        'YData',this.objIndividual(trajIdx).Data.Position_Y,...
                        'Linestyle','-',...
                        'Marker','none',...
                        'ButtonDownFcn', ...
                        @(src,evnt)initialize_individual_details(this,...
                        this.objIndividual(trajIdx)))
                    
                    minx = this.objIndividual(trajIdx).MinData.Position_X;
                    maxx = this.objIndividual(trajIdx).MaxData.Position_X;
                    miny = this.objIndividual(trajIdx).MinData.Position_Y;
                    maxy = this.objIndividual(trajIdx).MaxData.Position_Y;
                    
                    set(this.hListLine(idx,2),...
                        'XData', [minx,minx+1],...
                        'YData',[miny,miny]-(maxy-miny)/10)
                    
                    axis(this.hListAx(idx), [minx maxx ...
                        miny-(maxy-miny)/5 maxy], 'ij')
                end %for
            end %if
        end %fun
        function change_state(this,src,objIndividual)
            if objIndividual.IsActive
                objIndividual.IsActive = 0;
                set(src,'BackgroundColor',[1 0 0])
            else
                objIndividual.IsActive = 1;
                set(src,'BackgroundColor',[0 1 0])
            end %if
            switch this.SubsetType
                case {'Active Subset' 'Inactive Subset'}
                    %adjust slider
                    numActive = this.NumActive;
                    if numActive > 20
                        set(this.hListSlider,...
                            'Min', 1,...
                            'Max', ceil(numActive/20),...
                            'Value', min(ceil(numActive/20),...
                            get(this.hListSlider,'Value')),....
                            'SliderStep', [min(1/(ceil(numActive/20)-1),1)...
                            min(5/(ceil(numActive/20)-1),1)],...
                            'Visible','on',...
                            'Enable','on')
                    else
                        set(this.hListSlider,...
                            'Value', 1,...
                            'Visible','off',...
                            'Enable','off')
                    end %if
                    
                    update_list_visualization(this)
            end %switch
        end %fun
        function scroll_wheel_actions(this,evnt)
            maxSlider = get(this.hListSlider,'Max');
            actValue = get(this.hListSlider,'Value');
            newValue = max(1,min(maxSlider,actValue-...
                evnt.VerticalScrollCount));
            if newValue ~= actValue
                set(this.hListSlider,'Value',newValue)
                update_list_visualization(this)
            end %if
        end %fun
        
        %% IMAGE
        function display_frame(this)
            display_frame@SuperclassData(this)
        end %fun
        function initialize_image_visualization(this)
            %check that set has at least one element
            if this.NumActive < 1
                waitfor(errordlg('No active Trajectory found','','modal'))
                return
            end %if
            
            if ishandle(this.hListFig)
                delete(this.hListFig)
            end %if
            this.VisMode = 'Map';
            
            initialize_image_visualization@SuperclassData(this)
            delete([this.hImageContextmenu.Grid.Delaunay ...
                this.hImageContextmenu.Grid.Voronoi])
            
            construct_entities(this)
            adjust_traj_exp(this,this.ActExp,this.FieldOfView(1:2))
            
            if isempty(this.ExportBin)
                fields = fieldnames(this.objIndividual(1).Data);
                dataIndividual = [this.objIndividual.Data];
                data = this.objIndividual(1).Data;
                for fieldIdx = 1:numel(fields)
                    data.(fields{fieldIdx}) = vertcat(dataIndividual.(fields{fieldIdx}));
                end %for
                this.ExportBin = struct(...
                    'Header', this.Header,...
                    'Data', data);
            end %if
            
            set(this.hImageFig,'Visible','on')
        end %fun
        function construct_image_toolbar(this)
            hToolbar = uitoolbar('Parent',this.hImageFig);
            icon = getappdata(0,'icon');
            hFileInfo = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('File_Information'),...
                'ClickedCallback', @(src,evnt)show_data_information(this));
            setMode = {'Complete Set','Active Subset','Inactive Subset'};
            hCloneData = ...
                uisplittool(...
                'Parent', hToolbar,...
                'Tag', setMode{1},...
                'CData', icon.('Generate_Subset'),...
                'TooltipString', this.ToolTips.Toolbar.CloneData,...
                'ClickedCallback', @(src,evnt)generate_filtered_data_set(this));
            pause(0.05)
            jBin = get(hCloneData,'JavaContainer');
            pause(0.05)
            jMenu = get(jBin,'MenuComponent');
            for mode = 1:numel(setMode)
                jOption = jMenu.add(setMode{mode});
                set(jOption, 'ActionPerformedCallback', ...
                    @(src,evnt)set_individual_subset(this));
            end %for
            hTrans2Image = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Generate_Image'),...
                'TooltipString', this.ToolTips.Toolbar.Trans2Image,...
                'ClickedCallback', @(src,evnt)transform_to_image(this));
            hDispMan = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Visualization_2D'),...
                'TooltipString', this.ToolTips.Toolbar.DisplayManager,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objDisplaySettings));
            hSaveImage = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Save_Image'),...
                'Separator','on',...
                'TooltipString', this.ToolTips.Toolbar.SaveImage,...
                'ClickedCallback', @(src,evnt)save_image(this));
            hSaveMovie = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Save_Movie'),...
                'TooltipString', this.ToolTips.Toolbar.SaveMovie,...
                'ClickedCallback', @(src,evnt)save_movie(this));
            hSaveFig = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Save_Figure'),...
                'TooltipString', this.ToolTips.Toolbar.SaveFigure,...
                'ClickedCallback', @(src,evnt)print_image(this.hImageAx,...
                this.objColormap.Colormapping,this.objContrastSettings.IntLimits));
            hSaveData = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Save_Data'),...
                'TooltipString', this.ToolTips.Toolbar.SaveData,...
                'ClickedCallback', @(src,evnt)write_variable_to_ascii(this));
            hSwitchListMap = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Trajectory_List'),...
                'TooltipString', this.ToolTips.Toolbar.SwitchMapList,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)switch_to_list(this));
            hTrajLifeDist = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Trajectory_Lifetime_Distribution'),...
                'TooltipString', this.ToolTips.Toolbar.TrajLifeDist,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)ClassHistogram(this,...
                'Trajectory Lifetime Distribution',this));
            hJumpDist = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Jumpsize_Distribution'),...
                'TooltipString', this.ToolTips.Toolbar.JumpDist,...
                'ClickedCallback', @(src,evnt)initialize_jumpsize_series(this.objJumpSeries,this));
            hDiffCoeffDist = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Diffusion_Coefficient_Distribution'),...
                'TooltipString', this.ToolTips.Toolbar.DiffCoeffDist,...
                'ClickedCallback', @(src,evnt)set_parameter(this.objDiffCoeffFit,[]));
            hConfMan = ...
                uipushtool(...
                'Parent', hToolbar,...
                'CData', icon.('Trajectory_Confinement_Analysis'),...
                'TooltipString', this.ToolTips.Toolbar.ConfManager,...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_parameter(this.objConfManager));
            hTrajSelect = ...
                uitoggletool(...
                'Parent',hToolbar,...
                'Separator','on',...
                'CData', icon.('Trajectory_Selection'),...
                'TooltipString', this.ToolTips.Toolbar.TrajSelect,...
                'ClickedCallback', @(src,evnt)select_individual_from_map(this,src));
            %             uipushtool(...
            %                 'Parent',hToolbar,...
            %                 'CData', rand(16,16,3),...
            %                 'ClickedCallback', @(src,evnt)combine_trajectories(this));
            hRoiMan = ...
                uipushtool(...
                'Parent',hToolbar,...
                'Separator','on',...
                'CData', icon.('ROI'),...
                'TooltipString', this.ToolTips.Toolbar.RoiManager,...
                'ClickedCallback', @(src,evnt)set_parameter(this.objRoi),...
                'Enable','off');
            
            this.hImageToolbar = struct(...
                'Toolbar', hToolbar,...
                'FileInfo', hFileInfo,...
                'SaveImage', hSaveImage,...
                'SaveMovie', hSaveMovie,...
                'SaveFigure', hSaveFig,...
                'SaveData', hSaveData,...
                'DisplayManager', hDispMan,...
                'SwitchListMap', hSwitchListMap,...
                'Trans2Image', hTrans2Image,...
                'CloneData', hCloneData,...
                'TrajLifeDist', hTrajLifeDist,...
                'JumpDist', hJumpDist,...
                'DiffCoeffDist', hDiffCoeffDist,...
                'ConfManager', hConfMan,...
                'TrajSelect', hTrajSelect,...
                'RoiManager', hRoiMan);
        end %fun
        
        function isOK = get_frame(this,frameWin,mode) % -> process_data
            isOK = 1;
            
            %check if trajectory has visible parts within frame window
            for trajIdx = 1:this.NumIndividual
                %only apply to trajs displayed
                if this.objIndividual(trajIdx).IsPlotted
                    %check if traj has elapsed
                    hasElapsed = this.objIndividual(trajIdx).MaxData.Time < ...
                        frameWin(end)-this.objDisplaySettings.DisplayWin+1;
                    if this.objDisplaySettings.HideLapsedTraj && hasElapsed
                        %traj is elapsed -> hide
                        set(this.objIndividual(trajIdx).hLine,'Visible','off')
                    else
                        %find visible overlap with currently displayed frame window
                        isVisible = ismembc(this.objIndividual(trajIdx).Data.Time,frameWin);
                        if any(isVisible)
                            hide_non_visible_line_parts(this.objIndividual(trajIdx),isVisible)
                        else
                            %no parts of traj have yet appeared -> hide
                            set(this.objIndividual(trajIdx).hLine,'Visible','off')
                        end %if
                    end %if
                end %if
            end %for
            
            %             if ishandle(this.hImageFig)
            %                 adjust_traj_exp(this,...
            %                     this.ActExp,this.FieldOfView(1:2))
            %             else
            %                 adjust_traj_exp(this,...
            %                     this.Parent.ActExp,this.Parent.FieldOfView(1:2))
            %             end %if
        end %fun
        function construct_entities(this)
            %start particle detection
            hProgressbar = ClassProgressbar(...
                {'Trajectory Construction...'});
            
            %preallocate
            %             [this.hLine this.LineTime] = deal(cell(this.NumIndividual,1));
            
            %generate line objects for all trajectories
            cnt = 0;
            numActive = this.NumActive;
            for trajIdx = find(this.ActiveIdx)
                cnt = cnt +1;
                %                 [this.hLine{trajIdx} this.LineTime{trajIdx}] = ...
                initialize_map_individual(this.objIndividual(trajIdx));
                
                update_progressbar(hProgressbar,{cnt/numActive})
            end %for
            close_progressbar(hProgressbar)
        end %fun
        function adjust_traj_exp(this,expFac,offset)
            %correct for expansion and offset
            for trajIdx = 1:this.NumIndividual
                if this.objIndividual(trajIdx).IsPlotted
                    adjust_traj_exp(this.objIndividual(trajIdx),expFac,offset)
                end %if
            end %for
            
            %             hSingleLine = vertcat(this.hLine{trajIdx});
            %             if numel(hSingleLine) == 1
            %                 xData{1} = get(hSingleLine,'XData');
            %                 yData{1} = get(hSingleLine,'YData');
            %             else
            %                 xData = get(hSingleLine,'XData');
            %                 yData = get(hSingleLine,'YData');
            %             end %if
            %             xData = cellfun(@(x)transform_mag_to_mag(x,...
            %                 newExp,oldExp,this.FieldOfView(1)),xData,'Un',0);
            %             yData = cellfun(@(x)transform_mag_to_mag(x,...
            %                 newExp,oldExp,this.FieldOfView(2)),yData,'Un',0);
            %             set(hSingleLine,{'XData' 'YData'},...
            %                 [xData yData])
        end %fun
        
        function select_individual_from_map(this,src)
            switch get(src,'state')
                case 'on'
                    set(vertcat(this.objIndividual(...
                        this.ActiveIdx).hLine),'HitTest','on')
                case 'off'
                    set(vertcat(this.objIndividual(...
                        this.ActiveIdx).hLine),'HitTest','off')
                    
                    for trajIdx = 1:this.NumIndividual
                        if this.objIndividual(trajIdx).IsSelected
                            unselect_individual_on_map(this.objIndividual(trajIdx))
                        end %if
                    end %for
            end %switch
        end %fun
        function change_single_individual_state(this,src)
            switch get(src,'Label')
                case 'Activate Trajectory'
                    for trajIdx = 1:this.NumIndividual
                        if ~this.objIndividual(trajIdx).IsActive
                            if this.objIndividual(trajIdx).IsSelected
                                this.objIndividual(trajIdx).IsActive = 1;
                                update_individual_state(this.objIndividual(trajIdx))
                            end %if
                        end %if
                    end %for
                case 'Deactivate Trajectory'
                    for trajIdx = 1:this.NumIndividual
                        if this.objIndividual(trajIdx).IsActive
                            if this.objIndividual(trajIdx).IsSelected
                                this.objIndividual(trajIdx).IsActive = 0;
                                update_individual_state(this.objIndividual(trajIdx))
                            end %if
                        end %if
                    end %for
            end %switch
        end %fun
        
        function initialize_traj_splitter(this,objIndividual)
            figPos = set_figure_position(...
                (objIndividual.MaxData.Position_X-...
                objIndividual.MinData.Position_X)/...
                (objIndividual.MaxData.Position_Y-...
                objIndividual.MinData.Position_Y), 0.7, 'center');
            hFig = figure(...
                'Units','pixels',...
                'Position',figPos+[0 -10 0 20],...
                'Name', 'TRAJECTORY SPLITTER',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'IntegerHandle','off',...
                'Resize','off');
            hPanel = ...
                uipanel(...
                'Parent', hFig,...
                'Units','pixels',...
                'Position', [1 1 figPos(3) 20],...
                'HitTest', 'on');
            
            hSlider = ...
                uicontrol(...
                'Parent', hPanel,...
                'Style', 'slider',...
                'Units', 'pixels',...
                'Position', [60 0 figPos(3)-120 20],...
                'Min', 1,...
                'Max', objIndividual.NumPoints-1,...
                'Value', 1,...
                'SliderStep', [1 10]./(objIndividual.NumPoints-2));
            addlistener(hSlider,'ContinuousValueChange',...
                @(src,event)goto_individual_segment(objIndividual,src));
            
            hFramePosEdit = ...
                uicontrol(...
                'Parent', hPanel,...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [0 0 60 20],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 1,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)goto_individual_segment(objIndividual,src));
            
            hSplitButton = ...
                uicontrol(...
                'Parent', hPanel,...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [figPos(3)-60 0 60 20],...
                'FontSize', 8,...
                'String', 'SPLIT',...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)split_single_individual(this,objIndividual));
            
            hTrajPanel = ...
                uipanel(...
                'BackgroundColor', [1 1 1],...
                'Parent', hFig,...
                'Units','pixels',...
                'Position', [1 20 figPos(3) figPos(4)],...
                'HitTest', 'off');
            
            hAx = axes(...
                'Parent', hTrajPanel,...
                'Units','normalized',...
                'Position',[0 0 1 1]);
            xlim([objIndividual.MinData.Position_X-1 ...
                objIndividual.MaxData.Position_X+1])
            ylim([objIndividual.MinData.Position_Y-1 ...
                objIndividual.MaxData.Position_Y+1])
            axis equal ij
            
            [hLine lineTime] = deal(zeros(objIndividual.NumPoints-1,1));
            for segIdx = 1:objIndividual.NumPoints-1
                hLine(segIdx,1) = line(...
                    'Parent', hAx,...
                    'Marker','none',...
                    'LineWidth', 2,...
                    'XData', objIndividual.Data.Position_X(...
                    objIndividual.HitIdx(segIdx):objIndividual.HitIdx(segIdx+1)),...
                    'YData', objIndividual.Data.Position_Y(...
                    objIndividual.HitIdx(segIdx):objIndividual.HitIdx(segIdx+1)),...
                    'ButtonDownFcn', @(src,evnt)select_individual_segment(objIndividual,segIdx),...
                    'Hittest','on');
                lineTime(segIdx,1) = objIndividual.Data.Time(objIndividual.HitIdx(segIdx+1));
                if ~any(objIndividual.Miss == objIndividual.Hit(segIdx+1)-1)
                    set(hLine(segIdx,1),'Linestyle','-')
                else
                    set(hLine(segIdx,1),'Linestyle','--')
                end %if
            end %for
            
            objIndividual.TrajSplitTool = struct(...
                'hFig', hFig,...
                'hLine', hLine,...
                'hSlider', hSlider,...
                'hFramePosEdit',hFramePosEdit,...
                'hSplitButton', hSplitButton,...
                'SegIdx',1);
        end
        function split_single_individual(this,objIndividual)
            delete(objIndividual.TrajSplitTool.hFig)
            
            fieldNames = fieldnames(objIndividual.Data);
            bad = strcmp(fieldNames,'Traj_ID') | ...
                strcmp(fieldNames,'Traj_ID_Hex');
            data = rmfield(objIndividual.Data,fieldNames(bad));
            
            %create splitted trajectories and append to the list
            this.objIndividual(end+1) = ...
                ClassSingleTrajectory(this,...
                structfun(@(x)x(1:objIndividual.TrajSplitTool.SegIdx), ...
                data,'UniformOutput', false));
            %             [this.hLine{end+1} this.LineTime{end+1}] = ...
            initialize_map_individual(this.objIndividual(end));
            set(this.objIndividual(end).hLine,'Hittest','on')
            %             update_individual_color_coding(this.objIndividual(end))
            
            this.objIndividual(end+1) = ...
                ClassSingleTrajectory(this,...
                structfun(@(x)x(objIndividual.TrajSplitTool.SegIdx+1:end), ...
                data,'UniformOutput', false));
            %             [this.hLine{end+1} this.LineTime{end+1}] = ...
            initialize_map_individual(this.objIndividual(end));
            set(this.objIndividual(end).hLine,'Hittest','on')
            %             update_individual_color_coding(this.objIndividual(end))
            
            this.NumIndividual = this.NumIndividual + 1;
            
            %remove object from list
            objIdx = eq(this.objIndividual,objIndividual);
            this.objIndividual(objIdx) = [];
            
            %remove trajectory from map
            %             unselect_individual_on_map(objIndividual)
            %             delete(objIndividual.hListenerState)
            %             delete(this.hLine{objIdx})
            %             this.hLine(objIdx) = [];
            %             this.LineTime(objIdx) = [];
            
            adjust_traj_exp(this.objIndividual(end-1),...
                this.ActExp,this.FieldOfView(1:2))
            adjust_traj_exp(this.objIndividual(end),...
                this.ActExp,this.FieldOfView(1:2))
        end %fun
        
        %         function combine_trajectories(this)
        %             for trajIdx = 1:this.NumIndividual
        %                 if this.objIndividual(trajIdx).IsSelected
        %                     good(trajIdx) = true;
        %                 end %if
        %             end %for
        %
        %             fields = fieldnames(this.objIndividual(1).Data);
        %             for idxField = 1:numel(fields)
        %                 data.(fields{idxField}) = ...
        %                     cell2mat(arrayfun(@(x)x.Data.(fields{idxField}),...
        %                     this.objIndividual(good)','Un',0));
        %                 data.(fields{idxField})(49) = [];
        %             end %for
        %
        %             this.NumIndividual = 1;
        %             this.objIndividual = ...
        %                 ClassSingleTrajectory(this,data);
        %         end %fun
        
        function change_single_individual_color(this)
            newColor = uisetcolor([1 1 1]);
            
            for trajIdx = 1:this.NumIndividual
                this.objIndividual(trajIdx).IsSingleLine = true;
                %only apply to trajs displayed
                if this.objIndividual(trajIdx).IsActive
                    %only apply to trajs selected
                    if this.objIndividual(trajIdx).IsSelected
                        change_individual_color(this.objIndividual(trajIdx),newColor)
                    end %if
                end %if
            end %for
        end %fun
        function set_ensemble_color(this,newColor)
            for trajIdx = 1:this.NumIndividual
                change_individual_color(this.objIndividual(trajIdx),newColor)
            end %for
        end %fun
        function change_ensemble_color_coding(this,colorCode,colorRange)
            this.MapColorType = colorCode;
            switch colorCode
                case 'User'
                    this.MapColorValue = [];
                    this.MapColor = [];
                    this.DrawSingleTrajColor = true;
                case 'Random'
                    this.MapColorValue = [];
                    this.MapColor = [];
                    this.DrawSingleTrajColor = true;
                case 'State'
                    this.MapColorValue = [];
                    this.MapColor = [[0 1 0];[1 0 0]];
                    this.DrawSingleTrajColor = true;
                case 'Time'
                    this.MapColorValue = this.LocStart:this.LocEnd; %[frames]
                    this.MapColor = jet(this.LocEnd-this.LocStart+1);
                    this.DrawSingleTrajColor = false;
                case 'Lifetime'
                    totalObsTime = [this.objIndividual.TotalObsTime];
                    this.MapColorValue = min(totalObsTime):max(totalObsTime); %[frames]
                    this.MapColor = jet(range(totalObsTime)+1);
                    this.DrawSingleTrajColor = true;
                case 'Jumpsize'
                    jumpSize = vertcat(this.objIndividual.StepSize);
                    if isinf(colorRange(1))
                        minJumpsize = min(jumpSize);
                    else
                        minJumpsize = colorRange(1);
                    end %if
                    if isinf(colorRange(2))
                        maxJumpsize = max(jumpSize);
                    else
                        maxJumpsize = colorRange(2);
                    end %if
                    set(this.objDisplaySettings.hEditColorRangeStart,'String',minJumpsize)
                    set(this.objDisplaySettings.hEditColorRangeEnd,'String',maxJumpsize)
                    this.MapColorValue = linspace(log10(minJumpsize),log10(maxJumpsize),256); %[nm]
                    this.MapColor = jet(256);
                    this.DrawSingleTrajColor = false;
                case 'Diff. Coeff.'
                    diffCoeff = vertcat(this.objIndividual(this.ActiveIdx).DiffCoeff);
                    if isinf(colorRange(1))
                        minDiffCoeff = min(diffCoeff);
                    else
                        minDiffCoeff = colorRange(1);
                    end %if
                    if isinf(colorRange(2))
                        maxDiffCoeff = max(diffCoeff);
                    else
                        maxDiffCoeff = colorRange(2);
                    end %if
                    set(this.objDisplaySettings.hEditColorRangeStart,'String',minDiffCoeff)
                    set(this.objDisplaySettings.hEditColorRangeEnd,'String',maxDiffCoeff)
                    this.MapColorValue = linspace(log10(minDiffCoeff),log10(maxDiffCoeff),256);
                    this.MapColor = jet(256);
                    this.DrawSingleTrajColor = true;
                case 'Local Diff. Coeff.'
                case 'Confinement'
            end %switch
            adjust_line_mode(this)
            
            for trajIdx = 1:this.NumIndividual
                %only apply to trajs displayed
                if this.objIndividual(trajIdx).IsActive
                    if this.objIndividual(trajIdx).IsPlotted
                        update_individual_color_coding(this.objIndividual(trajIdx))
                    end %if
                end %if
            end %for
            
            show_frame(this,this.Frame)
        end %fun
        
        function set_ensemble_linewidth(this,linewidth)
            for trajIdx = 1:this.NumIndividual
                change_individual_linewidth(this.objIndividual(trajIdx),linewidth)
            end %for
        end %fun
        function set_ensemble_linestyle(this,linestyle)
            for trajIdx = 1:this.NumIndividual
                change_individual_linestyle(this.objIndividual(trajIdx),linestyle)
            end %for
        end %fun
        
        function adjust_line_mode(this)
            if all([this.objIndividual.IsSingleLine] == ...
                    this.DrawSingleTrajColor)
                %no change
                return
            else
                if ishandle(this.hImageFig)
                    set(this.hImageFig,'Visible','off')
                else
                    set(this.Parent.hImageFig,'Visible','off')
                end %if
                
                %                 delete(vertcat(this.hLine{:}))
                for trajIdx = 1:this.NumIndividual
                    close_individual_map_object(this.objIndividual(trajIdx))
                    this.objIndividual(trajIdx).IsSingleLine = ...
                        this.DrawSingleTrajColor;
                end %for
                
                if ishandle(this.hImageFig)
                    construct_entities(this)
                    set(this.hImageFig,'Visible','on')
                else
                    construct_entities(this)
                    set(this.Parent.hImageFig,'Visible','on')
                end %if
            end %if
        end %fun
        
        function switch_to_list(this)
            for trajIdx = 1:this.NumIndividual
                if this.objIndividual(trajIdx).IsPlotted
                    close_individual_map_object(this.objIndividual(trajIdx))
                end %if
            end %for
            
            initialize_list_visualization(this)
        end %fun
        
        %% TRAJECTORY DETAIL
        function initialize_individual_details(this,objIndividual)
            %switch get(this.hListFig,'SelectionType')
            %case 'normal'
            if objIndividual.NumPoints < 3
                waitfor(errordlg(sprintf(...
                    'Trajectory must have at least \n3 Points to be processed'),...
                    '','modal'))
            else
                this.IndividualSelectIdx = find(eq(objIndividual,this.objIndividual));
                
                figPos = set_figure_position(1.5,0.7,'center');
                
                this.hDetailFig = ...
                    figure(...
                    'Units','pixels',...
                    'Position', figPos,...
                    'Color', this.FamilyColor,...
                    'Name', 'TRAJECTORY DETAILS',...
                    'NumberTitle', 'off',...
                    'DockControls', 'off',...
                    'MenuBar', 'none',...
                    'IntegerHandle','off',...
                    'ToolBar', 'none',...
                    'Resize','off');
                
                hPanel(1) = ...
                    uipanel(...
                    'Parent', this.hDetailFig,...
                    'Units','normalized',...
                    'Position', [0 0.6 0.4 0.4],...
                    'HitTest', 'off');
                hPanel(2) = ...
                    uipanel(...
                    'Parent', this.hDetailFig,...
                    'Units','normalized',...
                    'Position', [0.4 0.6 0.6 0.4],...
                    'HitTest', 'off');
                hPanel(3) = ...
                    uipanel(...
                    'Parent', this.hDetailFig,...
                    'Units','normalized',...
                    'Position', [0 0 1 0.6],...
                    'HitTest', 'off');
                
                this.hDetailAx(1) = ...
                    axes(...
                    'Parent', hPanel(1),...
                    'Units', 'normalized',...
                    'Position', [0.25 0.25 0.5 0.5],...
                    'FontSize', 12,...
                    'Box', 'on',...
                    'XTickLabel','',...
                    'YTickLabel','',...
                    'ZTickLabel','',...
                    'YDir', 'reverse',...
                    'NextPlot', 'add');
                axis(this.hDetailAx(1),'vis3d')
                
                this.hDetailAx(2) = ...
                    axes(...
                    'Parent', hPanel(2),...
                    'Units', 'normalized',...
                    'Position', [0.05 0.25 0.8 0.45],...
                    'FontSize', 16,...
                    'YAxisLocation', 'right',...
                    'Box', 'on',...
                    'NextPlot', 'add',...
                    'ButtonDownFcn', @(src,evnt)increase_axes(this,src));
                
                this.hDetailAx(3) = ...
                    axes(...
                    'Parent', hPanel(3),...
                    'Units', 'normalized',...
                    'Position', [0.15 0.7 0.725 0.25],...
                    'FontSize', 16,...
                    'Box', 'on',...
                    'XTickLabel','',...
                    'TickLength',[0 0],...
                    'NextPlot', 'add');
                
                this.hDetailAx(4) = ...
                    axes(...
                    'Parent', hPanel(3),...
                    'Units', 'normalized',...
                    'Position', [0.875 0.7 0.1 0.25],...
                    'FontSize', 16,...
                    'Box', 'on',...
                    'XTickLabel','',...
                    'YTickLabel','',...
                    'TickLength',[0 0],...
                    'NextPlot', 'add');
                
                this.hDetailAx(5) = ...
                    axes(...
                    'Parent', hPanel(3),...
                    'Units', 'normalized',...
                    'Position', [0.15 0.45 0.725 0.25],...
                    'FontSize', 16,...
                    'Box', 'on',...
                    'XTickLabel','',...
                    'YTick', [-90 90],...
                    'TickLength',[0 0],...
                    'NextPlot', 'add');
                
                this.hDetailAx(6) = ...
                    axes(...
                    'Parent', hPanel(3),...
                    'Units', 'normalized',...
                    'Position', [0.875 0.45 0.1 0.25],...
                    'FontSize', 16,...
                    'Box', 'on',...
                    'XTickLabel','',...
                    'YTickLabel','',...
                    'TickLength',[0 0],...
                    'NextPlot', 'add');
                
                this.hDetailAx(7) = ...
                    axes(...
                    'Parent', hPanel(3),...
                    'Units', 'normalized',...
                    'Position', [0.15 0.2 0.725 0.25],...
                    'FontSize', 16,...
                    'Box', 'on',...
                    'TickLength',[0 0],...
                    'NextPlot', 'add');
                
                this.hDetailAx(8) = ...
                    axes(...
                    'Parent', hPanel(3),...
                    'Units', 'normalized',...
                    'Position', [0.875 0.2 0.1 0.25],...
                    'FontSize', 16,...
                    'Box', 'on',...
                    'XTickLabel','',...
                    'YTickLabel','',...
                    'TickLength',[0 0],...
                    'NextPlot', 'add');
                
                %construct associated toolbar
                construct_detail_toolbar(this,objIndividual)
                
                insert_individual_data(objIndividual)
                rotate_axes(this)
            end %if
            %case 'alt'
            %end %switch
        end %fun
        function construct_detail_toolbar(this,objIndividual)
            hToolbar = uitoolbar('Parent',this.hDetailFig);
            icon = getappdata(0,'icon');
            hSaveData = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Save_Data'),...
                'TooltipString', this.ToolTips.Toolbar.SaveData,...
                'ClickedCallback', @(src,evnt)write_variable_to_ascii(objIndividual));
            hGotoPrev = ...
                uipushtool(...
                'Parent',hToolbar,...
                'Tag', 'goto previous',...
                'CData', icon.('Left_Arrow'),...
                'TooltipString', this.ToolTips.Toolbar.GotoPrev,...
                'ClickedCallback', @(src,evnt)update_individual_data(objIndividual,src));
            hGotoNext = ...
                uipushtool(...
                'Parent',hToolbar,...
                'Tag', 'goto next',...
                'CData', icon.('Right_Arrow'),...
                'TooltipString', this.ToolTips.Toolbar.GotoNext,...
                'ClickedCallback', @(src,evnt)update_individual_data(objIndividual,src));
            hMsdCurveEst = ...
                uipushtool(...
                'Parent',hToolbar,...
                'CData', icon.('Fit'),...
                'TooltipString', this.ToolTips.Toolbar.MsdCurveEst,...
                'ClickedCallback', @(src,evnt)set_parameter(this.objDiffCoeffFit,objIndividual));
            
            this.hDetailToolbar = struct(...
                'Toolbar', hToolbar,...
                'SaveData', hSaveData,...
                'GotoPrev', hGotoPrev,...
                'GotoNext', hGotoNext,...
                'MsdCurveEst', hMsdCurveEst);
        end %fun
        function update_diff_coeff_fits(this)
            %close diff. coeff. settings
            if ishandle(this.objDiffCoeffFit.hFig)
                delete(this.objDiffCoeffFit.hFig)
            end %if
            
            hProgressbar = ClassProgressbar({'Fitting Diff. Coeff...'});
            
            for trajIdx = 1:this.NumIndividual
                fit_diffusion_coefficient(...
                    this.objDiffCoeffFit,this.objIndividual(trajIdx))
                update_progressbar(hProgressbar,{trajIdx/this.NumIndividual})
            end %for
            close_progressbar(hProgressbar)
            
            ClassHistogram(this,'Diffusion Coefficient Distribution',this);
        end %fun
        function rotate_axes(this)
            [az,~] = view(this.hDetailAx(1));
            while ishandle(this.hDetailAx(1))
                view(this.hDetailAx(1),sin(az)*180,cos(az/3)*60)
                az = az + 0.01;
                pause(0.03)
            end %while
        end %fun
        function increase_axes(~,src)
            fig = figure(...
                'Units','normalized',...
                'Position', [0.1 0.1 0.8 0.8],...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'IntegerHandle','off',...
                'Color', [1 1 1]);
            
            uitoolbar;
            icon = getappdata(0,'icon');
            uipushtool(...
                'CData', icon.('Save_Figure'),...
                'ClickedCallback', @(src,evnt)print_figure_to_disk(fig));
            
            hClone = copyobj(src,fig);
            set(hClone, 'OuterPosition', [0 0 1 1],...
                'Position', [0.13 0.11 0.775 0.75],...
                'YAxisLocation','left',...
                'ButtonDownFcn',[])
        end %nested0
        
        %%
        function objLoc = transform_to_image(this)
            %check that set has at least one element
            objProject = this.Parent;
            objLoc = ClassLocalization;
            set_parent(objLoc,objProject)
            objLoc.Name = this.Name;
            objLoc.DetectionMap = this.DetectionMap;
            
            objLoc.objImageFile = copy(this.objImageFile);
            set_parent(objLoc.objImageFile,objLoc)
            objLoc.objUnitConvFac = copy(this.objUnitConvFac);
            set_parent(objLoc.objUnitConvFac,objLoc)
            objLoc.objLocSettings = copy(this.objLocSettings);
            set_parent(objLoc.objLocSettings,objLoc)
            objLoc.objTrackSettings = copy(this.objTrackSettings);
            set_parent(objLoc.objTrackSettings,objLoc)
            
            objLoc.objContrastSettings = ManagerContrastSettings(objLoc);
            objLoc.objDisplaySettings = ManagerDisplaySettings(objLoc);
            objLoc.objClusterSettings = ManagerClusterSettings(objLoc);
            
            objLoc.objColormap = ManagerColormap(objLoc);
            objLoc.objGrid = ManagerGrid(objLoc);
            objLoc.objRoi = ManagerRoi(objLoc);
            objLoc.objScalebar = ManagerScalebar(objLoc);
            objLoc.objTimestamp = ManagerTimestamp(objLoc);
            objLoc.objTextstamp = ManagerTextstamp(objLoc);
            objLoc.objLineProfile = ManagerLineProfile(objLoc);
            
            if this.objRoi.CropRoi
                objLoc.FieldOfView = this.MaskRect;
            else
                objLoc.FieldOfView = this.FieldOfView;
            end %if
            
            fieldName = fieldnames(this.objIndividual(1).Data);
            if this.NumActive > 0
                data = vertcat(this.objIndividual(this.ActiveIdx).Data);
                %must sort for subsequent tracking
                [~,sortIdx] = sort(vertcat(data.Time));
                for fieldIdx = 1:numel(fieldName)
                    if ~any(strcmp(fieldName{fieldIdx},{'Traj_ID','Traj_ID_Hex'}))
                        unsortedData = vertcat(data.(fieldName{fieldIdx}));
                        objLoc.Data.(fieldName{fieldIdx}) = ...
                            unsortedData(sortIdx);
                    end %if
                end
                objLoc.NumParticles = sum([this.objIndividual(this.ActiveIdx).NumPoints]);
                
                isOK = show_frame(objLoc,1);
                
                add_data_to_project(...
                    get_parental_object(this,'ClassProject'),objLoc)
                
                %check if actual data object is visualized
                if ishandle(this.hImageFig) || ...
                        ishandle(this.hListFig)
                    initialize_visualization(objLoc)
                end %if
            else
                for fieldIdx = 1:numel(fieldName)
                    if ~any(strcmp(fieldName{fieldIdx},{'Traj_ID','Traj_ID_Hex'}))
                        objLoc.Data.(fieldName{fieldIdx}) = [];
                    end %if
                end %for
                objLoc.NumParticles = 0;
                
                add_data_to_project(...
                    get_parental_object(this,'ClassProject'),objLoc)
                
                %                 waitfor(errordlg('No Data found','','modal'))
            end %if
        end %fun
        
        %%
        function set_individual_subset(this)
            this.SubsetType = get(gcbo,'Text');
            
            switch this.VisMode
                case 'List'
                    %adjust slider
                    if this.NumActive > 20
                        set(this.hListSlider,...
                            'Min', 1,...
                            'Max', ceil(this.NumActive/20),...
                            'Value', ceil(this.NumActive/20),....
                            'SliderStep', [min(1/(ceil(this.NumActive/20)-1),1)...
                            min(5/(ceil(this.NumActive/20)-1),1)],...
                            'Visible','on',...
                            'Enable','on')
                    else
                        set(this.hListSlider,...
                            'Value', 1,...
                            'Visible','off',...
                            'Enable','off')
                    end %if
                    
                    update_list_visualization(this)
                case 'Map'
                    if ishandle(this.hImageFig)
                        set(this.hImageFig,'Visible','off')
                    end %if
                    
                    hProgressbar = ClassProgressbar({'Subset Construction...'});
                    
                    numIndividual = this.NumIndividual;
                    for trajIdx = 1:numIndividual
                        switch this.SubsetType
                            case 'Complete Set'
                                if this.objIndividual(trajIdx).IsPlotted
                                    set(this.objIndividual(trajIdx).hLine,'Visible','on')
                                else
                                    initialize_map_individual(this.objIndividual(trajIdx));
                                end %if
                            case 'Active Subset'
                                if this.objIndividual(trajIdx).IsActive
                                    if this.objIndividual(trajIdx).IsPlotted
                                        set(this.objIndividual(trajIdx).hLine,'Visible','on')
                                    else %active, but not yet plotted -> plot
                                        initialize_map_individual(this.objIndividual(trajIdx));
                                    end %if
                                else %inactive, but currently plotted -> remove respective line
                                    if this.objIndividual(trajIdx).IsPlotted
                                        unselect_individual_on_map(this.objIndividual(trajIdx))
                                        set(this.objIndividual(trajIdx).hLine,'Visible','off')
                                    end %if
                                end %if
                            case 'Inactive Subset'
                                if ~this.objIndividual(trajIdx).IsActive
                                    if this.objIndividual(trajIdx).IsPlotted
                                        set(this.objIndividual(trajIdx).hLine,'Visible','on')
                                    else %inactive, but not yet plotted -> plot
                                        initialize_map_individual(this.objIndividual(trajIdx));
                                    end %if
                                else %active, but currently plotted -> remove respective line
                                    if this.objIndividual(trajIdx).IsPlotted
                                        unselect_individual_on_map(this.objIndividual(trajIdx))
                                        set(this.objIndividual(trajIdx).hLine,'Visible','off')
                                    end %if
                                end %if
                        end %switch
                        update_progressbar(hProgressbar,{trajIdx/numIndividual})
                    end %for
                    close_progressbar(hProgressbar)
                    
                    if ishandle(this.hImageFig)
                        set(this.hImageFig,'Visible','on')
                    end %if
                    
                    %update display
                    show_frame(this,this.Frame);
            end %switch
        end %fun
        
        function change_ensemble_state(this,src)
            switch get(src,'Label')
                case 'Activate All'
                    for trajIdx = 1:this.NumIndividual
                        if ~this.objIndividual(trajIdx).IsActive
                            this.objIndividual(trajIdx).IsActive = 1;
                        end %if
                    end %for
                case 'Deactivate All'
                    for trajIdx = 1:this.NumIndividual
                        if this.objIndividual(trajIdx).IsActive
                            this.objIndividual(trajIdx).IsActive = 0;
                        end %if
                    end %for
            end %switch
            
            switch this.VisMode
                case 'List'
                    %adjust slider
                    if this.NumActive > 20
                        set(this.hListSlider,...
                            'Min', 1,...
                            'Max', ceil(this.NumActive/20),...
                            'Value', ceil(this.NumActive/20),....
                            'SliderStep', [min(1/(ceil(this.NumActive/20)-1),1)...
                            min(5/(ceil(this.NumActive/20)-1),1)],...
                            'Visible','on',...
                            'Enable','on')
                    else
                        set(this.hListSlider,...
                            'Value', 1,...
                            'Visible','off',...
                            'Enable','off')
                    end %if
                    
                    update_list_visualization(this)
                case 'Map'
                    display_frame(this)
            end %switch
        end %fun
        
        %%
        function cloneObj = clone_object(this,parent,varargin)
            %validate input
            input = inputParser;
            addRequired(input,'parent',@isobject);
            addOptional(input,'CloneIndividualList',1,@isnumeric)
            parse(input,parent,varargin{:});
            
            %invoke shared clone process (superclass)
            cloneObj = clone_object@SuperclassData(...
                this,input.Results.parent);
            
            %individual clone process
            if input.Results.CloneIndividualList
                [cloneList,flag] = ...
                    clone_individual_list(this,cloneObj,'All');
                cloneObj.objIndividual = cloneList;
            else
            end %if
        end %fun
        function [cloneList,flag] = ...
                clone_individual_list(this,parent,mode,idxGood)
            %initialize output
            flag = 1;
            switch mode
                case 'All'
                    numClone = this.NumIndividual;
                    cloneList = ClassSingleTrajectory.empty(0,numClone);
                    idxGood = 1:numClone;
                case 'Input'
                    if islogical(idxGood)
                        idxGood = find(idxGood); %transform to index
                    end %if
                    idxGood = reshape(idxGood,1,[]); %force row vector
            end %switch
            
            %clone single trajectories
            idxCloneList = 0;
            for idxList = idxGood
                idxCloneList = idxCloneList + 1;
                
                %deep copy (matlab.mixin.Copyable)
                cloneList(idxCloneList) = ...
                    copy(this.objIndividual(idxList));
                %update associated parent
                set_parent(cloneList(idxCloneList),parent)
            end %for
        end %fun
        
        function generate_filtered_data_set(this)
            %apply time filter and spatial mask
            good = this.ActiveIdx; %& this.IsInsideRoi;
            
            generate_new_data_set(this,good)
        end %fun
        function generate_new_data_set(this,good)
            objClone = clone_object(this,this.Parent,...
                'CloneIndividualList',0);
            objClone.SubsetType = 'Complete Set';
            
            %reset roi list
            objClone.objRoi.SrcContainer.RoiList = [];
            
            cnt = 0;
            for trajIdx = 1:this.NumIndividual
                if good(trajIdx)
                    cnt = cnt + 1;
                    objClone.objIndividual(cnt) = ...
                        copy(this.objIndividual(trajIdx));
                    set_parent(objClone.objIndividual(cnt),objClone)
                    %                     objClone.objIndividual(cnt).Parent = objClone;
                end %if
            end %for
            objClone.NumIndividual = sum(good);
            
            if this.objRoi.CropRoi
                objClone.FieldOfView = this.MaskRect;
            else
                objClone.FieldOfView = [0.5 0.5 ...
                    this.objImageFile.ChannelWidth*this.ActExp+0.5 ...
                    this.objImageFile.ChannelHeight*this.ActExp+0.5 ...
                    this.objImageFile.ChannelWidth*this.ActExp ...
                    this.objImageFile.ChannelHeight*this.ActExp];
            end %if
            
            add_data_to_project(...
                get_parental_object(this,'ClassProject'),objClone)
            
            if ishandle(this.hImageFig) || ...
                    ishandle(this.hListFig)
                initialize_visualization(objClone)
            end %if
        end %fun
        
        %% getter
        function numactive = get.NumActive(this)
            switch this.SubsetType
                case 'Complete Set'
                    numactive = this.NumIndividual;
                case 'Active Subset'
                    numactive = sum([this.objIndividual(:).IsActive]);
                case 'Inactive Subset'
                    numactive = sum(~[this.objIndividual(:).IsActive]);
            end %switch
        end %fun
        function activeidx = get.ActiveIdx(this)
            switch this.SubsetType
                case 'Complete Set'
                    activeidx = true(1,this.NumActive);
                case 'Active Subset'
                    activeidx = logical([this.objIndividual(:).IsActive]);
                case 'Inactive Subset'
                    activeidx = logical(~[this.objIndividual(:).IsActive]);
            end %switch
        end %fun
        
        function offset = get_offset(this)
            if ishandle(this.hImageFig)
                offset = this.FieldOfView(1:2);
            else
                offset = this.Parent.FieldOfView(1:2);
            end %if
        end %fun
        
        function displacement = get_all_particle_jumps(this,varargin)
            objInputParser = inputParser;
            addParamValue(objInputParser,...
                'SubsetType', this.SubsetType, @(x)ischar(x));
            addParamValue(objInputParser,...
                'Unit', 'µm', @(x)ischar(x));
            parse(objInputParser,varargin{:});
            inputs = objInputParser.Results;
            
            activeIdx(:,1) = get_indices_for_active_set(this,inputs.SubsetType);
            displacement(:,1) = sqrt(vertcat(this.objIndividual(activeIdx).SD)); %[µm]
            
            switch inputs.Unit
                case 'µm'
                case 'nm'
                    displacement = displacement*1e3; %[nm]
            end %switch
        end %fun
        function ndt = get_all_frame_jumps(this,varargin)
            objInputParser = inputParser;
            addParamValue(objInputParser,...
                'SubsetType', this.SubsetType, @(x)ischar(x));
            parse(objInputParser,varargin{:});
            inputs = objInputParser.Results;
            
            activeIdx(:,1) = get_indices_for_active_set(this,inputs.SubsetType);
            ndt(:,1) = vertcat(this.objIndividual(activeIdx).SdDeltaT);
        end %fun
        function activeIdx = get_indices_for_active_set(this,subsetType)
            switch subsetType
                case 'Complete Set'
                    activeIdx = true(this.NumIndividual,1);
                case 'Active Subset'
                    activeIdx = logical(vertcat(this.objIndividual(:).IsActive));
                case 'Inactive Subset'
                    activeIdx = logical(~vertcat(this.objIndividual(:).IsActive));
            end %switch
        end %fun
        
        %%
        function saveObj = saveobj(this)
            %             objIndividual = this.objIndividual;
            %             this.objIndividual =[];
            %             for idxIndividual = 1:numel(objIndividual)
            %                 this.objIndividual{idxIndividual} = objIndividual(idxIndividual);
            %             end %for
            %             this.objJumpSeries = [];
            
            saveObj = saveobj@SuperclassData(this);
        end %fun
        function close_object(this)
            close_object@SuperclassData(this)
            
            if ishandle(this.hImageFig)
                delete(this.hImageFig)
            end %if
            if ishandle(this.hListFig)
                delete(this.hListFig)
            end %if
            if ishandle(this.hDetailFig)
                delete(this.hDetailFig)
            end %if
        end %fun
        function delete_object(this)
            delete_object@SuperclassData(this)
            
            if ishandle(this.hImageFig)
                delete(this.hImageFig)
            end %if
            if ishandle(this.hListFig)
                delete(this.hListFig)
            end %if
            if ishandle(this.hDetailFig)
                delete(this.hDetailFig)
            end %if
            
            %             delete(this.objIndividual)
            delete(this)
        end %fun
    end %methods
    
    methods (Static)
        function this = loadobj(S)
            %             if iscell(S.objIndividual)
            %             objIndividual = S.objIndividual;
            %             S.objIndividual = ClassSingleTrajectory;
            %             for idxIndividual = 1:numel(objIndividual)
            %                 S.objIndividual(idxIndividual) = objIndividual{idxIndividual};
            %             end %for
            %             end %if
            
            this = ClassTrajectory;
            this = loadobj@SuperclassData(this,S);
        end %fun
    end %methods
end %classdef