classdef ManagerMixedDistSettings < SuperclassManager
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties
        Data
        NumPoints %degree of freedom
        DistFamily
        
        Candidate %final model
        Candidates = ClassMixedDistribution.empty %test models
        
        X
        YHat
        Posterior
    end %properties
    properties (Hidden,Dependent)
        NumMix %final model complexity
        UseInfoCrit %evaluate model complexity
        MaxMix %max. allowed model complexity
        Replicates %start value permutations -> global optimization
        UseCorrMean
        MaxIter
        TolFun
        IsTruncated
        LeftTrunc
        RightTrunc
        
        Display
    end %properties
    properties (Hidden,Transient)
        hEstFig = nan;
        
        hProfilePopup
        hProfileSaveButton
        
        hUserDefinedCheckbox
        hUserDefinedEdit
        hUseInfoCritCheckbox
        hUseInfoCritEdit
        hLeftTruncEdit
        hRightTruncEdit
        hEstButton
        
        hParamFig
        
        hInfoCritFig
        hComplexityPopupmenu
        
        hPosteriorPatch
        hEstimateLine
        
        SelectedPop
    end %properties
    
    methods
        function this = ManagerMixedDistSettings(parent)
            if nargin == 0
                parent = [];
            end %if
            this = this@SuperclassManager(parent);
            
            if nargin > 0
                check_settings(this)
            end %if
        end %fun
        function check_settings(this)
        end %fun
        
        function initialize_model_parameters(this,data,distFamily)
            this.Data = data;
            this.NumPoints = numel(data);
            this.DistFamily = distFamily;
            
            if this.UseInfoCrit
                for numMix = 1:this.MaxMix
                    this.Candidates(numMix,1) = ClassMixedDistribution(this,numMix,distFamily);
                end %for
            else
                this.Candidate = ClassMixedDistribution(this,this.NumMix,distFamily);
            end %if
        end %fun
        
        function set_parameter(this)
            %check if gui already open
            if ishandle(this.hEstFig)
                waitfor(msgbox('DISTRIBUTION MANAGER already open','INFO','help','modal'))
                figure(this.hEstFig)
                return
            end %if
            
            scrSize = get(0, 'ScreenSize');
            
            y0 = 210;
            this.hEstFig = figure(...
                'Units','pixels',...
                'Position', ...
                [0.5*(scrSize(3)-225) 0.5*(scrSize(4)-y0) 225 y0],...
                'Name', 'DISTRIBUTION ESTIMATOR',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'DockControls', 'off',...
                'Color', this.FamilyColor,...
                'Resize', 'off',...
                'IntegerHandle','off',...
                'CloseRequestFcn', @(src,evnt)close_object(this));
            
            y = y0 - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 50 15],...
                'FontSize', 8,...
                'String', 'Profile:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            get_actual_profiles(this.SrcContainer)
            this.hProfilePopup = ...
                uicontrol(...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [60 y+1 115 15],...
                'FontSize', 7,...
                'String', this.SrcContainer.Profiles,...
                'Value', find(strcmp(this.SrcContainer.Profile,this.SrcContainer.Profiles)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_Profile(this,src));
            this.hProfileSaveButton = ...
            uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', 'Save',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)save_actual_properties_as_profile(this.SrcContainer));
            
            y = y - 20;
            
            this.hUserDefinedCheckbox = ...
                uicontrol(...
                'Style', 'checkbox',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'BackgroundColor', this.FamilyColor,...
                'String', 'Expected # of Populations:',...
                'Value', ~this.UseInfoCrit,...
                'Callback', @(src,evnt)set_UseInfoCrit(this,src));
            
            this.hUserDefinedEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.NumMix,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_NumMix(this,src));
            if this.UseInfoCrit
                set(this.hUserDefinedEdit,'Enable','off')
            end %if
            
            y = y - 20;
            this.hUseInfoCritCheckbox = ...
                uicontrol(...
                'Style', 'checkbox',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'BackgroundColor', this.FamilyColor,...
                'String', 'Test # of Populations:',...
                'Value', this.UseInfoCrit,...
                'Callback', @(src,evnt)set_UseInfoCrit(this,src));
            
            this.hUseInfoCritEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.MaxMix,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_MaxMix(this,src));
            if ~this.UseInfoCrit
                set(this.hUseInfoCritEdit,'Enable','off')
            end %if
            
            y = y - 20;
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', '# of Random Start Value Cycles:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.Replicates,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_Replicates(this,src));
            
            y = y - 20;
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', 'Max. # Iterations:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.MaxIter,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_MaxIter(this,src));
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', 'Termination Tolerance [10^]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.TolFun,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_TolFun(this,src));
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'checkbox',...
                'Units','pixels',...
                'Position', [5 y 135 15],...
                'FontSize', 8,...
                'BackgroundColor', this.FamilyColor,...
                'String', 'Truncation:',...
                'Value', this.IsTruncated,...
                'Callback', @(src,evnt)set_IsTruncated(this,src));
            this.hLeftTruncEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [140 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.LeftTrunc,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_LeftTrunc(this,src));
            this.hRightTruncEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.RightTrunc,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_RightTrunc(this,src));
            if this.IsTruncated
                set([this.hLeftTruncEdit this.hRightTruncEdit],...
                    'Enable','on')
            else
                set([this.hLeftTruncEdit this.hRightTruncEdit],...
                    'Enable','off')
            end %if
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'checkbox',...
                'Units','pixels',...
                'Position', [5 y 215 15],...
                'FontSize', 8,...
                'BackgroundColor', this.FamilyColor,...
                'String', 'Correlated Populations` Mean',...
                'Value', this.UseCorrMean,...
                'Callback', @(src,evnt)set_UseCorrMean(this,src),...
                'Enable','off');
            
            y = y - 35;
            
            uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [25 y 75 25],...
                'FontSize', 8,...
                'String', 'Parameter',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)show_model_parameters(this));
            
            this.hEstButton = ...
                uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [125 y 75 25],...
                'FontSize', 8,...
                'String', 'Estimate',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)estimate_parameter(this));
            
            set(get(this.hEstFig,'Children'),...
                'Units', 'normalized',...
                'FontUnits', 'normalized',...
                'FontWeight','bold')
            set(this.hEstFig,'Units','pixels',...
                'Position', set_figure_position(225/y0, 0.45/225*y0,'center'))
        end %fun
        
        function show_model_parameters(this)
            set(this.hEstFig,'Visible','off')
            
            scrSize = get(0, 'ScreenSize');
            
            y0 = 100;
            this.hParamFig = figure(...
                'Units','pixels',...
                'Position', ...
                [0.5*(scrSize(3)-100) 0.5*(scrSize(4)-y0) 100 y0],...
                'Name', 'PARAMETER MANAGER',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'DockControls', 'off',...
                'IntegerHandle','off',...
                'DeleteFcn', @(src,evnt)close_model_parameters(this),...
                'Resize','off',...
                'Visible','off');
            
            hTable = ...
                uitable(...
                'Units','normalized',...
                'Position',[0 0 1 1],...
                'ColumnName', {'Parameter','Mode','Lower','Value','Upper'},...
                'ColumnFormat', {'char',{'Unbound' 'Bound' 'Fixed'},'numeric','numeric','numeric'},...
                'ColumnEditable', [false true true true true],...
                'ColumnWidth',{200 200 150 150 150},...
                'RowName',[],...
                'RowStriping','off',...
                'FontSize', 18,...
                'CellEditCallback', @(src,evnt)configure_model_parameters(this,src,evnt));
            if this.UseInfoCrit
                numMix = this.Candidates(end).NumMix;
                data = ...
                    [[this.Candidates(end).objModel.ParamNames]; ...
                    [this.Candidates(end).objModel.ParamMode]; ...
                    [this.Candidates(end).objModel.LB]; ...
                    [this.Candidates(end).objModel.UserValue]; ...
                    [this.Candidates(end).objModel.UB]];
                modelMembership = cell2mat(arrayfun(@(x)ones(x.NumParam,1)*...
                    x.Subpop,this.Candidates(end).objModel,'Un',0));
            else
                numMix = this.Candidate.NumMix;
                data =  ...
                    [[this.Candidate.objModel.ParamNames]; ...
                    [this.Candidate.objModel.ParamMode]; ...
                    [this.Candidate.objModel.LB]; ...
                    [this.Candidate.objModel.UserValue]; ...
                    [this.Candidate.objModel.UB]];
                modelMembership = cell2mat(arrayfun(@(x)ones(x.NumParam,1)*...
                    x.Subpop,this.Candidate.objModel,'Un',0));
            end %if
            cmap = lines(numMix);
            for modelIdx = 1:numMix
                color = sprintf('rgb(%.0f,%.0f,%.0f)',cmap(modelIdx,:)*255);
                good = modelMembership == modelIdx;
                data(1,good) = string_to_html(data(1,good),color);
            end %for
            set(hTable,'Data',data')
            
            set(hTable,'Units','pixels')
            tablePos = get(hTable,'Extent')+[0 0 0 20];
            figPos = [0.5*(scrSize(3)-tablePos(3)) ...
                0.5*(scrSize(4)-tablePos(4)) ...
                tablePos(3) tablePos(4)];
            tablePos = [0 0 figPos(3:4)];
            if tablePos(3) > scrSize(3)
                figPos(1) = 50;
                figPos(3) = scrSize(3)-100;
                tablePos(3) = figPos(3);
            end %if
            if tablePos(4) > scrSize(4)
                figPos(2) = 50;
                tablePos(3) = figPos(3)+10;
                
                figPos(4) = scrSize(4)-100;
                tablePos(4) = figPos(4);
            end %if
            setpixelposition(this.hParamFig,figPos)
            setpixelposition(hTable,tablePos,1)
            set(hTable,'Units','normalized')
            set(this.hParamFig,'Visible','on')
            
            function html = string_to_html(string,color)
                % return a HTML string with colored font
                html = strcat('<html><font color="', ...
                    color,'">',string,'</font></html>');
            end %nested0
        end %fun
        function configure_model_parameters(this,src,evnt)
            tableData = get(src,'Data');
            switch evnt.Indices(2)
                case {3,5}
                    %setting of bounds is only allowed when respective coeff-mode is set
                    %to be bound
                    if strcmp(tableData{evnt.Indices(1),2},'Unbound') ||...
                            strcmp(tableData{evnt.Indices(1),2},'Fixed')
                        tableData{evnt.Indices(1),evnt.Indices(2)} = evnt.PreviousData;
                        set(src,'Data',tableData)
                        waitfor(errordlg(sprintf(...
                            'Setting of bounds is not allowed for "%s" Parameter',...
                            tableData{evnt.Indices(1),2}),''))
                        return
                    end %if
                    %check that lower bounds of weights do not exceed 1
                    if sum([tableData{~cellfun('isempty',regexp(tableData(:,1),'Weight')),3}]) > 1
                        tableData{evnt.Indices(1),evnt.Indices(2)} = evnt.PreviousData;
                        set(src,'Data',tableData)
                        waitfor(errordlg('Weight > 1 is not allowed',''))
                        return
                    end %if
            end %switch
            
            if this.UseInfoCrit
                coeffNames = [this.Candidates(end).objModel.ParamNames];
                selection = coeffNames{evnt.Indices(1)};
                for objModel = vertcat(this.Candidates(:).objModel).'
                    update_model_parameters(objModel,selection,evnt)
                end
                
                set(src,'Data',...
                    [tableData(:,1) ...
                    [this.Candidates(end).objModel.ParamMode]' ...
                    [this.Candidates(end).objModel.LB]' ...
                    [this.Candidates(end).objModel.UserValue]' ...
                    [this.Candidates(end).objModel.UB]'])
            else
                coeffNames = [this.Candidate.objModel.ParamNames];
                selection = coeffNames{evnt.Indices(1)};
                for objModel = vertcat(this.Candidate(:).objModel).'
                    update_model_parameters(objModel,selection,evnt)
                end
                
                set(src,'Data',...
                    [tableData(:,1) ...
                    [this.Candidate.objModel.ParamMode]' ...
                    [this.Candidate.objModel.LB]' ...
                    [this.Candidate.objModel.UserValue]' ...
                    [this.Candidate.objModel.UB]'])
            end %if
        end %fun
        function close_model_parameters(this)
            if ishandle(this.hEstFig)
                set(this.hEstFig,'Visible','on')
            end %if
        end %fun
        
        %% getter
        function useinfocrit = get.UseInfoCrit(this)
            useinfocrit = this.SrcContainer.UseInfoCrit;
        end %fun
        function maxmix = get.MaxMix(this)
            maxmix = this.SrcContainer.MaxMix;
        end %fun
        function replicates = get.Replicates(this)
            replicates = this.SrcContainer.Replicates;
        end %fun
        function maxiter = get.MaxIter(this)
            maxiter = this.SrcContainer.MaxIter;
        end %fun
        function tolfun = get.TolFun(this)
            tolfun = this.SrcContainer.TolFun;
        end %fun
        function nummix = get.NumMix(this)
            nummix = this.SrcContainer.NumMix;
        end %fun
        function usecorrmean = get.UseCorrMean(this)
            usecorrmean = this.SrcContainer.UseCorrMean;
        end %fun
        function display = get.Display(this)
            display = this.SrcContainer.Display;
        end %fun
        function istruncated = get.IsTruncated(this)
            istruncated = this.SrcContainer.IsTruncated;
        end %fun
        function lefttrunc = get.LeftTrunc(this)
            lefttrunc = this.SrcContainer.LeftTrunc;
        end %fun
        function righttrunc = get.RightTrunc(this)
            righttrunc = this.SrcContainer.RightTrunc;
        end %fun
        
        %% setter
        function set_Profile(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            profile = content{value};
            update_profile(this,profile)
        end %fun
        
        function set_UseInfoCrit(this,src)
            if eq(src,this.hUserDefinedCheckbox)
                this.SrcContainer.UseInfoCrit = 0;
                set(this.hUserDefinedEdit,'Enable','on')
                
                this.Candidate = ClassMixedDistribution.empty;
                this.Candidate = ClassMixedDistribution(this,this.NumMix,this.DistFamily);
                
                set(this.hUserDefinedCheckbox,'Value',1)
                set(this.hUseInfoCritCheckbox,'Value',0)
                set(this.hUseInfoCritEdit,'Enable','off')
            else
                this.SrcContainer.UseInfoCrit = 1;
                set(this.hUseInfoCritEdit,'Enable','on')
                
                this.Candidates = ClassMixedDistribution.empty;
                for numMix = 1:this.MaxMix
                    this.Candidates(numMix) = ClassMixedDistribution(this,numMix,this.DistFamily);
                end %for
                
                set(this.hUseInfoCritCheckbox,'Value',1)
                set(this.hUserDefinedCheckbox,'Value',0)
                set(this.hUserDefinedEdit,'Enable','off')
            end %if
            
            update_profile(this,'None')
        end %fun
        function set_NumMix(this,src)
            this.SrcContainer.NumMix = max(...
                str2double(get(src,'String')),1);
            set(src,'String', this.SrcContainer.NumMix)
            
            this.Candidate = ClassMixedDistribution.empty;
            this.Candidate = ClassMixedDistribution(this,this.NumMix,this.DistFamily);
            
            update_profile(this,'None')
        end %fun
        function set_MaxMix(this,src)
            this.SrcContainer.MaxMix = max(...
                str2double(get(src,'String')),1);
            set(src,'String', this.SrcContainer.MaxMix)
            
            this.Candidates = ClassMixedDistribution.empty;
            for numMix = 1:this.MaxMix
                this.Candidates(numMix) = ClassMixedDistribution(this,numMix,this.DistFamily);
            end %for
            
            update_profile(this,'None')
        end %fun
        function set_Replicates(this,src)
            this.SrcContainer.Replicates = max(...
                str2double(get(src,'String')),1);
            set(src,'String', this.SrcContainer.Replicates)
            
            update_profile(this,'None')
        end %fun
        function set_MaxIter(this,src)
            this.SrcContainer.MaxIter = max(...
                str2double(get(src,'String')),1);
            set(src,'String', this.SrcContainer.MaxIter)
            
            update_profile(this,'None')
        end %fun
        function set_TolFun(this,src)
            this.SrcContainer.TolFun = str2double(get(src,'String'));
            
            update_profile(this,'None')
        end %fun
        function set_UseCorrMean(this,src)
            this.SrcContainer.UseCorrMean = get(src,'Value');
            
            update_profile(this,'None')
        end %fun
        function set_IsTruncated(this,src)
            this.SrcContainer.IsTruncated = get(src,'Value');
            
            if this.IsTruncated
                set([this.hLeftTruncEdit this.hRightTruncEdit],...
                    'Enable','on')
            else
                set([this.hLeftTruncEdit this.hRightTruncEdit],...
                    'Enable','off')
            end %if
            
            update_profile(this,'None')
        end %fun
        function set_LeftTrunc(this,src)
            this.SrcContainer.LeftTrunc = ...
                min(this.RightTrunc,str2double(get(src,'String')));
            
            set(src,'String', this.LeftTrunc)
            
            update_profile(this,'None')
        end %fun
        function set_RightTrunc(this,src)
            this.SrcContainer.RightTrunc = ...
                max(this.LeftTrunc,str2double(get(src,'String')));
            
            set(src,'String', this.RightTrunc)
            
            update_profile(this,'None')
        end %fun
        
        %%
        function estimate_parameter(this)
            delete(this.hEstFig)
            
            if ~isempty(this.hEstimateLine)
                delete(this.hEstimateLine)
                this.hEstimateLine = [];
            end %if
            if ~isempty(this.hPosteriorPatch)
                delete(this.hPosteriorPatch)
                this.hPosteriorPatch = [];
            end %if
            
            if this.UseInfoCrit
                apply_information_criteria(this)
            else
                hProgressbar = ClassProgressbar(...
                    {'Estimation Process...', 'Model Evaluation...'});
                
                isOK = estimate_model_parameter(this.Candidate,hProgressbar);
                
                close_progressbar(hProgressbar)
                
                if isOK
                    this.SelectedPop = 1;
                    show_posterior_distribution(this)
                else
                    waitfor(errordlg('No Solution found',''))
                end %if
            end %if
        end %fun
        function apply_information_criteria(this)
            hProgressbar = ClassProgressbar(...
                {'Estimation Process...', 'Model Evaluation...'});
            
            %preallocate
            infoCrit = zeros(this.MaxMix,2);
            good = zeros(this.MaxMix,1);
            for complexity = 1:this.MaxMix
                isOK = estimate_model_parameter(this.Candidates(complexity),hProgressbar);
                if isOK
                    calculate_information_criteria(this.Candidates(complexity));
                    infoCrit(complexity,1) = this.Candidates(complexity).AIC;
                    infoCrit(complexity,2) = this.Candidates(complexity).BIC;
                    good(complexity) = 1;
                else
                    infoCrit(complexity,:) = inf;
                end %if
                update_progressbar(hProgressbar,{complexity/this.MaxMix,0})
            end %for
            close_progressbar(hProgressbar)
            
            if any(good)
                this.hInfoCritFig = ...
                    figure(...
                    'Color', this.FamilyColor,...
                    'Units','pixels',...
                    'Position', set_figure_position(1.2,0.5,'center'),...
                    'Name', 'Information Criterion',...
                    'NumberTitle', 'off',...
                    'DockControls', 'off',...
                    'MenuBar', 'none',...
                    'IntegerHandle','off',...
                    'ToolBar', 'none');
                
                ax = ...
                    axes(...
                    'Units','normalized',...
                    'OuterPosition', [0 0 1 0.9],...
                    'XTick', 1:this.MaxMix,...
                    'NextPlot', 'add');
                xlabel('# Populations')
                ylabel('Model Weight')
                
                infoCrit = exp(bsxfun(@minus,min(infoCrit),infoCrit)/2);
                infoCrit = bsxfun(@rdivide,infoCrit,sum(infoCrit));
                stem(1:this.MaxMix,infoCrit(:,1), ...
                    'Color','r','Linestyle', '-',...
                    'Linewidth', 2, 'Marker', '^',...
                    'MarkerSize', 12, 'Parent', ax)
                stem(1:this.MaxMix,infoCrit(:,2), ...
                    'Color','k','Linestyle', '-',...
                    'Linewidth', 2, 'Marker', 'v',...
                    'MarkerSize', 12, 'Parent', ax)
                axis([1 this.MaxMix 0 1])
                legend('AIC','BIC')
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','normalized',...
                    'Position', [0 0.9 0.7 0.1],...
                    'FontSize', 20,...
                    'String', 'Choose final Complexity:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                this.hComplexityPopupmenu = ...
                    uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','normalized',...
                    'Position', [0.7 0.9 0.2 0.1],...
                    'FontSize', 18,...
                    'String', cellstr(num2str(find(good))),...
                    'Value', 1);
                
                uicontrol(...
                    'Style', 'pushbutton',...
                    'Units','normalized',...
                    'Position', [0.9 0.9 0.1 0.1],...
                    'FontSize', 18,...
                    'String', 'OK',...
                    'Callback', @(src,evnt)set_model_complexity(this));
            else
                errordlg('No Solution found','','replace')
            end %if
        end %fun
        function set_model_complexity(this)
            this.SrcContainer.NumMix = get(this.hComplexityPopupmenu,'Value');
            this.Candidate = this.Candidates(this.NumMix);
            delete(this.hInfoCritFig)
            
            this.SelectedPop = 1;
            show_posterior_distribution(this)
        end %fun
        
        function show_posterior_distribution(this)
            this.X = linspace(min(this.Data),max(this.Data),1000).';
            [this.YHat, this.Posterior] = ...
                evaluate_model_mixture(this.Candidate,this.X);
            
            % x0 = 0.01; xsize = 0.9;  y0 = 0.95; ysize = 0.85/this.NumMix;
            this.Parent.jSubpopMenu.removeAll
            for mix = 1:this.NumMix
                jOption = this.Parent.jSubpopMenu.add(sprintf('Population %.0f',mix));
                set(jOption, 'ActionPerformedCallback', ...
                    @(src,evnt)select_subpopulation(this,mix));
                switch this.Parent.Mode
                    case 'discrete'
                        this.hEstimateLine(mix) = line(...
                            'XData',this.X, ...
                            'YData',exp(this.YHat(:,mix))*this.Parent.BinWidth, ...
                            'Color','k',...
                            'Linestyle', '--',...
                            'Linewidth', 2, ...
                            'Marker', 'none',...
                            'Parent', this.Parent.hAx(1));
                    case 'continous'
                        this.hEstimateLine(mix) = line(...
                            'XData',this.X, ...
                            'YData',exp(this.YHat(:,mix)), ...
                            'Color','k',...
                            'Linestyle', '--',...
                            'Linewidth', 2, ...
                            'Marker', 'none',...
                            'Parent', this.Parent.hAx(1));
                end %switch
            end %for
            switch this.Parent.Mode
                case 'discrete'
                    this.hEstimateLine(end+1) = line(...
                        'XData',this.X,...
                        'YData',exp(this.YHat(:,end))*this.Parent.BinWidth, ...
                        'Color','m',...
                        'Linestyle', '--',...
                        'Linewidth', 2, 'Marker', 'none',...
                        'Parent', this.Parent.hAx(1));
                case 'continous'
                    this.hEstimateLine(end+1) = line(...
                        'XData',this.X,...
                        'YData',exp(this.YHat(:,end)), ...
                        'Color','m','Linestyle', '--',...
                        'Linewidth', 2, 'Marker', 'none',...
                        'Parent', this.Parent.hAx(1));
            end %switch
            axis(this.Parent.hAx(1),'tight')
            
            show_estimated_coeff_table(this)
            
            %update exportbin
            this.Parent.ExportBin.Data.Fitted_PDF = [this.X exp(this.YHat)];
            this.Parent.ExportBin.Data.Subset_Probability = [this.X exp(this.Posterior)];
            this.Parent.ExportBin.Data.Fit_Parameter = ...
                cell2mat([[this.Candidate.objModel.LB]; ...
                [this.Candidate.objModel.InitValue]; ...
                [this.Candidate.objModel.UB]; ...
                [this.Candidate.objModel.EstValue]; ...
                [this.Candidate.objModel.CI]].');
        end %fun
        function show_estimated_coeff_table(this)
            scrSize = get(0, 'ScreenSize');
            
            hFig = figure(...
                'Name', 'ESTIMATION RESULT',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'DockControls', 'off',...
                'IntegerHandle','off',...
                'Resize','off');
            
            hTable = uitable(...
                'Units','normalized',...
                'Position',[0 0 1 1],...
                'ColumnName', {'Parameter','Mode','Lower','Init.Value','Upper','Est.Value','95% CI'},...
                'ColumnFormat', {'char','char','numeric','numeric','numeric','numeric','numeric'},...
                'ColumnEditable', false(1,7),...
                'ColumnWidth',{200 200 150 150 150 150 150},...
                'RowName',[],...
                'RowStriping','off',...
                'FontSize', 20);
            
            numMix = this.Candidate.NumMix;
            data = [[this.Candidate.objModel.ParamNames]; ...
                [this.Candidate.objModel.ParamMode]; ...
                [this.Candidate.objModel.LB]; ...
                [this.Candidate.objModel.InitValue]; ...
                [this.Candidate.objModel.UB]; ...
                [this.Candidate.objModel.EstValue]; ...
                [this.Candidate.objModel.CI]];
            
            cmap = lines(numMix);
            for modelIdx = 1:numMix
                color = sprintf('rgb(%.0f,%.0f,%.0f)',cmap(modelIdx,:)*255);
                good = ~cellfun('isempty',regexp(data(1,:),num2str(modelIdx)));
                data(1,good) = string_to_html(data(1,good),color);
            end %for
            set(hTable,'Data',data')
            
            set(hTable,'Units','pixels')
            tablePos = get(hTable,'Extent');
            figPos = [0.5*(scrSize(3)-tablePos(3)) ...
                0.5*(scrSize(4)-tablePos(4)) ...
                tablePos(3) tablePos(4)];
            tablePos = [0 0 figPos(3:4)];
            if tablePos(3) > scrSize(3)
                figPos(1) = 50;
                figPos(3) = scrSize(3)-100;
                tablePos(3) = figPos(3);
            end %if
            if tablePos(4) > scrSize(4)
                figPos(2) = 50;
                figPos(4) = scrSize(4)-100;
                tablePos(4) = figPos(4);
            end %if
            setpixelposition(hFig,figPos)
            setpixelposition(hTable,tablePos,1)
            set(hTable,'Units','normalized')
            
            function html = string_to_html(string,color)
                % return a HTML string with colored font
                html = strcat('<html><font color="', ...
                    color,'">',string,'</font></html>');
            end %nested0
        end %fun
        function select_subpopulation(this,subpop)
            if strcmp(get(this.Parent.hSubpopButton,'State'),'on')
                this.SelectedPop = subpop;
                
                x = linspace(min(this.Data),max(this.Data),1000);
                dx = range(this.Data)/1000;
                switch this.Parent.Mode
                    case 'discrete'
                        vert = [reshape([x-dx;x-dx;x+dx;x+dx],4*1000,1) ...
                            reshape([zeros(1000,1) ...
                            exp(this.YHat(:,this.SelectedPop))*this.Parent.BinWidth ...
                            exp(this.YHat(:,this.SelectedPop))*this.Parent.BinWidth ...
                            zeros(1000,1)]',4*1000,1)];
                    case 'continous'
                        vert = [reshape([x-dx;x-dx;x+dx;x+dx],4*1000,1) ...
                            reshape([zeros(1000,1) ...
                            exp(this.YHat(:,this.SelectedPop)) ...
                            exp(this.YHat(:,this.SelectedPop)) ...
                            zeros(1000,1)]',4*1000,1)];
                end %switch
                [~,cidx] = histc(exp(this.Posterior(:,this.SelectedPop)),(1:1000)/1000);
                
                if isempty(this.hPosteriorPatch)
                    face = reshape(1:4*1000,4,1000)';
                    
                    this.hPosteriorPatch = ...
                        patch('Faces',face,'Vertices',vert,...
                        'FaceVertexCData',cidx,...
                        'CDataMapping', 'direct',...
                        'EdgeColor','none', ...
                        'FaceColor', 'flat',...
                        'FaceAlpha', 0.3,...
                        'Parent', this.Parent.hAx(1));
                else
                    set(this.hPosteriorPatch,...
                        'Vertices',vert,...
                        'FaceVertexCData',cidx)
                end %if
            end %if
        end %fun
        
        function update_profile(this,profile)
            this.SrcContainer.Profile = profile;
            switch profile
                case 'None'
                    set(this.hProfilePopup,'Value',...
                        find(strcmp('None',this.SrcContainer.Profiles)))
                case 'Standard'
                    set_standard_properties(this.SrcContainer)
                    check_settings(this)
                    
                    close_object(this)
                    set_parameter(this)
                otherwise
                    SLIMfastPath = getappdata(0,'SLIMfastPath');
                    filename = fullfile(SLIMfastPath, ...
                        'Profiles', [this.SrcContainer.Profile '.txt']);
                    load_settings_from_disc(this.SrcContainer,filename)
                    check_settings(this)
                    
                    close_object(this)
                    set_parameter(this)
            end %switch
        end %fun
        
        %%
        function saveObj = saveobj(this)
            saveObj = saveobj@SuperclassManager(this);
        end %fun
        function close_object(this)
            if ishandle(this.hEstFig)
                delete(this.hEstFig)
            end %if
            if ishandle(this.hParamFig)
                delete(this.hParamFig)
            end %if
            if ishandle(this.hInfoCritFig)
                delete(this.hInfoCritFig)
            end %if
        end %fun
        function delete_object(this)
            if ishandle(this.hEstFig)
                delete(this.hEstFig)
            end %if
            if ishandle(this.hParamFig)
                delete(this.hParamFig)
            end %if
            if ishandle(this.hInfoCritFig)
                delete(this.hInfoCritFig)
            end %if
            
            delete_object@SuperclassManager(this)
        end %fun
    end %methods
    
    methods (Access = protected)
        function cpObj = copyElement(this)
            cpObj = copyElement@SuperclassManager(this);
            
            cpObj.hEstFig = nan;
        end %fun
    end %methods
    methods (Static)
         function this = loadobj(S)
            this = ManagerMixedDistSettings;
            this = loadobj@SuperclassManager(this,S);
        end %fun
    end %methods
end %classdef