classdef ManagerLineProfile < SuperclassManager
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties (Hidden,Dependent)
        NumSegments
        LineInterval %[nm]
        LateralInterval %[nm]
        NumLateralPnts
        
        AvDirection
        InterpType
        Weighting
        SigmaWeight
    end %properties
    properties (Hidden,Transient)
        hFig
        hGraphFig
        hToolbar
        
        hAxProfile
        
        hProfilePopup
        hProfileSaveButton
        
        hProfileRoi
        hLineNewPosFcn
        hSampleGrid
        hProfileLine
        
        LineVert
        NumSeg
        SegmentNorm
        TotalLineNorm
        NumLinePnts
        SamplePnts
        NumMarginPnts
        OrthoSamplePnts
        OrthoSamplePntsZ
        LineIntervalPnts
        ProfilePntsZ
        
        InterpTypes = {...
            'Linear',...
            'Cubic'}
        Weightings = {...
            'Mean',...
            'Median',...
            'Max'}
        % 'Exponential',...
        % 'Gaussian'}
        
        AvDirectionList = {...
            'Parallel',...
            'Orthogonal'};
        
        ExportBin %Container for ASCII Export
        
        Header = struct(...
            'Line_Profile', 'Profile along Trajectory (pos [µm] | int [AU])')
    end %properties
    
    methods
        %constructor
        function this = ManagerLineProfile(parent)
            if nargin == 0
                parent = [];
            end %if
            this = this@SuperclassManager(parent);
        end %fun
        function check_settings(this)
            %check that # segments is integer and >2
            if rem(this.NumSegments,2) > 0
                this.SrcContainer.NumSegments = ...
                    max(2,round(this.NumSegments));
            end %if
        end %fun
        
        function set_parameter(this)
            %check if gui already open
            if ishandle(this.hFig)
                waitfor(msgbox('ROI MANAGER already open','INFO','help','modal'))
                figure(this.hFig)
                return
            end %if
            
            y0 = 180;
            
            scrSize = get(0, 'ScreenSize');
            
            this.hFig = figure(...
                'Units','pixels',...
                'Position', [0.5*(scrSize(3)-225) 0.5*(scrSize(4)-y0) 225 y0],...
                'Color', this.FamilyColor,...
                'Name', 'LINE PROFILE MANAGER',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'IntegerHandle','off',...
                'CloseRequestFcn',@(src,evnt)close_object(this));
            
            y = y0 -20;
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 50 15],...
                'FontSize', 8,...
                'String', 'Profile:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            get_actual_profiles(this.SrcContainer)
            this.hProfilePopup = ...
                uicontrol(...
                'Parent', this.hFig,...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [60 y+1 115 15],...
                'FontSize', 7,...
                'String', this.SrcContainer.Profiles,...
                'Value', find(strcmp(this.SrcContainer.Profile,this.SrcContainer.Profiles)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_Profile(this,src));
            this.hProfileSaveButton = ...
                uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', 'Save',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)save_actual_properties_as_profile(this.SrcContainer));
            
            %             y = y -20;
            %
            %             uicontrol(...
            %                 'Parent', this.hFig,...
            %                 'Style', 'Text',...
            %                 'Units','pixels',...
            %                 'Position', [5 y 170 15],...
            %                 'FontSize', 8,...
            %                 'FontUnits', 'normalized',...
            %                 'String', 'Number of Segments:',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left');
            %
            %             uicontrol(...
            %                 'Parent', this.hFig,...
            %                 'Style', 'edit',...
            %                 'Units','pixels',...
            %                 'Position', [180 y 40 15],...
            %                 'FontSize', 8,...
            %                 'FontUnits', 'normalized',...
            %                 'String', this.NumSegments,...
            %                 'BackgroundColor', [1 1 1],...
            %                 'Callback', @(src,evnt)set_NumSegments(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Line Sampling Interval [nm]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.LineInterval,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_LineInterval(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', '# Lateral Samples:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.NumLateralPnts,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_NumLateralPnts(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Lateral Sampling Interval [nm]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.LateralInterval,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_LateralInterval(this,src));
            
            %             y = y -20;
            %
            %             uicontrol(...
            %                 'Parent', this.hFig,...
            %                 'Style', 'Text',...
            %                 'Units','pixels',...
            %                 'Position', [5 y 170 15],...
            %                 'FontSize', 8,...
            %                 'FontUnits', 'normalized',...
            %                 'String', 'Interpolation Method:',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left');
            %
            %             uicontrol(...
            %                 'Style', 'popupmenu',...
            %                 'Units','pixels',...
            %                 'Position', [140 y+2 80 15],...
            %                 'FontSize', 7,...
            %                 'String', this.InterpTypes,...
            %                 'Value', find(strcmp(this.InterpType,this.InterpTypes)),...
            %                 'BackgroundColor', [1 1 1],...
            %                 'Callback', @(src,evnt)set_InterpType(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Averaging Direction:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [140 y+2 80 15],...
                'FontSize', 7,...
                'String', this.AvDirectionList,...
                'Value', find(strcmp(this.AvDirection,this.AvDirectionList)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_AvDirection(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Averaging Type:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [140 y+2 80 15],...
                'FontSize', 7,...
                'String', this.Weightings,...
                'Value', find(strcmp(this.Weighting,this.Weightings)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_Weighting(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Sigma Weighting [nm]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Enable','off');
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.SigmaWeight,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_SigmaWeight(this,src),...
                'Enable','off');
            
            y = y - 35;
            
            %             uicontrol(...
            %                 'Style', 'pushbutton',...
            %                 'Units','pixels',...
            %                 'Position', [25 y 75 25],...
            %                 'FontSize', 8,...
            %                 'String', 'Save',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left',...
            %                 'Callback', @(src,evnt)save_line_backbone(this));
            
            uicontrol(...
                'Parent', this.hFig,...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [125 y 75 25],...
                'FontSize', 8,...
                'String', 'Create',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)initialize_profile_plot(this));
            
            
            
            %             uicontrol(...
            %                 'Style', 'pushbutton',...
            %                 'Units','pixels',...
            %                 'Position', [125 y 75 25],...
            %                 'FontSize', 8,...
            %                 'String', 'Update',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left');
            
            hList = get(this.hFig,'Children');
            set(hList,...
                'Units', 'normalized',...
                'FontUnits', 'normalized',...
                'FontWeight','bold')
            set(this.hFig,'Units','pixels',...
                'Position', set_figure_position(225/y0, 0.45/225*y0,'center'))
            
            initialize_graphs(this)
        end %fun
        function initialize_graphs(this)
            this.hGraphFig = figure(...
                'Units','pixels',...
                'Position', set_figure_position(3, 0.8, 'center'),...
                'Color', this.FamilyColor,...
                'Name', 'LINE PROFILE MANAGER',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'IntegerHandle','off',...
                'CloseRequestFcn',@(src,evnt)close_object(this));
            construct_image_toolbar(this)
            
            this.hAxProfile = ...
                axes(...
                'Units','normalized',...
                'OuterPosition', [0 0 1 1],...
                'FontSize', 24,...
                'FontUnits', 'normalized',...
                'NextPlot', 'add') ;
            xlabel('Position [µm]');
            ylabel('Intensity [AU]');
        end %fun
        function construct_image_toolbar(this)
            this.hToolbar = uitoolbar(...
                'Parent',this.hGraphFig);
            icon = getappdata(0,'icon');
            uipushtool(...
                'Parent', this.hToolbar,...
                'CData', icon.('Save_Data'),...
                'ClickedCallback', @(src,evnt)export_data_as_ASCII(this));
            uitoggletool(...
                'Parent',this.hToolbar,...
                'CData', icon.('Zoom'),...
                'Tag','Zoom',...
                'Separator','on',...
                'ClickedCallback', @(src,evnt)set_zoom(src,'hFig',this.hGraphFig,'Direction','horizontal'))
            uitoggletool(...
                'Parent',this.hToolbar,...
                'CData', icon.('Pan'),...
                'Tag','Pan',...
                'ClickedCallback', @(src,evnt)set_pan(src,'hFig',this.hGraphFig,'Direction','horizontal'))
        end %fun
        
        %% getter
        function numsegments = get.NumSegments(this)
            numsegments = this.SrcContainer.NumSegments;
        end %fun
        function lineinterval = get.LineInterval(this)
            lineinterval = this.SrcContainer.LineInterval;
        end %fun
        function lateralinterval = get.LateralInterval(this)
            lateralinterval = this.SrcContainer.LateralInterval;
        end %fun
        function numlateralpnts = get.NumLateralPnts(this)
            numlateralpnts = this.SrcContainer.NumLateralPnts;
        end %fun
        function interptype = get.InterpType(this)
            interptype = this.SrcContainer.InterpType;
        end %fun
        function avdirection = get.AvDirection(this)
            avdirection = this.SrcContainer.AvDirection;
        end %fun
        function weighting = get.Weighting(this)
            weighting = this.SrcContainer.Weighting;
        end %fun
        function sigmaweight = get.SigmaWeight(this)
            sigmaweight = this.SrcContainer.SigmaWeight;
        end %fun
        
        
        %% setter
        function set_Profile(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            profile = content{value};
            update_profile(this,profile)
        end %fun
        
        function set_NumSegments(this,src)
            value = max(2,round(str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).NumSegments = value;
            end %for
            this.SrcContainer.NumSegments = value;
            
            set(src,'String', value)
            
            calculate_sampling_grid(this)
            update_profile_plot(this)
            
            update_profile(this,'None')
        end %fun
        function set_LineInterval(this,src)
            value = max(1,str2double(get(src,'String')));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LineInterval = value;
            end %for
            this.SrcContainer.LineInterval = value;
            
            set(src,'String', value)
            
            calculate_sampling_grid(this)
            update_profile_plot(this)
            
            update_profile(this,'None')
        end %fun
        function set_NumLateralPnts(this,src)
            value = max(1,round(str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).NumLateralPnts = value;
            end %for
            this.SrcContainer.NumLateralPnts = value;
            
            set(src,'String', value)
            
            calculate_sampling_grid(this)
            update_profile_plot(this)
            
            update_profile(this,'None')
        end %fun
        function set_LateralInterval(this,src)
            value = max(1,str2double(get(src,'String')));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LateralInterval = value;
            end %for
            this.SrcContainer.LateralInterval = value;
            
            set(src,'String', value)
            
            calculate_sampling_grid(this)
            update_profile_plot(this)
            
            update_profile(this,'None')
        end %fun
        function set_AvDirection(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).AvDirection = content{value};
            end %for
            this.SrcContainer.AvDirection = content{value};
            
            calculate_sampling_grid(this)
            update_profile_plot(this)
            update_profile(this,'None')
        end %fun
        function set_Weighting(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).Weighting = content{value};
            end %for
            this.SrcContainer.Weighting = content{value};
            
            update_profile_plot(this)
            update_profile(this,'None')
        end %fun
        function set_InterpType(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).InterpType = content{value};
            end %for
            this.SrcContainer.InterpType = content{value};
            
            update_profile(this,'None')
        end %fun
        
        %%
        function update_profile(this,profile)
            this.SrcContainer.Profile = profile;
            switch profile
                case 'None'
                    set(this.hProfilePopup,'Value',...
                        find(strcmp('None',this.SrcContainer.Profiles)))
                case 'Standard'
                    set_standard_properties(this.SrcContainer)
                    check_settings(this)
                    
                    close_object(this)
                    set_parameter(this)
                otherwise
                    SLIMfastPath = getappdata(0,'SLIMfastPath');
                    filename = fullfile(SLIMfastPath, ...
                        'Profiles', [this.SrcContainer.Profile '.txt']);
                    load_settings_from_disc(this.SrcContainer,filename)
                    check_settings(this)
                    
                    close_object(this)
                    set_parameter(this)
            end %switch
        end %fun
        
        function initialize_profile_plot(this)
            delete_polygon_line(this)
            
            generate_polygon_line(this)
            calculate_profile(this)
            
            this.hProfileLine = ...
                line('Parent',this.hAxProfile,...
                'Xdata', this.LineIntervalPnts,...
                'YData', this.ProfilePntsZ);
            xlim(this.hAxProfile,...
                [min(this.LineIntervalPnts) max(this.LineIntervalPnts)])
            ylim(this.hAxProfile,[0 max(this.ProfilePntsZ)])
        end %fun
        function update_profile_plot(this)
            calculate_profile(this)
            
            set(this.hProfileLine,...
                'Xdata', this.LineIntervalPnts,...
                'YData', this.ProfilePntsZ);
            xlim(this.hAxProfile,...
                [min(this.LineIntervalPnts) max(this.LineIntervalPnts)])
            ylim(this.hAxProfile,[0 max(this.ProfilePntsZ)+1e-12])
        end %fun
        
        function generate_polygon_line(this)
            %activate images hittest function
            set(this.Parent.hImage, 'HitTest', 'on')
            this.hProfileRoi = impoly(this.Parent.hImageAx,...
                'Closed',0);
            set(this.Parent.hImage, 'HitTest', 'off')
            
            this.LineVert = getPosition(this.hProfileRoi);
            if size(this.LineVert,1) < 2
                delete(this.hProfileRoi)
                this.hProfileRoi = [];
                this.LineVert = [];
                
                waitfor(errordlg('At least 2 points are requiered.','','modal'))
                return
            end %if
            
            %image limits
            imLim = [0 this.Parent.FieldOfView(5)*this.Parent.ActExp ...
                0 this.Parent.FieldOfView(6)*this.Parent.ActExp]+0.5;
            
            fcn = makeConstrainToRectFcn('impoly',imLim(1:2),imLim(3:4));
            setPositionConstraintFcn(this.hProfileRoi,fcn);
            
            this.hLineNewPosFcn = addNewPositionCallback(...
                this.hProfileRoi,@this.get_new_polygon_line_position);
            
            calculate_sampling_grid(this)
        end %fun
        function get_new_polygon_line_position(this,pos)
            this.LineVert = pos;
            if size(this.LineVert,1) < 2
                delete_polygon_line(this)
                
                waitfor(errordlg('At least 2 points are requiered.','','modal'))
                return
            end %if
            
            calculate_sampling_grid(this)
            update_profile_plot(this)
        end %fun
        function delete_polygon_line(this)
            %remove line object
            delete(this.hProfileRoi)
            this.hProfileRoi = [];
            %             delete(this.hLineNewPosFcn)
            this.hLineNewPosFcn = [];
            this.LineVert = [];
            if ishandle(this.hSampleGrid)
                delete(this.hSampleGrid)
            end %if
            this.hSampleGrid = [];
            if ishandle(this.hProfileLine)
                delete(this.hProfileLine)
            end %if
            this.hProfileRoi = [];
        end %fun
        
        function calculate_sampling_grid(this)
            this.NumSeg = size(this.LineVert,1);
            
            %transform to polar coordinates
            [theta,rho] = cart2pol(...
                diff(this.LineVert(:,1)),...
                diff(this.LineVert(:,2)));
            %calculate segment & line norms
            this.SegmentNorm = rho; %[px]
            cumSegmentNorm = [0;cumsum(this.SegmentNorm)];
            this.TotalLineNorm = cumSegmentNorm(end); %[px]
            
            %subsample profile
            lineInterval = this.LineInterval/...
                this.Parent.Px2nm*this.Parent.ActExp;
            totalRem = rem(this.TotalLineNorm,lineInterval);
            if totalRem == this.TotalLineNorm
                %no interval fits inside profile
            end %if
            
            %samples get centralized along the profile
            %subsample parallel to the line
            lineIntervalPnts = ...
                totalRem/2:lineInterval:this.TotalLineNorm-totalRem/2;
            this.NumLinePnts = numel(lineIntervalPnts);
            %check within which segment the point lies
            idxSeg = this.NumSeg-1:-1:1;
            pntSeg = idxSeg(sum(bsxfun(@le,...
                lineIntervalPnts,cumSegmentNorm)));
            
            %normalize to the respective segment start
            [X,Y] = pol2cart(reshape(theta(pntSeg),1,[]),...
                lineIntervalPnts - cumSegmentNorm(pntSeg)');
            X = X' + this.LineVert(pntSeg,1);
            Y = Y' + this.LineVert(pntSeg,2);
            this.SamplePnts = [X Y];
            
            %subsample orthogonal to the line
            lateralInterval = this.LateralInterval/...
                this.Parent.Px2nm*this.Parent.ActExp;
            marginPnt = (-this.NumLateralPnts:this.NumLateralPnts)*lateralInterval;
            this.NumMarginPnts = size(marginPnt,2);
            marginPnt = repmat(marginPnt,this.NumLinePnts,1);
            
            %rotate theta by pi/2
            theta = theta + pi/2;
            thetaSeg = repmat(reshape(theta(pntSeg),[],1),1,this.NumMarginPnts);
            
            %backproject sample points to cartesian
            [orthoX,orthoY] = pol2cart(thetaSeg(:),marginPnt(:));
            orthoX = reshape(orthoX,[this.NumLinePnts this.NumMarginPnts])+...
                repmat(X,[1 this.NumMarginPnts]);
            orthoY = reshape(orthoY,[this.NumLinePnts this.NumMarginPnts])+...
                repmat(Y,[1 this.NumMarginPnts]);
            this.OrthoSamplePnts = [orthoX(:) orthoY(:)];
            
            switch this.AvDirection
                case 'Parallel'
                    this.LineIntervalPnts = (-this.NumLateralPnts:this.NumLateralPnts)*this.LateralInterval/1000;
                case 'Orthogonal'
                    %translate line units ([px]->[µm])
                    this.LineIntervalPnts = ...
                        lineIntervalPnts/this.Parent.ActExp*this.Parent.Px2nm/1000;
            end %switch
            
            if isempty(this.hSampleGrid)
                this.hSampleGrid = line(...
                    'XData',orthoX(:),...
                    'YData',orthoY(:),...
                    'Marker','.',...
                    'Color', [1 0 0],...
                    'LineStyle','none',...
                    'Hittest','off');
            else
                set(this.hSampleGrid,...
                    'XData',orthoX(:),...
                    'YData',orthoY(:))
            end %if
        end %fun
        function calculate_profile(this)
            [I J] = ndgrid(...
                1:this.Parent.FieldOfView(6)*this.Parent.ActExp,...
                1:this.Parent.FieldOfView(5)*this.Parent.ActExp);
            
            this.OrthoSamplePntsZ = interp2(...
                J,I,this.Parent.Imagedata,...
                this.OrthoSamplePnts(:,1), ...
                this.OrthoSamplePnts(:,2));
            
            switch this.AvDirection
                case 'Parallel'
                    avDim = 1;
                case 'Orthogonal'
                    avDim = 2;
            end %switch
            
            switch this.Weighting
                case 'Mean'
                    this.ProfilePntsZ = ...
                        nanmean(reshape(...
                        this.OrthoSamplePntsZ,...
                        [this.NumLinePnts this.NumMarginPnts]),avDim);
                case 'Median'
                    this.ProfilePntsZ = ...
                        nanmedian(reshape(...
                        this.OrthoSamplePntsZ,...
                        [this.NumLinePnts this.NumMarginPnts]),avDim);
                case 'Max'
                    this.ProfilePntsZ = ...
                        nanmax(reshape(...
                        this.OrthoSamplePntsZ,...
                        [this.NumLinePnts this.NumMarginPnts]),[],avDim);
                case 'Exponential'
                case 'Gaussian'
            end %switch
        end %fun
        
        function export_data_as_ASCII(this)
            this.ExportBin = struct(...
                'Header', this.Header,...
                'Data', struct(...
                'Line_Profile_Coordinates',this.LineVert,...
                'Line_Profile',[this.LineIntervalPnts(:) this.ProfilePntsZ(:)]));
            
            write_variable_to_ascii(this)
        end %fun
        
        %%
        function saveObj = saveobj(this)
            saveObj = saveobj@SuperclassManager(this);
        end %fun
        function close_object(this)
            if ishandle(this.hFig)
                delete(this.hFig)
            end %if
            if ishandle(this.hGraphFig)
                delete(this.hGraphFig)
            end %if
            
            delete_polygon_line(this)
        end %fun
        function delete_object(this)
            if ishandle(this.hFig)
                delete(this.hFig)
            end %if
            if ishandle(this.hGraphFig)
                delete(this.hGraphFig)
            end %if
            
            delete_object@SuperclassManager(this)
        end %fun
    end %methods
    
    methods (Access = protected)
        function cpObj = copyElement(this)
            cpObj = copyElement@SuperclassManager(this);
            
            cpObj.hFig = nan;
        end %fun
    end %methods
    methods (Static)
        function this = loadobj(S)
            this = ManagerLineProfile;
            this = loadobj@SuperclassManager(this,S);
        end %fun
    end %methods
end %classdef