classdef ManagerDisplaySettings < SuperclassManager
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties(Hidden,Dependent)
        UseFilter
        FilterModel
        FilterSettings
        
        UseCalRawImage
        
        DisplayStart
        DisplayEnd
        DisplayWin
        DisplayStep
        WinMode
        RenderMode
        IsCumulative
        
        ActExp
        KernelModel
        RadWeight
        
        HideLapsedTraj
        TrajUserColor
        TrajColorCode
        TrajColorRangeStart
        TrajColorRangeEnd
        TrajLineWidth
        TrajLineStyle
    end %properties
    properties (Hidden,Transient)
        hFig = nan;
        hSpatSamplingEdit
        hIntWeightEdit
        hRadWeightEdit
        hDisplayWinEdit
        
        hEditColorRangeStart
        hEditColorRangeEnd
        
        RenderModes = {...
            'Normal',...
            'Differential'};
        WinModes = {...
            'Cumulative',...
            'Minimum',...
            'Maximum',...
            'Average',...
            'Variance'};
        KernelModels = {...
            'Fixed Radius',...
            'Loc. Precision'};
        FilterModels = {...
            'Hypothesis Map',...
            'Difference of Gaussian',...
            'Wiener Adaptive Noise',...
            'Blind Deconvolution'};
        TrajColorCodes = {...
            'User',...
            'Random',...
            'State',...
            'Time',...
            'Lifetime',...
            'Jumpsize',...
            'Diff. Coeff.'};
        TrajLineStyles = {...
            '-',...
            '--',...
            ':',...
            '-.'};
    end %properties
    
    methods
        %constructor
        function this = ManagerDisplaySettings(parent)
            if nargin == 0
                parent = [];
            end %if
            this = this@SuperclassManager(parent);
            
            if nargin > 0
                this.Parent.Frame = 1;
                if ~strcmp(class(this.Parent),'ClassComposite')
                    switch class(this.Parent)
                        case 'ClassRaw'
                            this.SrcContainer.ActExp = 1;
                            
                            this.SrcContainer.DisplayStart = ...
                                min(sum(this.Parent.objImageFile.NumImageFrames)/...
                                this.Parent.objImageFile.objChannelConfig.NumAlternatingChannels,...
                                max(1,this.DisplayStart));
                            
                            this.SrcContainer.DisplayEnd = ...
                                min(sum(this.Parent.objImageFile.NumImageFrames)/...
                                this.Parent.objImageFile.objChannelConfig.NumAlternatingChannels,...
                                max(this.DisplayStart,this.DisplayEnd));
                            
                            this.SrcContainer.DisplayWin = ...
                                min(this.DisplayEnd-this.DisplayStart+1,...
                                max(1,this.DisplayWin));
                        case 'ClassCalibration'
                            this.SrcContainer.ActExp = 1;
                            
                            this.SrcContainer.DisplayStart = ...
                                min(sum(this.Parent.objImageFile.NumImageFrames),...
                                max(1,this.DisplayStart));
                            
                            this.SrcContainer.DisplayEnd = ...
                                min(sum(this.Parent.objImageFile.NumImageFrames),...
                                max(this.DisplayStart,this.DisplayEnd));
                            
                            this.SrcContainer.DisplayWin = ...
                                min(this.DisplayEnd-this.DisplayStart+1,...
                                max(1,this.DisplayWin));
                        case 'ClassLocalization'
                            this.SrcContainer.ActExp = min(30,...
                                max(1,round(this.ActExp )));
                            
                            this.SrcContainer.DisplayStart = ...
                                min(this.DisplayEnd,...
                                max(1,this.DisplayStart));
                            
                            this.SrcContainer.DisplayEnd = ...
                                min(this.Parent.LocEnd,...
                                max(this.DisplayStart,this.DisplayEnd));
                            
                            this.SrcContainer.DisplayWin = ...
                                this.DisplayEnd-this.DisplayStart+1;
                        case {'ClassCluster' 'ClassTrajectory'}
                            this.SrcContainer.ActExp = 1;
                            
                            this.SrcContainer.DisplayStart = ...
                                min(this.DisplayEnd,...
                                max(1,this.DisplayStart));
                            
                            this.SrcContainer.DisplayEnd = ...
                                min(this.Parent.TrackEnd,...
                                max(this.DisplayStart,this.DisplayEnd));
                            
                            this.SrcContainer.DisplayWin = ...
                                this.DisplayEnd-this.DisplayStart+1;
                    end %switch
                    
                    this.SrcContainer.DisplayStep = ...
                        min(1,max(this.DisplayEnd-this.DisplayStart+1,...
                        this.DisplayStep));
                    
                    this.Parent.NumFrames = max(1,ceil(...
                        ((this.DisplayEnd-this.DisplayStart+1)-...
                        this.DisplayWin+1)/this.DisplayStep));
                end %if
                
%                 this.SrcContainer.TrajUserColor = ...
%                     str2num(this.TrajUserColor);
                this.SrcContainer.TrajLineWidth = max(1,min(5,...
                    round(this.TrajLineWidth))); %[1:5]
                
                switch this.FilterModel
                    case 'Hypothesis Map'
                        this.SrcContainer.FilterSettings = {'9','1.2'};
                    case 'Difference of Gaussian'
                        this.SrcContainer.FilterSettings = {'9','1.2','3'};
                    case 'Wiener Adaptive Noise'
                        this.SrcContainer.FilterSettings = '3';
                    case 'Blind Deconvolution'
                        this.SrcContainer.FilterSettings = {'9','1.2','10'};
                end %switch
            end %if
        end %fun
        
        function set_parameter(this)
            %check if gui already open
            if ishandle(this.hFig)
                waitfor(msgbox('DISPLAY MANAGER already open','INFO','help','modal'))
                figure(this.hFig)
                return
            end %if
            
            y0 = 90;
            
            scrSize = get(0, 'ScreenSize');
            this.hFig = figure(...
                'Units','pixels',...
                'Position', ...
                [0.5*(scrSize(3)-225) 0.5*(scrSize(4)-y0) 225 y0],...
                'Name', 'DISPLAY MANAGER',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'DockControls', 'off',...
                'Color', this.FamilyColor,...
                'Resize', 'off',...
                'IntegerHandle','off',...
                'CloseRequestFcn',@(src,evnt)close_object(this));
            
            y = y0 - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 130 15],...
                'FontSize', 8,...
                'String', 'Display Range:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [140 y 40 15],...
                'FontSize', 8,...
                'String', this.DisplayStart,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_DisplayStart(this,src));
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.DisplayEnd,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_DisplayEnd(this,src));
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', 'Binning [frames]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            this.hDisplayWinEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.DisplayWin,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_DisplayWin(this,src));
            
            if any(strcmp(class(this.Parent),...
                    {'ClassRaw','ClassLocalization'}))
                [y y0] = add_parameter_to_manager(this.hFig,y,y0,40);
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Binning Mode:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','pixels',...
                    'Position', [139 y+1 81 15],...
                    'FontSize', 7,...
                    'String', this.WinModes,...
                    'Value', find(strcmp(this.WinMode,this.WinModes)),...
                    'Callback', @(src,evnt)set_WinMode(this,src));
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Render Mode:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','pixels',...
                    'Position', [139 y+1 81 15],...
                    'FontSize', 7,...
                    'String', this.RenderModes,...
                    'Value', find(strcmp(this.RenderMode,this.RenderModes)),...
                    'Callback', @(src,evnt)set_RenderMode(this,src));
            end %if
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', 'Stepsize [frames]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.DisplayStep,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_DisplayStep(this,src));
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'checkbox',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'BackgroundColor', this.FamilyColor,...
                'String', 'Accumulative',...
                'Value', this.IsCumulative,...
                'Callback', @(src,evnt)set_IsCumulative(this,src));
            
            if strcmp(class(this.Parent),'ClassLocalization')
                [y y0] = add_parameter_to_manager(this.hFig,y,y0,85);
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Expansion Factor:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'edit',...
                    'Units','pixels',...
                    'Position', [180 y 40 15],...
                    'FontSize', 8,...
                    'String', this.Parent.ActExp,...
                    'BackgroundColor', [1 1 1],...
                    'Callback', @(src,evnt)set_ActExp(this,src));
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Spatial Sampling [nm]:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                this.hSpatSamplingEdit =...
                    uicontrol(...
                    'Style', 'edit',...
                    'Units','pixels',...
                    'Position', [180 y 40 15],...
                    'FontSize', 8,...
                    'String', sprintf('%.2f',this.Parent.Px2nm/this.Parent.ActExp),...
                    'BackgroundColor', [1 1 1],...
                    'Enable','inactive');
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y+1 90 15],...
                    'FontSize', 8,...
                    'String', 'Blur Width:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','pixels',...
                    'Position', [139 y+1 81 15],...
                    'FontSize', 7,...
                    'String', this.KernelModels,...
                    'Value', find(strcmp(this.KernelModel,this.KernelModels)),...
                    'Callback', @(src,evnt)set_KernelModel(this,src));
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Radial Size [px]:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                this.hRadWeightEdit = ...
                    uicontrol(...
                    'Style', 'edit',...
                    'Units','pixels',...
                    'Position', [180 y 40 15],...
                    'FontSize', 8,...
                    'String', this.RadWeight,...
                    'BackgroundColor', [1 1 1],...
                    'Callback', @(src,evnt)set_RadWeight(this,src));
                switch this.KernelModel
                    case 'Fixed Radius'
                        set(this.hRadWeightEdit,'Enable','on')
                    case 'Loc. Precision'
                        %User Definded KernelModel
                        set(this.hRadWeightEdit,'Enable','off')
                end %switch
            end %if
            
            if any(strcmp(class(this.Parent),...
                    {'ClassRaw','ClassLocalization'}))
                [y y0] = add_parameter_to_manager(this.hFig,y,y0,20);
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'checkbox',...
                    'Units','pixels',...
                    'Position', [5 y 90 15],...
                    'FontSize', 8,...
                    'String', 'Image Filter:',...
                    'BackgroundColor', this.FamilyColor,...
                    'Value', this.UseFilter,...
                    'Callback', @(src,evnt)set_UseFilter(this,src));
                
                uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','pixels',...
                    'Position', [95 y+1 125 15],...
                    'FontSize', 7,...
                    'String', this.FilterModels,...
                    'Value', find(strcmp(this.FilterModel,this.FilterModels)),...
                    'Callback', @(src,evnt)set_FilterModel(this,src));
                
                if this.Parent.objImageFile.objChannelConfig.HasCalMatrix(this.Parent.Channel)
                    [y y0] = add_parameter_to_manager(this.hFig,y,y0,20);
                    
                    y = y - 20;
                    
                    uicontrol(...
                        'Style', 'checkbox',...
                        'Units','pixels',...
                        'Position', [5 y 90 15],...
                        'FontSize', 8,...
                        'String', 'Calibrate Image',...
                        'BackgroundColor', this.FamilyColor,...
                        'Value', this.UseCalRawImage,...
                        'Callback', @(src,evnt)set_UseCalRawImage(this,src));
                end %if
            end %if
            
            if strcmp(class(this.Parent),'ClassTrajectory')
                [y y0] = add_parameter_to_manager(this.hFig,y,y0,120);
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'checkbox',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'BackgroundColor', this.FamilyColor,...
                    'String', 'Hide elapsed Trajectories',...
                    'Value', this.HideLapsedTraj,...
                    'Callback', @(src,evnt)set_HideLapsedTraj(this,src));
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Color Coding:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','pixels',...
                    'Position', [140 y+1 80 15],...
                    'FontSize', 7,...
                    'String', this.TrajColorCodes,...
                    'Value', find(strcmp(this.TrajColorCode,this.TrajColorCodes)),...
                    'Callback', @(src,evnt)set_TrajColorCode(this,src));
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Ensemble Color:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'pushbutton',...
                    'Units','pixels',...
                    'Position', [180 y 40 15],...
                    'String', '',...
                    'BackgroundColor', this.TrajUserColor,...
                    'Callback', @(src,evnt)set_TrajUserColor(this,src));
                
                 y = y - 20;
                 
                 uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 130 15],...
                'FontSize', 8,...
                'String', 'Color Range:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            this.hEditColorRangeStart = uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [140 y 40 15],...
                'FontSize', 8,...
                'String', this.TrajColorRangeStart,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_TrajColorRangeStart(this,src));
            
            this.hEditColorRangeEnd = uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.TrajColorRangeEnd,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_TrajColorRangeEnd(this,src));
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Line Width:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','pixels',...
                    'Position', [180 y+1 40 15],...
                    'FontSize', 8,...
                    'String', 1:5,...
                    'Value',find((1:5)==this.TrajLineWidth),...
                    'BackgroundColor', [1 1 1],...
                    'Callback', @(src,evnt)set_TrajLineWidth(this,src));
                
                y = y - 20;
                
                uicontrol(...
                    'Style', 'Text',...
                    'Units','pixels',...
                    'Position', [5 y 170 15],...
                    'FontSize', 8,...
                    'String', 'Line Style:',...
                    'BackgroundColor', this.FamilyColor,...
                    'HorizontalAlignment', 'left');
                
                uicontrol(...
                    'Style', 'popupmenu',...
                    'Units','pixels',...
                    'Position', [180 y+1 40 15],...
                    'FontSize', 8,...
                    'String', this.TrajLineStyles,...
                    'Value',find(strcmp(this.TrajLineStyles,this.TrajLineStyle)),...
                    'BackgroundColor', [1 1 1],...
                    'Callback', @(src,evnt)set_TrajLineStyle(this,src));
            end %if
            
            set(get(this.hFig,'Children'),...
                'Units', 'normalized',...
                'FontUnits', 'normalized',...
                'FontWeight','bold')
            set(this.hFig,'Units','pixels',...
                'Position', set_figure_position(225/y0, 0.45/225*y0, 'center'))
        end %fun
        
        %% getter
        function displaystart = get.DisplayStart(this)
            displaystart = this.SrcContainer.DisplayStart;
        end %fun
        function displayend = get.DisplayEnd(this)
            displayend = this.SrcContainer.DisplayEnd;
        end %fun
        function displaywin = get.DisplayWin(this)
            displaywin = this.SrcContainer.DisplayWin;
        end %fun
        function displaystep = get.DisplayStep(this)
            displaystep = this.SrcContainer.DisplayStep;
        end %fun
        function winmode = get.WinMode(this)
            winmode = this.SrcContainer.WinMode;
        end %fun
        function rendermode = get.RenderMode(this)
            rendermode = this.SrcContainer.RenderMode;
        end %fun
        function iscumulative = get.IsCumulative(this)
            iscumulative = this.SrcContainer.IsCumulative;
        end %fun
        
        function actexp = get.ActExp(this)
            actexp = this.SrcContainer.ActExp;
        end %fun
        function kernelmodel = get.KernelModel(this)
            kernelmodel = this.SrcContainer.KernelModel;
        end %fun
        function radweight = get.RadWeight(this)
            radweight = this.SrcContainer.RadWeight;
        end %fun
        
        function hidelapsedtraj = get.HideLapsedTraj(this)
            hidelapsedtraj = this.SrcContainer.HideLapsedTraj;
        end %fun
        function trajusercolor = get.TrajUserColor(this)
            trajusercolor = this.SrcContainer.TrajUserColor;
        end %fun
        function trajcolorcode = get.TrajColorCode(this)
            trajcolorcode = this.SrcContainer.TrajColorCode;
        end %fun
        function trajlinewidth = get.TrajLineWidth(this)
            trajlinewidth = this.SrcContainer.TrajLineWidth;
        end %fun
        function trajlinestyle = get.TrajLineStyle(this)
            trajlinestyle = this.SrcContainer.TrajLineStyle;
        end %fun
        function trajcolorrangestart = get.TrajColorRangeStart(this)
            trajcolorrangestart = this.SrcContainer.TrajColorRangeStart;
        end %fun
        function trajcolorrangeend = get.TrajColorRangeEnd(this)
            trajcolorrangeend = this.SrcContainer.TrajColorRangeEnd;
        end %fun

        function usefilter = get.UseFilter(this)
            usefilter = this.SrcContainer.UseFilter;
        end %fun
        function filtermodel = get.FilterModel(this)
            filtermodel = this.SrcContainer.FilterModel;
        end %fun
        function filtersettings = get.FilterSettings(this)
            if iscell(this.SrcContainer.FilterSettings)
                filtersettings = str2double(this.SrcContainer.FilterSettings);
            else
                filtersettings = str2num(this.SrcContainer.FilterSettings);
            end %if
        end %fun
        
        function usecalrawimage = get.UseCalRawImage(this)
            usecalrawimage = this.SrcContainer.UseCalRawImage;
        end %fun
        
        %% setter
        function set_RenderMode(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            if strcmp(content{value},'Differential') &&...
                    any(strcmp(this.WinMode,{...
                    'Minimum',...
                    'Maximum',...
                    'Average',...
                    'Variance'}))
                waitfor(errordlg(sprintf(...
                    '%s Bining not supported for Differential Mode',this.WinMode),'','modal'))
                set(src,'Value',1)
                
                return
            end %if
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).RenderMode = content{value};
            end %for
            this.SrcContainer.RenderMode = content{value};
            
            update_display(this)
        end %fun
        
        function set_DisplayStart(this,src)
            switch class(this.Parent)
                case {'ClassRaw' 'ClassCalibration'}
                    %first displayed frame >= first frame
                    %first displayed frame <= last displayed frame
                    value = min(this.SrcContainer.DisplayEnd,...
                        max(1,str2double(get(src,'String'))));
                case 'ClassLocalization'
                    %first displayed frame >= first localized frame
                    %first displayed frame <= last displayed frame
                    value = min(this.SrcContainer.DisplayEnd,...
                        max(1,str2double(get(src,'String'))));
                case 'ClassTrajectory'
                    %first displayed frame >= first tracked frame
                    %first displayed frame <= last displayed frame
                    value = min(this.SrcContainer.DisplayEnd,...
                        max(1,str2double(get(src,'String'))));
            end %switch
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).DisplayStart = value;
            end %for
            this.SrcContainer.DisplayStart = value;
            set(src,'String', value)
            
            if ishandle(this.hDisplayWinEdit)
                set_DisplayWin(this,this.hDisplayWinEdit)
            end %if
            
            this.Parent.NumFrames = max(1,ceil(...
                ((this.DisplayEnd-this.DisplayStart+1)-...
                this.DisplayWin+1)/this.DisplayStep));
            update_display(this)
        end %fun
        function set_DisplayEnd(this,src)
            switch class(this.Parent)
                case {'ClassRaw' 'ClassCalibration'}
                    %last displayed frame >= first displayed frame &
                    %last displayed frame <= last frame
                    value = min(sum(this.Parent.objImageFile.NumImageFrames)/...
                        this.Parent.objImageFile.objChannelConfig.NumAlternatingChannels,...
                        max(this.SrcContainer.DisplayStart,...
                        str2double(get(src,'String'))));
                case 'ClassLocalization'
                    %last displayed frame >= first displayed frame &
                    %last displayed frame <= last localized frame
                    value = min(this.Parent.LocEnd,...
                        max(this.SrcContainer.DisplayStart,...
                        str2double(get(src,'String'))));
                case 'ClassTrajectory'
                    %last displayed frame >= first displayed frame &
                    %last displayed frame <= last tracked frame
                    value = min(this.Parent.TrackEnd,...
                        max(this.SrcContainer.DisplayStart,...
                        str2double(get(src,'String'))));
            end %switch
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).DisplayEnd = value;
            end %for
            this.SrcContainer.DisplayEnd = value;
            set(src,'String', value)
            
            if ishandle(this.hDisplayWinEdit)
                set_DisplayWin(this,this.hDisplayWinEdit)
            end %if
            
            this.Parent.NumFrames = max(1,ceil(...
                ((this.DisplayEnd-this.DisplayStart+1)-...
                this.DisplayWin+1)/this.DisplayStep));
            update_display(this)
        end %fun
        function set_DisplayWin(this,src)
            %moviebin >= 1 & moviebin <= # raw images
            value = min(this.DisplayEnd-this.DisplayStart+1,max(1,...
                str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).DisplayWin = value;
            end %for
            this.SrcContainer.DisplayWin = value;
            set(src,'String', value)
            
            this.Parent.NumFrames = max(1,ceil(...
                ((this.DisplayEnd-this.DisplayStart+1)-...
                this.DisplayWin+1)/this.DisplayStep));
            update_display(this)
        end %fun
        function set_DisplayStep(this,src)
            value = max(...
                str2double(get(src,'String')),1);
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).DisplayStep = value;
            end %for
            this.SrcContainer.DisplayStep = value;
            set(src,'String', value)
            
            this.Parent.NumFrames = max(1,ceil(...
                ((this.DisplayEnd-this.DisplayStart+1)-...
                this.DisplayWin+1)/this.DisplayStep));
            update_display(this)
        end %fun
        function set_WinMode(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            if strcmp(this.RenderMode,'Differential') &&...
                    any(strcmp(content{value},{...
                    'Minimum',...
                    'Maximum',...
                    'Average',...
                    'Variance'}))
                waitfor(errordlg(sprintf(...
                    '%s Bining not supported for Differential Mode',content{value}),'','modal'))
                set(src,'Value',1)
                
                return
            end %if
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).WinMode = content{value};
            end %for
            this.SrcContainer.WinMode = content{value};
            
            update_display(this)
        end %fun
        function set_IsCumulative(this,src)
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).IsCumulative = value;
            end %for
            this.SrcContainer.IsCumulative = value;
            
            update_display(this)
        end %fun
        
        %
        function set_ActExp(this,src)
            value = min(30,max(1,round(str2double(get(src,'String')))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).ActExp = value;
            end %for
            this.SrcContainer.ActExp = value;
            
            set(src,'String',value)
            set(this.hSpatSamplingEdit,...
                'String',sprintf('%.2f',this.Parent.Px2nm/value))
            
            update_display(this)
            restore_image_assecoirs(this.Parent)
        end %fun
        function set_KernelModel(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).KernelModel = content{value};
            end %for
            this.SrcContainer.KernelModel = content{value};
            
            switch content{value}
                case 'Fixed Radius'
                    set(this.hRadWeightEdit,'Enable','on')
                case 'Loc. Precision'
                    %User Definded KernelModel
                    set(this.hRadWeightEdit,'Enable','off')
            end %switch
            
            update_display(this)
        end %fun
        function set_RadWeight(this,src)
            value = max(0.25,min(30,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).RadWeight = value;
            end %for
            this.SrcContainer.RadWeight = value;
            set(src,'String', value)
            
            update_display(this)
        end %fun
        
        %
        function set_HideLapsedTraj(this,src)
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).HideLapsedTraj = value;
            end %for
            this.SrcContainer.HideLapsedTraj = value;
            
            update_display(this)
        end %fun
        function set_TrajColorCode(this,src)
            content = get(src,'String');
            value = get(src,'Value');
                                    
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).TrajColorCode = content{value};
            end %for
            this.SrcContainer.TrajColorCode = content{value};
            
            switch this.TrajColorCode
                case 'Diff. Coeff.'
                    update_diff_coeff_fits(this.Parent)
            end %switch

            change_ensemble_color_coding(this.Parent,this.TrajColorCode,...
                [this.TrajColorRangeStart this.TrajColorRangeEnd])
        end %fun
        function set_TrajUserColor(this,src)
            this.SrcContainer.TrajUserColor = ...
                uisetcolor(this.TrajUserColor);
            
            set(src,'BackgroundColor', this.TrajUserColor)
            
            set_ensemble_color(this.Parent,this.TrajUserColor)
        end %fun
        
        function set_TrajColorRangeStart(this,src)
            value = str2double(get(src,'String'));
            if isnan(value)
                value = -inf;
            else
                value = min(value,this.TrajColorRangeEnd);
            end %if
            set(src,'String',value)
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).TrajColorRangeStart = value;
            end %for
            this.SrcContainer.TrajColorRangeStart = value;

            change_ensemble_color_coding(this.Parent,this.TrajColorCode,...
                [this.TrajColorRangeStart this.TrajColorRangeEnd])
        end %fun
        function set_TrajColorRangeEnd(this,src)
            value = str2double(get(src,'String'));
            if isnan(value)
                value = inf;
            else
                value = max(value,this.TrajColorRangeStart);
            end %if
            set(src,'String',value)
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).TrajColorRangeEnd = value;
            end %for
            this.SrcContainer.TrajColorRangeEnd = value;

            change_ensemble_color_coding(this.Parent,this.TrajColorCode,...
                [this.TrajColorRangeStart this.TrajColorRangeEnd])
        end %fun

        function set_TrajLineWidth(this,src)
            content = str2num(get(src,'String'));
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).TrajLineWidth = content(value);
            end %for
            this.SrcContainer.TrajLineWidth = content(value);
            
            %update traj line width
            set_ensemble_linewidth(this.Parent,content(value))
        end %fun
        function set_TrajLineStyle(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).TrajLineStyle = content{value};
            end %for
            this.SrcContainer.TrajLineStyle = content{value};
            
            %update traj line width
            set_ensemble_linestyle(this.Parent,content{value})
        end %fun
        %%
        function set_UseFilter(this,src)
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).UseFilter = value;
            end %for
            this.SrcContainer.UseFilter = value;
            
            %reset intensity limits
            this.Parent.objContrastSettings.IntLimits = [];
            update_display(this)
        end %fun
        function set_FilterModel(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            switch content{value}
                case 'Hypothesis Map'
                    this.SrcContainer.FilterModel = 'Hypothesis Map';
                    this.SrcContainer.FilterSettings = inputdlg(...
                        {'Window [px]','PSF Radius [px]'},...
                        'FILTER',1,{'9','1.2'});
                case 'Difference of Gaussian'
                    this.SrcContainer.FilterModel = 'Difference of Gaussian';
                    this.SrcContainer.FilterSettings = inputdlg(...
                        {'Window [px]','Excitatoric Sigma [px]','Inhibitoric Sigma [px]'},...
                        'FILTER',1,{'9','1.2','3'});
                case 'Wiener Adaptive Noise'
                    this.SrcContainer.FilterModel = 'Wiener Adaptive Noise';
                    this.SrcContainer.FilterSettings = inputdlg(...
                        {'Window [px]'},...
                        'FILTER',1,{'3'});
                case 'Blind Deconvolution'
                    this.SrcContainer.FilterModel = 'Blind Deconvolution';
                    this.SrcContainer.FilterSettings = inputdlg(...
                        {'Window [px]','Initial PSF Radius [px]','Max Iterations'},...
                        'FILTER',1,{'9','1.2','10'});
            end %switch
            
            %reset intensity limits
            this.Parent.objContrastSettings.IntLimits = [];
            update_display(this)
        end %fun
        
        %%
        function set_UseCalRawImage(this,src)
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).UseCalRawImage = value;
            end %for
            this.SrcContainer.UseCalRawImage = value;
            
            update_display(this)
        end %fun
        
        %%
        function update_display(this)
            tmpRenderMode = this.RenderMode;
            this.SrcContainer.RenderMode = 'Normal';
            
            %check if object is composite child
            if strcmp(class(this.Parent.Parent),'ClassComposite')
                %check if composite is actually displayed
                if ishandle(this.Parent.Parent.hImageFig)
                    show_frame(this.Parent.Parent,1);
                else
                    show_frame(this.Parent,1);
                end %if
            else
                show_frame(this.Parent,1);
            end %if
            
            this.SrcContainer.RenderMode = tmpRenderMode;
        end %fun
        %%
        function saveObj = saveobj(this)
            saveObj = saveobj@SuperclassManager(this);
        end %fun
        function close_object(this)
            if ishandle(this.hFig)
                delete(this.hFig)
            end %if
        end %fun
        function delete_object(this)
            if ishandle(this.hFig)
                delete(this.hFig)
            end %if
            
            delete_object@SuperclassManager(this)
        end %fun
    end %methods
    
    methods (Access = protected)
        function cpObj = copyElement(this)
            cpObj = copyElement@SuperclassManager(this);
            
            cpObj.hFig = nan;
        end %fun
    end %methods
    methods (Static)
        function this = loadobj(S)
            this = ManagerDisplaySettings;
            this = loadobj@SuperclassManager(this,S);
        end %fun
    end %methods
end %classdef