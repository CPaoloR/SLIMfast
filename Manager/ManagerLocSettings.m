classdef ManagerLocSettings < SuperclassManager
    %written by
    %C.P.Richter
    %Division of Biophysics / Group J.Piehler
    %University of Osnabrueck
    
    properties (Hidden,Dependent)
        LocStart
        LocEnd
        ErrRate
        WinX
        WinY
        NumDeflat
        MinInt
        LocModel
        LowerBoundPSF
        UpperBoundPSF
        MaxIter
        TermTol
        MaxPosRef
        LocPar
        nCores
        CropRoi
        LocLive
        NA
        EmWavelength
        CorrFactor
        Chromophor
        UserEmWavelength
        SrcDiameter
        TypePSF
        UserRadiusPSF
        RadiusPSF
    end %properties
    properties (Hidden,Transient)
        hFig = nan;
        
        hProfilePopup
        hProfileSaveButton
        
        hLocEndEdit
        hPsfEdit
        hPsfGui = nan;
        hAxShapePSF
        hTheoPSF
        hExpPSF
        hAxDistPSF
        hEditEmWavelength
        hLowerBoundPSFEdit
        hUpperBoundPSFEdit
        hLocParCheckbox
        hLocParPopup
        hLocLiveCheckbox
        hWinXEdit
        
        hLocTestButton
        hLocButton
        
        Chromophorlist = struct();  %[nm]
        LocModels = {...
            'Fixed',...
            'Fitted',...
            'Astigmatic'};
        CoreModes = {...
            '2','3','4','5','6','all'};
        PsfTypes = {...
            'manual',...
            'theoretical',...
            'experimental'}
        
        %% Tooltips
        ToolTips = struct(...
            'ErrRate', sprintf(['\n'...
            'This Value limits the Probability for Type One Error (False Positive), \n'...
            'while pixel classification using the generalized likelihood ratio test map. \n'...
            'EXAMPLE: A Value of 10^-6 limits the chance that a random background fluctuation \n'...
            'will pass as a signal to 1 in 1 Million or in case of an image with dimensions \n'...
            '1000x1000 pixels to 1 false detection.']),...
            'WinX', sprintf(['\n'...
            'Dimension of pixel region atop which\n'...
            'the fluorescence signal of one particle is expected to spread.\n'...
            'By rule of thumb this value should be at least: 6 x PSF Radius + 1. \n'...
            'EXAMPLE: To estimate the Position from a Chromophor blurred by a radially symmetric \n'...
            'Point Spread Function with Standard Deviation estimated as 1,33 pixels, \n'...
            '>99.7%% of the expected signal will lie within a box of 9x9 pixels (rule of thumb).']),...
            'NumDeflat',sprintf(['\n'...
            'Number of Deflation Cycles per Image (0 = no deflation loops). \n'...
            'After each Cycle the detected Emitters, represented by their \n'...
            'respective Intensity Profile will be subtracted from the Image. \n'...
            'In this Process dim Peaks initially hidden can be detected. \n' ...
            'The Cycle will automatically stop when there are no new detections.']),...
            'TypePSF',sprintf(['\n'...
            'The Microscopes'' Point Spread Function (PSF) defines the \n',...
            'Point Signal dispersion observed in the Fluorescence Image \n',...
            'due to light diffraction at the Objectives'' Pupil. \n',...
            'To localize Single Particles this Diffraction Pattern is modeled as \n',...
            'Fixed: Circular Gaussian Distribution with user-defined width (Standard). \n',...
            'Fitted: Circular Gaussian Distribution with width estimated from the respective signal \n',...
            'Astigmatic: Elliptic Gaussian Distribution with widths (horizontal/vertical) \n',...
            'estimated from the respective signal.']));
    end %properties
    
    methods
        %constructor
        function this = ManagerLocSettings(parent)
            if nargin == 0
                parent = [];
            end %if
            this = this@SuperclassManager(parent);
            
            if nargin > 0
                %load chromophor list
                SLIMfastPath = getappdata(0,'SLIMfastPath');
                filename = 'Chromophorlist.txt';
                fid = fopen(fullfile(SLIMfastPath, filename));
                while ~feof(fid)
                    string = textscan(fgetl(fid),'%s %f','delimiter','=');
                    this.Chromophorlist.(string{1}{1}) = string{2};
                end %while
                
                check_settings(this)
            end %if
        end %fun
        function check_settings(this)
            %first frame >= 1 & first frame <= total # frames
            this.SrcContainer.LocStart = ...
                min(min(sum(this.Parent.objImageFile.NumImageFrames)/...
                this.Parent.objImageFile.objChannelConfig.NumAlternatingChannels,...
                this.LocEnd),max(1,this.LocStart));
            %last frame >= first frame & last frame <= total # frames
            this.SrcContainer.LocEnd = ...
                min(sum(this.Parent.objImageFile.NumImageFrames)/...
                this.Parent.objImageFile.objChannelConfig.NumAlternatingChannels,...
                max(this.LocStart,this.LocEnd));
            
            this.SrcContainer.NumDeflat = ...
                min(100,this.NumDeflat);
            
            if strcmp(this.Chromophor,'User Supplied')
                this.SrcContainer.hEditEmWavelengthState = 'on';
                this.SrcContainer.EmWavelength = this.SrcContainer.UserEmWavelength;
            else
                this.SrcContainer.hEditEmWavelengthState = 'off';
                this.SrcContainer.EmWavelength = ...
                    this.Chromophorlist.(this.SrcContainer.Chromophor);
            end %if
            
            switch this.SrcContainer.TypePSF
                case 'manual'
                    this.SrcContainer.RadiusPSF = this.SrcContainer.UserRadiusPSF;
                case 'theoretical'
                    model_theoretical_psf(this)
                    this.SrcContainer.RadiusPSF = this.SrcContainer.R0/this.Parent.Px2nm;
                case 'experimental'
                    this.SrcContainer.RadiusPSF = median(this.SrcContainer.EstRadii);
            end %if
            
            if this.LocPar
                this.SrcContainer.LocLive = 0;
            end %if
        end %fun
        
        function set_parameter(this)
            %check if gui already open
            if ishandle(this.hFig)
                waitfor(msgbox('LOCALIZATION MANAGER already open','INFO','help','modal'))
                figure(this.hFig)
                return
            end %if
            
            y0 = 265;
            
            scrSize = get(0, 'ScreenSize');
            this.hFig = ...
                figure(...
                'Units','pixels',...
                'Position', ...
                [0.5*(scrSize(3)-225) 0.5*(scrSize(4)-y0) 225 y0],...
                'Name', 'LOCALIZATION MANAGER',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'DockControls', 'off',...
                'Color', this.FamilyColor,...
                'IntegerHandle','off',...
                'Resize','off',...
                'CloseRequestFcn', @(src,evnt)close_object(this),...
                'Visible','off');
            
            y = y0 -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 50 15],...
                'FontSize', 8,...
                'String', 'Profile:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            get_actual_profiles(this.SrcContainer)
            this.hProfilePopup = ...
                uicontrol(...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [60 y+1 115 15],...
                'FontSize', 7,...
                'String', this.SrcContainer.Profiles,...
                'Value', find(strcmp(this.SrcContainer.Profile,this.SrcContainer.Profiles)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_Profile(this,src));
            this.hProfileSaveButton = ...
                uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', 'Save',...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)save_actual_properties_as_profile(this.SrcContainer));
            
            y = y -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 135 15],...
                'FontSize', 8,...
                'String', 'Localization Range:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [140 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.LocStart,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_LocStart(this,src));
            
            this.hLocEndEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.LocEnd,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_LocEnd(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', 'Int. Thresh [counts]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.MinInt,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_MinInt(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Error Probability [10^]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'TooltipString', this.ToolTips.ErrRate);
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.ErrRate,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_ErrRate(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 130 15],...
                'FontSize', 8,...
                'String', 'Evaluation Box [px]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'TooltipString', this.ToolTips.WinX);
            
            this.hWinXEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.WinX,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_WinX(this,src));
            
            %             uicontrol(...
            %                 'Style', 'edit',...
            %                 'Units','pixels',...
            %                 'Position', [180 y 40 15],...
            %                 'FontSize', 8,...
            %                 'String', this.WinY,...
            %                 'BackgroundColor', [1 1 1],...
            %                 'Callback', @(src,evnt)set_WinY(this,src));
%             uicontrol(...
%                 'Style', 'pushbutton',...
%                 'Units','pixels',...
%                 'Position', [180 y 40 15],...
%                 'FontSize', 8,...
%                 'String', 'Auto',...
%                 'HorizontalAlignment', 'left',...
%                 'Callback', @(src,evnt)estimate_window(this));
            
            y = y -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', '# Deflation Loops:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'TooltipString', this.ToolTips.NumDeflat);
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', this.NumDeflat,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_NumDeflat(this,src));
            
            y = y -25;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y+2 110 15],...
                'FontSize', 8,...
                'String', 'PSF Model:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'TooltipString', this.ToolTips.TypePSF);
            
            uicontrol(...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [140 y+2 80 15],...
                'FontSize', 7,...
                'String', this.LocModels,...
                'Value', find(strcmp(this.LocModel,this.LocModels)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_LocModel(this,src));
            
            y = y -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'String', 'PSF Radius [px]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            this.hPsfEdit = ...
                uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'String', sprintf('%.2f',this.RadiusPSF),...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)set_psf_parameter(this));
            
            y = y -20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 130 15],...
                'FontSize', 8,...
                'String', 'PSF Limit [%]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            this.hLowerBoundPSFEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [140 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.LowerBoundPSF,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_LowerBoundPSF(this,src));
            
            this.hUpperBoundPSFEdit = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.UpperBoundPSF,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_UpperBoundPSF(this,src));
            
            if strcmp(this.LocModel,'Fixed')
                set([this.hLowerBoundPSFEdit ...
                    this.hUpperBoundPSFEdit],'Enable','off')
            end %if
            
            %             y = y -20;
            %
            %             uicontrol(...
            %                 'Style', 'Text',...
            %                 'Units','pixels',...
            %                 'Position', [5 y 170 15],...
            %                 'FontSize', 8,...
            %                 'String', 'Max. Pos. Refinement [px]:',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left');
            %
            %             uicontrol(...
            %                 'Style', 'edit',...
            %                 'Units','pixels',...
            %                 'Position', [180 y 40 15],...
            %                 'FontSize', 8,...
            %                 'String', this.MaxPosRef,...
            %                 'BackgroundColor', [1 1 1],...
            %                 'Callback', @(src,evnt)set_MaxPosRef(this,src));
            %
            %             y = y -20;
            %
            %             uicontrol(...
            %                 'Style', 'Text',...
            %                 'Units','pixels',...
            %                 'Position', [5 y 170 15],...
            %                 'FontSize', 8,...
            %                 'String', 'Max. # Iterations:',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left');
            %
            %             uicontrol(...
            %                 'Style', 'edit',...
            %                 'Units','pixels',...
            %                 'Position', [180 y 40 15],...
            %                 'FontSize', 8,...
            %                 'String', this.MaxIter,...
            %                 'BackgroundColor', [1 1 1],...
            %                 'Callback', @(src,evnt)set_MaxIter(this,src));
            %
            %             y = y -20;
            %
            %             uicontrol(...
            %                 'Style', 'Text',...
            %                 'Units','pixels',...
            %                 'Position', [5 y 170 15],...
            %                 'FontSize', 8,...
            %                 'String', 'Termination Tolerance [10^]:',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left');
            %
            %             uicontrol(...
            %                 'Style', 'edit',...
            %                 'Units','pixels',...
            %                 'Position', [180 y 40 15],...
            %                 'FontSize', 8,...
            %                 'String', this.TermTol,...
            %                 'BackgroundColor', [1 1 1],...
            %                 'Callback', @(src,evnt)set_TermTol(this,src));
            
            y = y -20;
            
            this.hLocParCheckbox = ...
                uicontrol(...
                'Style', 'checkbox',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'BackgroundColor', this.FamilyColor,...
                'String', 'Use Multiple Cores',...
                'Value', this.LocPar,...
                'Callback', @(src,evnt)set_LocPar(this,src));
            
            this.hLocParPopup = ...
                uicontrol(...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 7,...
                'String', this.CoreModes,...
                'Value', find(strcmp(this.CoreModes,this.nCores)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_nCores(this,src));
            
            y = y -20;
            
            this.hLocLiveCheckbox = ...
                uicontrol(...
                'Style', 'checkbox',...
                'Units','pixels',...
                'Position', [5 y 215 15],...
                'FontSize', 8,...
                'BackgroundColor', this.FamilyColor,...
                'String', 'Live Localization',...
                'Value', this.LocLive,...
                'Callback', @(src,evnt)set_LocLive(this,src));
            
            y = y - 35;
            
            this.hLocTestButton = ...
                uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [25 y 75 25],...
                'FontSize', 8,...
                'String', 'Test',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)test_localization_settings(this.Parent));
            
            this.hLocButton = ...
                uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [125 y 75 25],...
                'FontSize', 8,...
                'String', 'Localize',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)single_localization(this.Parent));
            
            set(get(this.hFig,'Children'),...
                'Units', 'normalized',...
                'FontUnits', 'normalized',...
                'FontWeight','bold')
            set(this.hFig,...
                'Units','pixels',...
                'Position', set_figure_position(225/y0, 0.45/225*y0, 'center'),...
                'Visible','on')
            
            if this.MinInt > 0
                display_frame(this.Parent)
            end %if
        end %fun
        function set_psf_parameter(this)
            %check if gui already open
            if ishandle(this.hPsfGui)
                waitfor(msgbox('PSF ESTIMATOR already open','INFO','help','modal'))
                figure(this.hPsfGui)
                return
            end %if
            
            scrSize = get(0, 'ScreenSize');
            
            y0 = 410;
            this.hPsfGui = ...
                figure(...
                'Units','pixels',...
                'Position', [0.5*(scrSize(3)-225) 0.5*(scrSize(4)-y0) 225 y0],...
                'Name', 'PSF ESTIMATOR',...
                'NumberTitle', 'off',...
                'MenuBar', 'none',...
                'ToolBar', 'none',...
                'DockControls', 'off',...
                'Color',  this.FamilyColor,...
                'Resize', 'off',...
                'Visible','off',...
                'CloseRequestFcn', @(src,evnt)update_psf_radius(this));
            
            y = y0 - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'PSF Radius [px]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.UserRadiusPSF,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_UserRadiusPSF(this,src));
            
            y = y - 25;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 215 15],...
                'FontSize', 10,...
                'FontWeight', 'bold',...
                'String', 'Theoretical',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Numerical Aperture:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.NA,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_NA(this,src));
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 80 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Emission [nm]:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [90 y 85 15],...
                'FontSize', 7,...
                'FontUnits', 'normalized',...
                'String', [fieldnames(this.Chromophorlist);...
                {'User Supplied'}],...
                'Value', find(strcmp(this.Chromophor,...
                [fieldnames(this.Chromophorlist);...
                {'User Supplied'}])),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_Chromophor(this,src));
            
            this.hEditEmWavelength = ...
                uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.EmWavelength,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_UserEmWavelength(this,src),...
                'Enable', this.SrcContainer.hEditEmWavelengthState);
            
            y = y - 20;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 170 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Correction Factor:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Style', 'edit',...
                'Units','pixels',...
                'Position', [180 y 40 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', this.CorrFactor,...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_CorrFactor(this,src));
            
            y = y - 130;
            
            this.hAxShapePSF = ...
                axes(...
                'Units','pixels',...
                'OuterPosition', [0 y 225 150],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'NextPlot', 'add') ;
            xlabel('radius [px]');
            ylabel('normalized Intensity');
            plot_psf_curve(this)
            
            %             y = y - 10;
            %
            %             uicontrol(...
            %                 'Style', 'Text',...
            %                 'Units','pixels',...
            %                 'Position', [5 y 170 15],...
            %                 'FontSize', 8,...
            %                 'FontUnits', 'normalized',...
            %                 'String', 'Light Sources` Radius [nm]:',...
            %                 'BackgroundColor', this.FamilyColor,...
            %                 'HorizontalAlignment', 'left');
            %
            %             uicontrol(...
            %                 'Style', 'edit',...
            %                 'Units','pixels',...
            %                 'Position', [180 y 40 15],...
            %                 'FontSize', 8,...
            %                 'FontUnits', 'normalized',...
            %                 'String', this.SrcDiameter,...
            %                 'BackgroundColor', [1 1 1],...
            %                 'Callback', @(src,evnt)set_SrcDiameter(this,src),...
            %                 'Enable', 'off');
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 215 15],...
                'FontSize', 10,...
                'FontWeight', 'bold',...
                'String', 'Experimental',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            y = y - 25;
            
            uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [90 y 130 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Estimate PSF Radius',...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)estimate_experimental_psf(this.Parent));
            
            y = y - 130;
            
            this.hAxDistPSF = ...
                axes(...
                'Units','pixels',...
                'OuterPosition', [0 y 225 150],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'NextPlot', 'add') ;
            xlabel('estimated psf radii [px]');
            ylabel('probability density');
            plot_psf_radii(this)
            
            y = y - 10;
            
            uicontrol(...
                'Style', 'Text',...
                'Units','pixels',...
                'Position', [5 y 30 15],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Use:',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left');
            
            uicontrol(...
                'Tag', 'locButton',...
                'Style', 'popupmenu',...
                'Units','pixels',...
                'Position', [35 y+1 85 15],...
                'FontSize', 7,...
                'FontUnits', 'normalized',...
                'String', this.PsfTypes,...
                'Value', find(strcmp(this.TypePSF,this.PsfTypes)),...
                'BackgroundColor', [1 1 1],...
                'Callback', @(src,evnt)set_TypePSF(this,src));
            
            y = y - 5;
            uicontrol(...
                'Style', 'pushbutton',...
                'Units','pixels',...
                'Position', [135 y 75 25],...
                'FontSize', 8,...
                'FontUnits', 'normalized',...
                'String', 'Accept',...
                'BackgroundColor', this.FamilyColor,...
                'HorizontalAlignment', 'left',...
                'Callback', @(src,evnt)update_psf_radius(this));
            
            set(get(this.hPsfGui,'Children'),...
                'Units', 'normalized',...
                'FontUnits', 'normalized',...
                'FontWeight','bold')
            set(findobj(this.hPsfGui,'Tag','legend'),'Fontsize',8)
            
            set(this.hPsfGui,...
                'Units','pixels',...
                'Position', set_figure_position(225/y0, 0.45/225*y0, 'center'),...
                'Visible','on')
        end %fun
        
        %% getter
        function locstart = get.LocStart(this)
            locstart = this.SrcContainer.LocStart;
        end %fun
        function locend = get.LocEnd(this)
            locend = this.SrcContainer.LocEnd;
        end %fun
        function errrate = get.ErrRate(this)
            errrate = this.SrcContainer.ErrRate;
        end %fun
        function winx = get.WinX(this)
            winx = this.SrcContainer.WinX;
        end %fun
        function winy = get.WinY(this)
            winy = this.SrcContainer.WinY;
        end %fun
        function numdeflat = get.NumDeflat(this)
            numdeflat = this.SrcContainer.NumDeflat;
        end %fun
        function minint = get.MinInt(this)
            minint = this.SrcContainer.MinInt;
        end %fun
        function locmodel = get.LocModel(this)
            locmodel = this.SrcContainer.LocModel;
        end %fun
        function lowerboundpsf = get.LowerBoundPSF(this)
            lowerboundpsf = this.SrcContainer.LowerBoundPSF;
        end %fun
        function upperboundpsf = get.UpperBoundPSF(this)
            upperboundpsf = this.SrcContainer.UpperBoundPSF;
        end %fun
        function maxiter = get.MaxIter(this)
            maxiter = this.SrcContainer.MaxIter;
        end %fun
        function termtol = get.TermTol(this)
            termtol = this.SrcContainer.TermTol;
        end %fun
        function maxposref = get.MaxPosRef(this)
            maxposref = this.SrcContainer.MaxPosRef;
        end %fun
        function locpar = get.LocPar(this)
            locpar = this.SrcContainer.LocPar;
        end %fun
        function ncores = get.nCores(this)
            ncores = this.SrcContainer.nCores;
        end %fun
        function croproi = get.CropRoi(this)
            croproi = this.SrcContainer.CropRoi;
        end %fun
        function loclive = get.LocLive(this)
            loclive = this.SrcContainer.LocLive;
        end %fun
        function na = get.NA(this)
            na = this.SrcContainer.NA;
        end %fun
        function emwavelength = get.EmWavelength(this)
            emwavelength = this.SrcContainer.EmWavelength;
        end %fun
        function corrfactor = get.CorrFactor(this)
            corrfactor = this.SrcContainer.CorrFactor;
        end %fun
        function chromophor = get.Chromophor(this)
            chromophor = this.SrcContainer.Chromophor;
        end %fun
        function useremwavelength = get.UserEmWavelength(this)
            useremwavelength = this.SrcContainer.UserEmWavelength;
        end %fun
        function srcdiameter = get.SrcDiameter(this)
            srcdiameter = this.SrcContainer.SrcDiameter;
        end %fun
        function typepsf = get.TypePSF(this)
            typepsf = this.SrcContainer.TypePSF;
        end %fun
        function userradiuspsf = get.UserRadiusPSF(this)
            userradiuspsf = this.SrcContainer.UserRadiusPSF;
        end %fun
        function radiuspsf = get.RadiusPSF(this)
            radiuspsf = this.SrcContainer.RadiusPSF;
        end %fun
        
        %% setter
        function set_Profile(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            profile = content{value};
            update_profile(this,profile)
        end %fun
        
        function set_LocStart(this,src)
            %first frame >= 1 & first frame <= total # frames
            value = min(max(...
                str2double(get(src,'String')),1), ...
                this.SrcContainer.LocEnd);
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LocStart = value;
            end %for
            this.SrcContainer.LocStart = value;
            
            set(src,'String', value)
            update_profile(this,'None')
            display_frame(this.Parent)
        end %fun
        function set_LocEnd(this,src)
            %last frame >= first frame & last frame <= total # frames
            value = min(max(...
                str2double(get(src,'String')),this.SrcContainer.LocStart), ...
                sum(this.Parent.objImageFile.NumImageFrames)/...
                this.Parent.objImageFile.objChannelConfig.NumAlternatingChannels);
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LocEnd = value;
            end %for
            this.SrcContainer.LocEnd = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_ErrRate(this,src)
            value = max(-15,min(-3,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).ErrRate = value;
            end %for
            this.SrcContainer.ErrRate = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_WinX(this,src)
            if ishandle(src)
                %get value
                value = str2double(get(src,'String'));
            else
                value = src;
            end %if
            
            %corect value
            value = round(min(30,max(3,value)));
            if mod(value,2) == 0
                value = value + 1;
            end %if
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).WinX = value;
                this.TargetContainer(idx).WinY = value;
            end %for
            this.SrcContainer.WinX = value;
            this.SrcContainer.WinY = value;
            
            set(this.hWinXEdit,'String', value)
            update_profile(this,'None')
        end %fun
        function set_WinY(this,src)
            value = round(min(30,max(3,str2double(get(src,'String')))));
            if ~mod(value,2)
                value = value + 1;
            end %if
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).WinY = value;
            end %for
            this.SrcContainer.WinY = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_NumDeflat(this,src)
            value = max(str2double(get(src,'String')),0);
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).NumDeflat = value;
            end %for
            this.SrcContainer.NumDeflat = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_LocPar(this,src)
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LocPar = value;
            end %for
            this.SrcContainer.LocPar = value;
            
            if this.LocPar
                set(this.hLocLiveCheckbox,'Value',0)
                set(this.hLocParPopup,'Enable','on')
            end %if
            
            update_profile(this,'None')
        end %fun
        function set_nCores(this,src)
            content = get(src,'String');
            value = content(get(src,'Value'));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).nCores = value;
            end %for
            this.SrcContainer.nCores = value;
            
            update_profile(this,'None')
        end %fun
        function set_CropRoi(this,src)
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).CropRoi = value;
            end %for
            this.SrcContainer.CropRoi = value;
            
            update_profile(this,'None')
        end %fun
        function set_LocLive(this,src)
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LocLive = value;
            end %for
            this.SrcContainer.LocLive = value;
            
            if this.LocLive
                set(this.hLocParCheckbox,'Value',0)
                set(this.hLocParPopup,'Enable','off')
            end %if
            
            update_profile(this,'None')
        end %fun
        function set_LocModel(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LocModel = content{value};
            end %for
            this.SrcContainer.LocModel = content{value};
            
            if strcmp(content{value},'Fixed')
                set([this.hLowerBoundPSFEdit ...
                    this.hUpperBoundPSFEdit],'Enable','off')
            else
                set([this.hLowerBoundPSFEdit ...
                    this.hUpperBoundPSFEdit],'Enable','on')
            end %if
            
            update_profile(this,'None')
        end %fun
        function set_LowerBoundPSF(this,src)
            value = min(99,max(1,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).LowerBoundPSF = value;
            end %for
            this.SrcContainer.LowerBoundPSF = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_UpperBoundPSF(this,src)
            value = max(101,min(1e3,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).UpperBoundPSF = value;
            end %for
            this.SrcContainer.UpperBoundPSF = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        
        function set_MinInt(this,src)
            %percentile between 0 and 100%
            value = max(0,str2double(get(src,'String')));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).MinInt = value;
            end %for
            this.SrcContainer.MinInt = value;
            
            set(src,'String', value)
            update_profile(this,'None')
            
            display_frame(this.Parent)
        end %fun
        function set_MaxIter(this,src)
            value = min(10000,max(1,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).MaxIter = value;
            end %for
            this.SrcContainer.MaxIter = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_TermTol(this,src)
            value = min(-1,max(-100,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).TermTol = value;
            end %for
            this.SrcContainer.TermTol = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_MaxPosRef(this,src)
            value = min(3,max(0,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).MaxPosRef = value;
            end %for
            this.SrcContainer.MaxPosRef = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_NA(this,src)
            value = max(1,str2double(get(src,'String')));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).NA = value;
            end %for
            this.SrcContainer.NA = value;
            
            set(src,'String', value)
            update_profile(this,'None')
            
            plot_psf_curve(this)
        end %fun
        function set_Chromophor(this,src)
            choice = get(src,'String');
            value = get(src,'Value');
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                if strcmp(choice{value},'User Supplied')
                    this.TargetContainer(idx).hEditEmWavelengthState = 'on';
                    this.TargetContainer(idx).Chromophor = 'User Supplied';
                    this.TargetContainer(idx).EmWavelength = ...
                        this.SrcContainer.UserEmWavelength;
                else
                    this.TargetContainer(idx).hEditEmWavelengthState = 'off';
                    
                    this.TargetContainer(idx).Chromophor = choice{value};
                    this.TargetContainer(idx).EmWavelength = ...
                        this.Chromophorlist.(this.SrcContainer.Chromophor);
                end %if
            end %for
            
            if strcmp(choice{value},'User Supplied')
                this.SrcContainer.hEditEmWavelengthState = 'on';
                this.SrcContainer.Chromophor = 'User Supplied';
                this.SrcContainer.EmWavelength = ...
                    this.SrcContainer.UserEmWavelength;
            else
                this.SrcContainer.hEditEmWavelengthState = 'off';
                this.SrcContainer.Chromophor = choice{value};
                this.SrcContainer.EmWavelength = ...
                    this.Chromophorlist.(this.SrcContainer.Chromophor);
            end %if
            
            set(this.hEditEmWavelength,...
                'String', this.SrcContainer.EmWavelength,...
                'Enable', this.SrcContainer.hEditEmWavelengthState)
            
            plot_psf_curve(this)
            
            update_profile(this,'None')
        end %fun
        function set_UserEmWavelength(this,src)
            value = min(1100,max(230,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).UserEmWavelength = value;
                this.TargetContainer(idx).EmWavelength = value;
            end %for
            this.SrcContainer.UserEmWavelength = value;
            this.SrcContainer.EmWavelength = value;
            
            set(src,'String', value)
            update_profile(this,'None')
            
            plot_psf_curve(this)
        end %fun
        function set_CorrFactor(this,src)
            value = min(10,max(1,str2double(get(src,'String'))));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).CorrFactor = value;
            end %for
            this.SrcContainer.CorrFactor = value;
            
            set(src,'String', value)
            update_profile(this,'None')
            
            plot_psf_curve(this)
        end %fun
        function set_SrcDiameter(this,src)
            value = str2double(get(src,'String'));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).SrcDiameter = value;
            end %for
            this.SrcContainer.SrcDiameter = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        function set_TypePSF(this,src)
            content = get(src,'String');
            value = get(src,'Value');
            if strcmp(content{value},'experimental') && ...
                    isempty(this.SrcContainer.EstRadii)
                waitfor(errordlg('No experimental radii found','','modal'))
                
                %set to previous selection
                value = find(strcmp(this.TypePSF,this.PsfTypes));
                set(src,'Value',value)
                return
            end %if
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).TypePSF = content{value};
            end %for
            this.SrcContainer.TypePSF = content{value};
            
            set(src,'Value',value)
            update_profile(this,'None')
        end %fun
        function set_UserRadiusPSF(this,src)
            value = max(0.1,str2double(get(src,'String')));
            
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).UserRadiusPSF = value;
            end %for
            this.SrcContainer.UserRadiusPSF = value;
            
            set(src,'String', value)
            update_profile(this,'None')
        end %fun
        
        function model_theoretical_psf(this)
            x = 2*pi*this.SrcContainer.NA.*this.SrcContainer.Radius/...
                this.SrcContainer.EmWavelength/this.SrcContainer.CorrFactor;
            this.SrcContainer.PSF = (2*besselj(1,x)./x).^2;
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).PSF = this.SrcContainer.PSF;
            end %for
            
            this.SrcContainer.R0 = interp1(this.SrcContainer.PSF,this.SrcContainer.Radius,exp(-0.5)); %[nm]
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).R0 = this.SrcContainer.R0;
            end %for
        end %fun
        function plot_psf_radii(this)
            cla(this.hAxDistPSF)
            
            if ~isempty(this.SrcContainer.EstRadii)
                %calculate density estimate
                nbins = calcnbins(this.SrcContainer.EstRadii, 'fd');
                [~,density,xmesh,~] =...
                    kde(this.SrcContainer.EstRadii,nbins);
                
                area(this.hAxDistPSF, xmesh, density, ...
                    'Linewidth', 2,...
                    'FaceColor', [0.8627 0.8627 0.8627]);
                
                set(this.hAxDistPSF, 'YLim', [0 max(density)])
                set(this.hAxDistPSF,'XLim', [max(min(xmesh),0) max(xmesh)])
                linkaxes(this.hAxDistPSF,'x')
                
                legend(this.hAxDistPSF,{sprintf('\t # = %.0f\n min = %.2f\n max = %.2f\n median = %.2f\n iqr = %.2f',...
                    numel(this.SrcContainer.EstRadii), min(this.SrcContainer.EstRadii),...
                    max(this.SrcContainer.EstRadii),median(this.SrcContainer.EstRadii),...
                    iqr(this.SrcContainer.EstRadii))},'color',[1 1 1],...
                    'EdgeColor',  [0 0 0], 'Fontsize', 8)
            end %if
        end %fun
        function plot_psf_curve(this)
            model_theoretical_psf(this)
            if isempty(this.hTheoPSF) || ...
                    ~ishandle(this.hTheoPSF)
                this.hTheoPSF = ...
                    plot(this.hAxShapePSF,...
                    [-fliplr(this.SrcContainer.Radius) 0 this.SrcContainer.Radius]./this.Parent.Px2nm,...
                    [fliplr(this.SrcContainer.PSF) 1 this.SrcContainer.PSF],...
                    'Tag', 'theoretical psf',...
                    'Color', [0 0 0], 'linewidth', 2,...
                    'DisplayName', sprintf(' r0 = %.2f px\n r0 = %.0f nm',...
                    this.SrcContainer.R0/this.Parent.Px2nm,this.SrcContainer.R0));
                legend(this.hAxShapePSF,'show');
                axis(this.hAxShapePSF, 'tight')
            else
                set(this.hTheoPSF, ...
                    'YData', [fliplr(this.SrcContainer.PSF) 1 this.SrcContainer.PSF],...
                    'DisplayName', sprintf(' r0 = %.2f px\n r0 = %.0f nm',...
                    this.SrcContainer.R0/this.Parent.Px2nm,this.SrcContainer.R0))
            end %if
        end %fun
        function update_psf_radius(this)
            switch this.SrcContainer.TypePSF
                case 'manual'
                    this.SrcContainer.RadiusPSF = this.SrcContainer.UserRadiusPSF;
                case 'theoretical'
                    this.SrcContainer.RadiusPSF = this.SrcContainer.R0/this.Parent.Px2nm;
                case 'experimental'
                    this.SrcContainer.RadiusPSF = median(this.SrcContainer.EstRadii);
            end %if
            numTargets = numel(this.TargetContainer);
            for idx = 1:numTargets
                this.TargetContainer(idx).RadiusPSF = ...
                    this.SrcContainer.RadiusPSF;
            end %for
            
            set(this.hPsfEdit,'String', ...
                sprintf('%.2f', this.SrcContainer.RadiusPSF))
            delete(this.hPsfGui)
        end %fun
        
        %%
        function update_profile(this,profile)
            this.SrcContainer.Profile = profile;
            switch profile
                case 'None'
                    set(this.hProfilePopup,'Value',...
                        find(strcmp('None',this.SrcContainer.Profiles)))
                case 'Standard'
                    set_standard_properties(this.SrcContainer)
                    check_settings(this)
                    
                    close_object(this)
                    set_parameter(this)
                otherwise
                    SLIMfastPath = getappdata(0,'SLIMfastPath');
                    filename = fullfile(SLIMfastPath, ...
                        'Profiles', [this.SrcContainer.Profile '.txt']);
                    load_settings_from_disc(this.SrcContainer,filename)
                    check_settings(this)
                    
                    close_object(this)
                    set_parameter(this)
            end %switch
        end %fun
        function winEst = estimate_window(this)
            %calculate image autocorrelation
            imgCorr = calculate_normalized_image_auto_correlation(...
                this.Parent.RawImagedata);
            %find center peak
            [ctrI,ctrJ] = find(imgCorr == max(imgCorr(:)),1);
            %crop around center peak
            domain = -this.WinX:this.WinX;
            imgCorrCrop = imgCorr(...
                domain+ctrI,domain+ctrJ);
            %matrix -> vector
            ydata = reshape(imgCorrCrop,[],1);
            %find center peak within vector
            zeroOrderIdx = (ydata == max(ydata));
            %remove center peak
            imgCorrCrop(5*this.WinX+1,5*this.WinX+1) = nan;
            ydata(zeroOrderIdx) = [];
            
            %generate index matrix
            idxJ = ones(numel(domain),1)*domain;
            idxI = idxJ.';
            xdata = [idxI(:) idxJ(:)];
            %remove center peak index
            xdata(zeroOrderIdx,:) = [];
            %fit autocorrelation
            thetaEst = OLS_fit_2dim_gaussian(...
                xdata,ydata);
            
            winEst = ceil(6*thetaEst(2)/sqrt(2)+1);
            set_WinX(this,winEst)
        end %fun
        
        %%
        function saveObj = saveobj(this)
            saveObj = saveobj@SuperclassManager(this);
        end %fun
        function close_object(this)
            if ishandle(this.hFig)
                delete(this.hFig)
            end %if
            if ishandle(this.hPsfGui)
                delete(this.hPsfGui)
            end %if
            if this.MinInt > 0
                display_frame(this.Parent)
            end %if
        end %fun
        function delete_object(this)
            if ishandle(this.hFig)
                delete(this.hFig)
            end %if
            if ishandle(this.hPsfGui)
                delete(this.hPsfGui)
            end %if
            
            delete_object@SuperclassManager(this)
        end %fun
    end %methods
    
    methods (Access = protected)
        function cpObj = copyElement(this)
            cpObj = copyElement@SuperclassManager(this);
            
            cpObj.hFig = nan;
            cpObj.hPsfGui = nan;
        end %fun
    end %methods
    methods (Static)
        function this = loadobj(S)
            this = ManagerLocSettings;
            this = loadobj@SuperclassManager(this,S);
        end %fun
    end %methods
end %classdef